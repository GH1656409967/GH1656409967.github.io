[{"content":"起因 最近在用霞鹜文楷(LXGW WenKai)，配合上PaperMod这种强调文字的主题，在观感上很不错，于是决定转到Hugo。Hugo的文档和资料不太容易找，中文支持也少，中间遇到不少麻烦，记录下解决过程，给遇到同样问题的人一些参考。\n安装 GO：官网下载，一键安装。 Hugo：GitHub下载，添加环境变量。 1\u0026gt; hugo version 2hugo v0.114.0-9df2ec7988e5a217a14901cc76c0b7e76b2e9f02+extended windows/amd64 BuildDate=2023-06-19T17:01:43Z VendorInfo=gohugoio 主题 PaperMod 执行hugo new site \u0026lt;blog\u0026gt;创建博客目录，目录结构如下：\n1 archetypes/ # 内容模板文件 2 assets/ # 静态资源 3 content/ # 博客内容 4 data/ 5 layouts/ # 网站生成模版 6 public/ # 项目导出文件 7 resources/ 8 static/ # 静态文件 9 themes/ # 主题 10 hugo.toml # 配置文件 默认不带主题，可以到Hugo官网主题淘一淘。本文使用PaperMod，将代码直接下载下来，放到themes/下。当然也可以git clone，但是themes/.git/影响博客源码的提交，以及对应的源码部署方式，也可能导致文末出现的CSS加载失败问题。\n使用 hugo server 启动本地调试服务，访问http://localhost:1313/查看页面。使用hugo生成网页文件至public目录。\n配置 hugo.toml（必看） 站点目录的配置优先级高，会覆盖主题中的配置。所有在主题文件夹中的改动，都可以先将它复制到站点目录对应文件夹下，再作其他修改。这样主题更新的时候，自定义改动就不会丢失。\n配置文件支持.toml、.yaml等。Hugo推荐.toml，但是PaperMod推荐.yaml。网上.toml的比较少，本文使用这种。配置项的具体含义，请查阅Hugo的官方文档和PaperMod的配置wiki。\n以下为/hugo.toml配置参考：\n1# baseURL = \u0026#39;http://localhost:1313/\u0026#39; 2baseURL = \u0026#39;https://blog.lordash.de\u0026#39; 3languageCode = \u0026#39;zh-cn\u0026#39; 4title = \u0026#39;似水\u0026#39; 5theme = \u0026#39;PaperMod\u0026#39; 6 7cleanDestinationDir = true 8enableEmoji = true # 允许使用Emoji表情 9enableInlineShortcodes = true # 允许内联短码 10enableRobotsTXT = true # 允许爬虫抓取到搜索引擎 11hasCJKLanguage = true # 自动检测是否包含中文日文韩文 12 13# 语言设置 14defaultContentLanguage = \u0026#34;zh\u0026#34; 15 16# 单语言，必须在此处，以下设置之前 17[languages] 18[languages.zh] 19 languageName = \u0026#34;中文\u0026#34; 20 21[markup.goldmark.renderer] 22 unsafe = true # html标签 23[markup.highlight] 24 codeFences = true # 代码框 25 guessSyntax = true # 猜测代码类型 26 lineNos = true # 显示行号 27 lineNumbersInTable = false # table分隔行号与代码 28 noClasses = true # 代码块style而非class 29 style = \u0026#34;monokai\u0026#34; # 配色方案 30 31# 菜单设置 32[[menu.main]] 33 name = \u0026#34;搜索\u0026#34; 34 pre = \u0026#34;\u0026lt;i class=\u0026#39;fa fa-search\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; 35 weight = 960 36 identifier = \u0026#34;search\u0026#34; 37 url = \u0026#34;/search\u0026#34; 38[[menu.main]] 39 name = \u0026#34;文章\u0026#34; 40 pre = \u0026#34;\u0026lt;i class=\u0026#39;fa fa-list\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; 41 weight = 970 42 identifier = \u0026#34;posts\u0026#34; 43 url = \u0026#34;/posts\u0026#34; 44[[menu.main]] 45 name = \u0026#34;专栏\u0026#34; 46 pre = \u0026#34;\u0026lt;i class=\u0026#39;fa fa-book\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; 47 weight = 980 48 identifier = \u0026#34;series\u0026#34; 49 url = \u0026#34;/series\u0026#34; 50[[menu.main]] 51 name = \u0026#34;友链\u0026#34; 52 pre = \u0026#34;\u0026lt;i class=\u0026#39;fa fa-link\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; 53 weight = 990 54 identifier = \u0026#34;links\u0026#34; 55 url = \u0026#34;/links\u0026#34; 56[[menu.main]] 57 name = \u0026#34;关于\u0026#34; 58 pre = \u0026#34;\u0026lt;i class=\u0026#39;fa fa-info-circle\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; 59 weight = 1000 60 identifier = \u0026#34;about\u0026#34; 61 url = \u0026#34;/about\u0026#34; 62 63paginate = 15 # 每页文章数量 64[[permalinks]] 65 post = \u0026#34;/posts/:section/:slug/\u0026#34; # 链接格式 66 67# 搜索功能 68[outputs] 69 home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] 70 71# 主题设置 72[params] 73 env = \u0026#34;production\u0026#34; 74 description = \u0026#34;Life is like a boat\u0026#34; 75 author = \u0026#34;Lordash\u0026#34; 76 keywords = [\u0026#34;中文博客\u0026#34;,\u0026#34;ACM竞赛题解\u0026#34;,\u0026#34;计算机代码编程\u0026#34;,\u0026#34;免费技术分享学习\u0026#34;] 77 DateFormat = \u0026#34;2006-01-02\u0026#34; 78 ShowCodeCopyButtons = true # 代码复制按钮 79 ShowFullTextinRSS = true # RSS展示全文 80 defaultTheme = \u0026#34;dark\u0026#34; # 默认主题颜色 81 hideSummary = false # 隐藏摘要 82 showtoc = true # 显示目录 83 tocopen = true # 目录默认展开 84 ShowPostNavLinks = true # 显示上一篇/下一篇 85 ShowBreadCrumbs = true # 文章顶部面包屑导航 86 # ShowRssButtonInSectionTermList = true 87 comments = true # 展示评论 88 hideFooter = false # 隐藏页脚信息 89 # ShowAllPagesInArchive = true # 90 91# 左上角标签 92[params.label] 93 text = \u0026#34;Lordash\u0026#39;s blog\u0026#34; 94 # icon = \u0026#34;images/favicon-32x32-.png\u0026#34; 95 # iconHeight = 36 96 97[params.assets] 98 favicon = \u0026#34;images/favicon-16x16-.png\u0026#34; # 浏览器标签图标 99 favicon16x16 = \u0026#34;images/favicon-16x16-.png\u0026#34; # 浏览器标签图标 100 favicon32x32 = \u0026#34;images/favicon-32x32-.png\u0026#34; # 浏览器标签图标 101 disableHLJS = true # 不使用highlight.js 102 103[params.profileMode] 104 enabled = true # 个人主页模式 105 title = \u0026#34;似水\u0026#34; 106 subtitle = \u0026#34;Life is like a boat\u0026#34; 107 imageUrl = \u0026#34;https://s2.loli.net/2022/06/01/D6SzQ9Uc1dTFbKf.png\u0026#34; 108 imageWidth = \u0026#34;125\u0026#34; 109 imageHeight = \u0026#34;172\u0026#34; 110 111# 主页按钮 112[[params.profileMode.buttons]] 113 name = \u0026#34;技术\u0026#34; 114 url = \u0026#34;/posts/tech\u0026#34; 115[[params.profileMode.buttons]] 116 name = \u0026#34;生活\u0026#34; 117 url = \u0026#34;/posts/life\u0026#34; 118 119# 社交图标 120[[params.socialIcons]] 121 name = \u0026#34;github\u0026#34; 122 url = \u0026#34;https://github.com/GH1656409967\u0026#34; 123[[params.socialIcons]] 124 name = \u0026#34;QQ\u0026#34; 125 url = \u0026#34;http://wpa.qq.com/msgrd?v=3\u0026amp;uin=1656409967\u0026amp;site=qq\u0026amp;menu=yes\u0026#34; 126[[params.socialIcons]] 127 name = \u0026#34;neteasecloudmusic\u0026#34; 128 url = \u0026#34;https://music.163.com/#/user/home?id=270121274\u0026#34; 129[[params.socialIcons]] 130 name = \u0026#34;douban\u0026#34; 131 url = \u0026#34;https://www.douban.com/people/Lordash/\u0026#34; 132[[params.socialIcons]] 133 name = \u0026#34;email\u0026#34; 134 url = \u0026#34;mailto:1656409967@qq.com\u0026#34; 135[[params.socialIcons]] 136 name = \u0026#34;RSS\u0026#34; 137 url = \u0026#34;posts/index.xml\u0026#34; 138 139# fuse.js模糊搜索 140[params.fuseOpts] 141 isCaseSensitive = false # 不区分大小写 142 shouldSort = true # 搜索结果排序 143 location = 0 144 distance = 1000 145 threshold = 0.4 146 minMatchCharLength = 0 147 keys = [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] 148 149# 分类等级 150[taxonomies] 151 category = \u0026#34;categories\u0026#34; 152 tag = \u0026#34;tags\u0026#34; 153 series = \u0026#34;series\u0026#34; 154 155# 评论 156[params.twikoo] 157 version = \u0026#34;1.6.16\u0026#34; 158 159# 访客统计 160[params.busuanzi] 161 enable = true 默认中文 i18n 关键在于以下配置，且必须在其他配置上层，同理可以添加多语言。\n1# 语言设置 2defaultContentLanguage = \u0026#34;zh\u0026#34; 3 4# 单语言，必须在此处，以下设置之前 5[languages] 6[languages.zh] 7 languageName = \u0026#34;中文\u0026#34; 自定义字体 正文采用霞鹜文楷(LXGW WenKai)，代码采用Ubuntu Mono derivative Powerline。在/layouts/partials/extend_head.html中引入\n1\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.staticfile.org/lxgw-wenkai-screen-webfont/1.6.0/lxgwwenkaiscreen.css\u0026#34; media=\u0026#34;print\u0026#34; onload=\u0026#34;this.media=\u0026#39;all\u0026#39;\u0026#34;\u0026gt; 同时，在/assets/css/extended/blank.css中配置\n1body { 2 font-family: \u0026#34;LXGW WenKai Screen\u0026#34;, sans-serif !important; 3} 4 5.post-content pre, code { 6 font-family: \u0026#39;Ubuntu Mono derivative Powerline\u0026#39;, sans-serif; 7 max-height: 40rem; 8} 菜单栏 菜单设置，根据权重weight排序。（折叠菜单和汉堡菜单，暂时没有好的适配方式，同时个人感觉也与主题不合，搁置。有了解的小伙伴烦请告知我一下）。\n1# 菜单设置 2[[menu.main]] 3 name = \u0026#34;搜索\u0026#34; 4 pre = \u0026#34;\u0026lt;i class=\u0026#39;fa fa-search\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; 5 weight = 960 6 identifier = \u0026#34;search\u0026#34; 7 url = \u0026#34;/search\u0026#34; 8[[menu.main]] 9 name = \u0026#34;文章\u0026#34; 10 pre = \u0026#34;\u0026lt;i class=\u0026#39;fa fa-list\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; 11 weight = 970 12 identifier = \u0026#34;posts\u0026#34; 13 url = \u0026#34;/posts\u0026#34; 14[[menu.main]] 15 name = \u0026#34;专栏\u0026#34; 16 pre = \u0026#34;\u0026lt;i class=\u0026#39;fa fa-book\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; 17 weight = 980 18 identifier = \u0026#34;series\u0026#34; 19 url = \u0026#34;/series\u0026#34; 20[[menu.main]] 21 name = \u0026#34;友链\u0026#34; 22 pre = \u0026#34;\u0026lt;i class=\u0026#39;fa fa-link\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; 23 weight = 990 24 identifier = \u0026#34;links\u0026#34; 25 url = \u0026#34;/links\u0026#34; 26[[menu.main]] 27 name = \u0026#34;关于\u0026#34; 28 pre = \u0026#34;\u0026lt;i class=\u0026#39;fa fa-info-circle\u0026#39;\u0026gt;\u0026lt;/i\u0026gt;\u0026#34; 29 weight = 1000 30 identifier = \u0026#34;about\u0026#34; 31 url = \u0026#34;/about\u0026#34; 图标 Font Awesome 在/layouts/partials/extend_head.html中引入\n1\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\u0026#34;\u0026gt; 搜索功能 执行hugo new search.md创建搜索页面，修改front-matter\n1--- 2title: \u0026#34;搜索\u0026#34; 3date: --- 4layout: search 5--- 同时必须配置以下内容，参考文档\n1# 搜索功能 2[outputs] 3 home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;JSON\u0026#34;] 侧边目录 参考Hugo博客目录放在侧边 | PaperMod主题。修改/layouts/partials/toc.html为以下内容：\n1{{- $headers := findRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;(.|\\n])+?\u0026lt;/h[1-6]\u0026gt;\u0026#34; .Content -}} 2{{- $has_headers := ge (len $headers) 1 -}} 3{{- if $has_headers -}} 4\u0026lt;aside id=\u0026#34;toc-container\u0026#34; class=\u0026#34;toc-container wide\u0026#34;\u0026gt; 5\u0026lt;div class=\u0026#34;toc\u0026#34;\u0026gt; 6 \u0026lt;details {{if (.Param \u0026#34;TocOpen\u0026#34;) }} open{{ end }}\u0026gt; 7 \u0026lt;summary accesskey=\u0026#34;c\u0026#34; title=\u0026#34;(Alt + C)\u0026#34;\u0026gt; 8 \u0026lt;span class=\u0026#34;details\u0026#34;\u0026gt;{{- i18n \u0026#34;toc\u0026#34; | default \u0026#34;Table of Contents\u0026#34; }}\u0026lt;/span\u0026gt; 9 \u0026lt;/summary\u0026gt; 10 11 \u0026lt;div class=\u0026#34;inner\u0026#34;\u0026gt; 12 {{- if (.Param \u0026#34;UseHugoToc\u0026#34;) }} 13 {{- .TableOfContents -}} 14 {{- else }} 15 {{- $largest := 6 -}} 16 {{- range $headers -}} 17 {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} 18 {{- $headerLevel := len (seq $headerLevel) -}} 19 {{- if lt $headerLevel $largest -}} 20 {{- $largest = $headerLevel -}} 21 {{- end -}} 22 {{- end -}} 23 24 {{- $firstHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers 0) 1) 0)) -}} 25 26 {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice -}} 27 \u0026lt;ul\u0026gt; 28 {{- range seq (sub $firstHeaderLevel $largest) -}} 29 \u0026lt;ul\u0026gt; 30 {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (sub (add $largest .) 1) -}} 31 {{- end -}} 32 {{- range $i, $header := $headers -}} 33 {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} 34 {{- $headerLevel := len (seq $headerLevel) -}} 35 36 {{/* get id=\u0026#34;xyz\u0026#34; */}} 37 {{- $id := index (findRE \u0026#34;(id=\\\u0026#34;(.*?)\\\u0026#34;)\u0026#34; $header 9) 0 }} 38 39 {{- /* strip id=\u0026#34;\u0026#34; to leave xyz, no way to get regex capturing groups in hugo */ -}} 40 {{- $cleanedID := replace (replace $id \u0026#34;id=\\\u0026#34;\u0026#34; \u0026#34;\u0026#34;) \u0026#34;\\\u0026#34;\u0026#34; \u0026#34;\u0026#34; }} 41 {{- $header := replaceRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;((.|\\n])+?)\u0026lt;/h[1-6]\u0026gt;\u0026#34; \u0026#34;$1\u0026#34; $header -}} 42 43 {{- if ne $i 0 -}} 44 {{- $prevHeaderLevel := index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub $i 1)) 1) 0 -}} 45 {{- $prevHeaderLevel := len (seq $prevHeaderLevel) -}} 46 {{- if gt $headerLevel $prevHeaderLevel -}} 47 {{- range seq $prevHeaderLevel (sub $headerLevel 1) -}} 48 \u0026lt;ul\u0026gt; 49 {{/* the first should not be recorded */}} 50 {{- if ne $prevHeaderLevel . -}} 51 {{- $.Scratch.Add \u0026#34;bareul\u0026#34; . -}} 52 {{- end -}} 53 {{- end -}} 54 {{- else -}} 55 \u0026lt;/li\u0026gt; 56 {{- if lt $headerLevel $prevHeaderLevel -}} 57 {{- range seq (sub $prevHeaderLevel 1) -1 $headerLevel -}} 58 {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) . -}} 59 \u0026lt;/ul\u0026gt; 60 {{/* manually do pop item */}} 61 {{- $tmp := $.Scratch.Get \u0026#34;bareul\u0026#34; -}} 62 {{- $.Scratch.Delete \u0026#34;bareul\u0026#34; -}} 63 {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice}} 64 {{- range seq (sub (len $tmp) 1) -}} 65 {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (index $tmp (sub . 1)) -}} 66 {{- end -}} 67 {{- else -}} 68 \u0026lt;/ul\u0026gt; 69 \u0026lt;/li\u0026gt; 70 {{- end -}} 71 {{- end -}} 72 {{- end -}} 73 {{- end }} 74 \u0026lt;li\u0026gt; 75 \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; 76 {{- else }} 77 \u0026lt;li\u0026gt; 78 \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; 79 {{- end -}} 80 {{- end -}} 81 \u0026lt;!-- {{- $firstHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers 0) 1) 0)) -}} --\u0026gt; 82 {{- $firstHeaderLevel := $largest }} 83 {{- $lastHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub (len $headers) 1)) 1) 0)) }} 84 \u0026lt;/li\u0026gt; 85 {{- range seq (sub $lastHeaderLevel $firstHeaderLevel) -}} 86 {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) (add . $firstHeaderLevel) }} 87 \u0026lt;/ul\u0026gt; 88 {{- else }} 89 \u0026lt;/ul\u0026gt; 90 \u0026lt;/li\u0026gt; 91 {{- end -}} 92 {{- end }} 93 \u0026lt;/ul\u0026gt; 94 {{- end }} 95 \u0026lt;/div\u0026gt; 96 \u0026lt;/details\u0026gt; 97\u0026lt;/div\u0026gt; 98\u0026lt;/aside\u0026gt; 99\u0026lt;script\u0026gt; 100 let activeElement; 101 let elements; 102 window.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function (event) { 103 checkTocPosition(); 104 105 elements = document.querySelectorAll(\u0026#39;h1[id],h2[id],h3[id],h4[id],h5[id],h6[id]\u0026#39;); 106 // Make the first header active 107 activeElement = elements[0]; 108 const id = encodeURI(activeElement.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); 109 document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.add(\u0026#39;active\u0026#39;); 110 }, false); 111 112 window.addEventListener(\u0026#39;resize\u0026#39;, function(event) { 113 checkTocPosition(); 114 }, false); 115 116 window.addEventListener(\u0026#39;scroll\u0026#39;, () =\u0026gt; { 117 // Check if there is an object in the top half of the screen or keep the last item active 118 activeElement = Array.from(elements).find((element) =\u0026gt; { 119 if ((getOffsetTop(element) - window.pageYOffset) \u0026gt; 0 \u0026amp;\u0026amp; 120 (getOffsetTop(element) - window.pageYOffset) \u0026lt; window.innerHeight/2) { 121 return element; 122 } 123 }) || activeElement 124 125 elements.forEach(element =\u0026gt; { 126 const id = encodeURI(element.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); 127 if (element === activeElement){ 128 document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.add(\u0026#39;active\u0026#39;); 129 } else { 130 document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.remove(\u0026#39;active\u0026#39;); 131 } 132 }) 133 }, false); 134 135 const main = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--article-width\u0026#39;), 10); 136 const toc = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--toc-width\u0026#39;), 10); 137 const gap = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--gap\u0026#39;), 10); 138 139 function checkTocPosition() { 140 const width = document.body.scrollWidth; 141 142 if (width - main - (toc * 2) - (gap * 4) \u0026gt; 0) { 143 document.getElementById(\u0026#34;toc-container\u0026#34;).classList.add(\u0026#34;wide\u0026#34;); 144 } else { 145 document.getElementById(\u0026#34;toc-container\u0026#34;).classList.remove(\u0026#34;wide\u0026#34;); 146 } 147 } 148 149 function getOffsetTop(element) { 150 if (!element.getClientRects().length) { 151 return 0; 152 } 153 let rect = element.getBoundingClientRect(); 154 let win = element.ownerDocument.defaultView; 155 return rect.top + win.pageYOffset; 156 } 157\u0026lt;/script\u0026gt; 158{{- end }} 在/assets/css/extended/blank.css中配置\n1:root { 2 --nav-width: 1380px; 3 --article-width: 720px; 4 --toc-width: 300px; 5} 6 7.toc { 8 margin: 0 2px 40px 2px; 9 border: 1px solid var(--border); 10 background: var(--entry); 11 border-radius: var(--radius); 12 padding: 0.4em; 13} 14 15.toc-container.wide { 16 position: absolute; 17 height: 100%; 18 border-right: 1px solid var(--border); 19 left: calc((var(--toc-width) + var(--gap)) * -1); 20 top: calc(var(--gap) * 2); 21 width: var(--toc-width); 22} 23 24.wide .toc { 25 position: sticky; 26 top: var(--gap); 27 border: unset; 28 background: unset; 29 border-radius: unset; 30 width: 100%; 31 margin: 0 2px 40px 2px; 32} 33 34.toc details summary { 35 cursor: zoom-in; 36 margin-inline-start: 20px; 37 padding: 12px 0; 38} 39 40.toc details[open] summary { 41 font-weight: 500; 42} 43 44.toc-container.wide .toc .inner { 45 margin: 0; 46} 47 48.active { 49 font-size: 110%; 50 font-weight: 600; 51} 52 53.toc ul { 54 list-style-type: circle; 55} 56 57.toc .inner { 58 margin: 0 0 0 20px; 59 padding: 0px 15px 15px 20px; 60 font-size: 16px; 61 62 /*目录显示高度*/ 63 max-height: 83vh; 64 overflow-y: auto; 65} 66 67.toc .inner::-webkit-scrollbar-thumb { 68 /*滚动条*/ 69 background: var(--border); 70 border: 7px solid var(--theme); 71 border-radius: var(--radius); 72} 73 74.toc li ul { 75 margin-inline-start: calc(var(--gap) * 0.5); 76 list-style-type: none; 77} 78 79.toc li { 80 list-style: none; 81 font-size: 0.95rem; 82 padding-bottom: 5px; 83} 84 85.toc li a:hover { 86 color: var(--secondary); 87} Shortcode 参考来写一些好玩的 Hugo 短代码吧。\n缩写 新建/layouts/shortcodes/abbr.html，内容如下：\n1\u0026lt;abbr title=\u0026#34;{{ .Get \u0026#34;title\u0026#34; }}\u0026#34;\u0026gt;{{ .Get \u0026#34;text\u0026#34; }}\u0026lt;/abbr\u0026gt; 使用方法（去掉'#'）：\n1{#{\u0026lt; abbr title=\u0026#34;达拉崩巴斑得贝迪卜多比鲁翁\u0026#34; text=\u0026#34;达拉崩巴\u0026#34; \u0026gt;}} 达拉崩巴 折叠 新建/layouts/shortcodes/detail.html，内容如下：\n1\u0026lt;details\u0026gt; 2 \u0026lt;summary\u0026gt;{{ (.Get 0) | markdownify }}\u0026lt;/summary\u0026gt; 3 {{ .Inner | markdownify }} 4\u0026lt;/details\u0026gt; 使用方法（去掉'#'）：\n1{#{\u0026lt; detail \u0026#34;点击展开\u0026#34; \u0026gt;}} 2 hello world! 3{#{\u0026lt; /detail \u0026gt;}} 点击展开 hello world! 音乐 新建/layouts/shortcodes/music.html，内容如下：\n1\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\u0026#34;\u0026gt; 2\u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt;.dark .aplayer .aplayer-body{background-color:#212121}.dark .aplayer .aplayer-info{border-top-color:#212121}.dark .aplayer.aplayer-withlist .aplayer-info{border-bottom-color:#5c5c5c}.dark .aplayer.aplayer-fixed .aplayer-list{border-color:#5c5c5c}.dark .aplayer .aplayer-info .aplayer-music .aplayer-author,.dark .aplayer .aplayer-info .aplayer-music .aplayer-title{color:#fff}.dark .aplayer .aplayer-info .aplayer-controller .aplayer-time{color:#eee}.dark .aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path{fill:#eee}.dark .aplayer .aplayer-list{background-color:#212121}.dark .aplayer .aplayer-list::-webkit-scrollbar-thumb{background-color:#999}.dark .aplayer .aplayer-list::-webkit-scrollbar-thumb:hover{background-color:#bbb}.dark .aplayer .aplayer-list li{color:#fff;border-top-color:#666}.dark .aplayer .aplayer-list li:hover{background:#4e4e4e}.dark .aplayer .aplayer-list li.aplayer-list-light{background:#6c6c6c}.dark .aplayer .aplayer-list li .aplayer-list-author,.dark .aplayer .aplayer-list li .aplayer-list-index{color:#ddd}.dark .aplayer .aplayer-lrc{text-shadow:-1px -1px 0 #666}.dark .aplayer .aplayer-lrc:before{background:-moz-linear-gradient(top,#212121 0,rgba(33,33,33,0) 100%);background:-webkit-linear-gradient(top,#212121,rgba(33,33,33,0));background:linear-gradient(180deg,#212121,rgba(33,33,33,0))}.dark .aplayer .aplayer-lrc:after{background:-moz-linear-gradient(top,rgba(33,33,33,0) 0,rgba(33,33,33,.8) 100%);background:-webkit-linear-gradient(top,rgba(33,33,33,0),rgba(33,33,33,.8));background:linear-gradient(180deg,rgba(33,33,33,0),rgba(33,33,33,.8))}.dark .aplayer .aplayer-lrc p{color:#fff}.dark .aplayer .aplayer-miniswitcher{background:#484848}.dark .aplayer .aplayer-miniswitcher .aplayer-icon path{fill:#eee}\u0026lt;/style\u0026gt; 3\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 4\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 5 6{{ if .IsNamedParams }} 7 \u0026lt;meting-js 8 id=\u0026#34;{{ .Get \u0026#34;id\u0026#34; }}\u0026#34; 9 server=\u0026#34;{{ .Get \u0026#34;server\u0026#34; }}\u0026#34; 10 type=\u0026#34;{{ .Get \u0026#34;type\u0026#34; }}\u0026#34; 11 fixed=\u0026#34;{{ if .Get \u0026#34;fixed\u0026#34; }}{{ .Get \u0026#34;fixed\u0026#34; }}{{ else }}false{{ end }}\u0026#34; 12 mini=\u0026#34;{{ if .Get \u0026#34;mini\u0026#34; }}{{ .Get \u0026#34;mini\u0026#34; }}{{ else }}false{{ end }}\u0026#34; 13 autoplay=\u0026#34;{{ if .Get \u0026#34;autoplay\u0026#34; }}{{ .Get \u0026#34;autoplay\u0026#34; }}{{ else }}false{{ end }}\u0026#34; 14 loop=\u0026#34;{{ if .Get \u0026#34;loop\u0026#34; }}{{ .Get \u0026#34;loop\u0026#34; }}{{ else }}none{{ end }}\u0026#34; 15 theme=\u0026#34;{{ if .Get \u0026#34;autoplay\u0026#34; }}{{ .Get \u0026#34;autoplay\u0026#34; }}{{ else }}#255579{{ end }}\u0026#34; 16 volume=\u0026#34;{{ if .Get \u0026#34;volume\u0026#34; }}{{ .Get \u0026#34;volume\u0026#34; }}{{ else }}0.6{{ end }}\u0026#34; 17 prelosd=\u0026#34;{{ if .Get \u0026#34;prelosd\u0026#34; }}{{ .Get \u0026#34;prelosd\u0026#34; }}{{ else }}auto{{ end }}\u0026#34; 18 mutex=\u0026#34;{{ if .Get \u0026#34;mutex\u0026#34; }}{{ .Get \u0026#34;mutex\u0026#34; }}{{ else }}true{{ end }}\u0026#34; 19 list-folded=\u0026#34;{{ if .Get \u0026#34;list-folded\u0026#34; }}{{ .Get \u0026#34;list-folded\u0026#34; }}{{ else }}true{{ end }}\u0026#34;\u0026gt; 20 \u0026lt;/meting-js\u0026gt; 21{{ end }} 使用方法（去掉'#'）：\n1{#{\u0026lt; music id=\u0026#34;560183743\u0026#34; type=\u0026#34;song\u0026#34; server=\u0026#34;netease\u0026#34; \u0026gt;}} Bilibili 新建/layouts/shortcodes/bilibili.html，内容如下：\n1{{ $vid := (.Get 0) }} 2{{ $videopage := default 1 (.Get 1) }} 3{{ $basicQuery := querify \u0026#34;page\u0026#34; $videopage \u0026#34;high_quality\u0026#34; 1 \u0026#34;danmaku\u0026#34; 1 \u0026#34;as_wide\u0026#34; 1}} 4{{ $videoQuery := \u0026#34;\u0026#34; }} 5 6{{ if strings.HasPrefix (lower $vid) \u0026#34;av\u0026#34; }} 7 {{ $videoQuery = querify \u0026#34;aid\u0026#34; (strings.TrimPrefix \u0026#34;av\u0026#34; (lower $vid)) }} 8{{ else if strings.HasPrefix (lower $vid) \u0026#34;bv\u0026#34; }} 9 {{ $videoQuery = querify \u0026#34;bvid\u0026#34; $vid }} 10{{ else }} 11 \u0026lt;p\u0026gt;Bilibili 视频av号或BV号错误!\u0026lt;/p\u0026gt; 12 \u0026lt;p\u0026gt;当前视频av或BV号:{{ $vid }}, 视频分P:{{ $videopage }}\u0026lt;/p\u0026gt; 13{{ end }} 14 15\u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt; 16 .video-wrapper { 17 position: relative; 18 overflow: hidden; 19 margin: auto; 20 padding-bottom: 66%; 21 width: 100%; 22 height: 0; 23 text-align: center 24 } 25 26 .video-wrapper iframe { 27 position: absolute; 28 top: 0; 29 left: 0; 30 width: 100%; 31 height: 100% 32 } 33\u0026lt;/style\u0026gt; 34 35\u0026lt;div class=\u0026#34;video-wrapper\u0026#34;\u0026gt; 36 \u0026lt;iframe src=\u0026#34;https://player.bilibili.com/player.html?{{ $basicQuery | safeURL }}\u0026amp;{{ $videoQuery | safeURL }}\u0026#34; 37 scrolling=\u0026#34;no\u0026#34; frameborder=\u0026#34;no\u0026#34; framespacing=\u0026#34;0\u0026#34; allowfullscreen=\u0026#34;true\u0026#34;\u0026gt; 38 \u0026lt;/iframe\u0026gt; 39\u0026lt;/div\u0026gt; 使用方法（去掉'#'）\n1{#{\u0026lt; bilibili BV1pX4y1R7d6 \u0026gt;}} 代码高亮 Hugo使用Chroma，PaperMod使用highlight.js，本文采用Hugo自带方案。\n1[markup.highlight] 2 codeFences = true # 代码框 3 guessSyntax = true # 猜测代码类型 4 lineNos = true # 显示行号 5 lineNumbersInTable = false # table分隔行号与代码 6 noClasses = true # 代码块style而非class 7 style = \u0026#34;monokai\u0026#34; # 配色方案 8 9[params.assets] 10 disableHLJS = true # 不使用highlight.js 注意lineNumbersInTable设置为true时，长代码块的行号部分会出现多余的滚动条，并且不同步；设置为false时，点击代码块的复制按钮又会连行号一起复制。\n本文处理后一种情况。在/layouts/partials/footer.html中，找到对于复制按钮点击事件的监听，修改if里面的内容如下，也算是投机取巧的办法了。\n1 copybutton.addEventListener(\u0026#39;click\u0026#39;, (cb) =\u0026gt; { 2 if (\u0026#39;clipboard\u0026#39; in navigator) { 3 // 不包含样式的span的内容拼接起来，也是代码块的内容 4 let x = codeblock.getElementsByTagName(\u0026#34;span\u0026#34;); 5 let noLineNumContent = \u0026#34;\u0026#34;; 6 for (i = 0; i \u0026lt; x.length; i++) { 7 if (x[i].style.display || x[i].style.color); 8 else noLineNumContent += x[i].textContent; 9 } 10 navigator.clipboard.writeText(noLineNumContent); 11 copyingDone(); 12 return; 13 } 数学公式 KaTeX PaperMod未整合，但文档中提到了做法。\n新建/layouts/partials/math.html，复制粘贴KaTeX提供的自动渲染模板：\n1\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.css\u0026#34; integrity=\u0026#34;sha384-GvrOXuhMATgEsSwCs4smul74iXGOixntILdUW9XmUC6+HX0sLNAK3q71HotJqlAn\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; 2\u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.js\u0026#34; integrity=\u0026#34;sha384-cpW21h6RZv/phavutF+AuVYrr+dA8xD9zs6FwLpaCct6O9ctzYFfFr4dgmgccOTx\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 3\u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/contrib/auto-render.min.js\u0026#34; integrity=\u0026#34;sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 4\u0026lt;script\u0026gt; 5 document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function() { 6 renderMathInElement(document.body, { 7 // customised options 8 // • auto-render specific keys, e.g.: 9 delimiters: [ 10 {left: \u0026#39;$$\u0026#39;, right: \u0026#39;$$\u0026#39;, display: true}, 11 {left: \u0026#39;$\u0026#39;, right: \u0026#39;$\u0026#39;, display: false}, 12 {left: \u0026#39;\\\\(\u0026#39;, right: \u0026#39;\\\\)\u0026#39;, display: false}, 13 {left: \u0026#39;\\\\[\u0026#39;, right: \u0026#39;\\\\]\u0026#39;, display: true} 14 ], 15 // • rendering keys, e.g.: 16 throwOnError : false 17 }); 18 }); 19\u0026lt;/script\u0026gt; 然后在/layouts/partials/extend_head.html中添加：\n1\u0026lt;!-- KaTeX --\u0026gt; 2{{ if or .Params.math .Site.Params.math }} 3{{ partial \u0026#34;math.html\u0026#34; . }} 4{{ end }} 在需要开启LaTeX渲染的文章front-matter中添加：\n1math: true 评论系统 Twikoo 本文使用Twikoo作为评论系统，后台的部署参考Twikoo文档，或按照视频教程一步步完成即可。\n前端部分参考Hugo博客添加Twikoo评论。新建/layouts/partials/comments.html，添加以下内容：\n1\u0026lt;div\u0026gt; 2 \u0026lt;div class=\u0026#34;pagination__title\u0026#34;\u0026gt; 3 \u0026lt;span class=\u0026#34;pagination__title-h\u0026#34; style=\u0026#34;font-size: 20px;\u0026#34;\u0026gt;💬评论\u0026lt;/span\u0026gt; 4 \u0026lt;hr /\u0026gt; 5 \u0026lt;/div\u0026gt; 6 \u0026lt;div id=\u0026#34;tcomment\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 7 \u0026lt;script src=\u0026#34;https://cdn.staticfile.org/twikoo/{{ .Site.Params.twikoo.version }}/twikoo.all.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 8 \u0026lt;script\u0026gt; 9 twikoo.init({ 10 envId: \u0026#34;\u0026#34;, // 这里填写自己的envId 11 el: \u0026#34;#tcomment\u0026#34;, 12 lang: \u0026#39;zh-CN\u0026#39;, 13 region: \u0026#39;ap-shanghai\u0026#39;, 14 path: window.TWIKOO_MAGIC_PATH||window.location.pathname, 15 }); 16 \u0026lt;/script\u0026gt; 17\u0026lt;/div\u0026gt; 添加配置\n1# 评论 2[params.twikoo] 3 version = \u0026#34;1.6.16\u0026#34; # 这个版本号要自己手动修改，和twikoo的版本号要对得上 访客统计 busuanzi 访客统计采用不蒜子，参考Hugo添加不蒜子Busuanzi站点访问量与阅读量统计，在/layouts/partials/extend_head.html中引入：\n1\u0026lt;!-- busuanzi --\u0026gt; 2{{- if .Site.Params.busuanzi.enable -}} 3 \u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 4 \u0026lt;meta name=\u0026#34;referrer\u0026#34; content=\u0026#34;no-referrer-when-downgrade\u0026#34;\u0026gt; 5{{- end -}} 站点底部显示总访问量与访客数，修改/layouts/partials/footer.html，在footer标签中添加：\n1\u0026lt;!-- busuanzi --\u0026gt; 2{{ if .Site.Params.busuanzi.enable -}} 3\u0026lt;span id=\u0026#34;busuanzi_container_site_pv\u0026#34;\u0026gt; 4 \u0026lt;i class=\u0026#34;fa fa-eye\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span id=\u0026#34;busuanzi_value_site_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 5\u0026lt;/span\u0026gt; 6\u0026lt;span id=\u0026#34;busuanzi_container_site_uv\u0026#34;\u0026gt; 7 \u0026lt;i class=\u0026#34;fa fa-user\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;span id=\u0026#34;busuanzi_value_site_uv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; 8\u0026lt;/span\u0026gt; 9{{- end -}} 每篇文章阅读量，在PaperMod主题中，修改/layouts/partials/post_meta.html，在末尾添加：\n1\u0026lt;!-- busuanzi --\u0026gt; 2{{ if .Site.Params.busuanzi.enable -}} 3 \u0026amp;nbsp;·\u0026amp;nbsp; 4 \u0026lt;span id=\u0026#34;busuanzi_container_page_pv\u0026#34;\u0026gt;本文阅读量\u0026lt;span id=\u0026#34;busuanzi_value_page_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;次\u0026lt;/span\u0026gt; 5{{- end }} 最后在站点配置中添加：\n1# 访问统计 2[params.busuanzi] 3 enable = true 部署 以Vercel为例，部署方式有至少两种。一种是上传博客源码，部署时选择Hugo，在线生成网页文件并部署；另一种则是本地生成网页文件，部署时选择Other，也就是GitHub Pages的方式。本文采用后者，具体过程不再赘述。\nCSS加载失败 使用 hugo server 启动本地调试服务，访问http://localhost:1313/时看起来很正常，推送到GitHub上，使用GitHub Pages或Vercel部署的页面却加载不出CSS。\n按下F12，切换到控制台，可以看到提示如下。大意是CSS文件的SHA-256校验失败，所以无法加载。\n1Failed to find a valid digest in the \u0026#39;integrity\u0026#39; attribute for resource \u0026#39;https://blog-d1lytax8a-lordash.vercel.app/assets/css/stylesheet.94301bb9792e5b60c04e4187a47605d05c85a2062102b81ada42fe7d0cd0aec1.css\u0026#39; with computed SHA-256 integrity \u0026#39;DtzRH2bXNjGH5kpyxdinsAaB3zwGHAorYyxEe0JoY9I=\u0026#39;. The resource has been blocked. 简单搜索下，有说可能的原因是Cloudflare的速度/优化/Auto Minify功能改动文件导致；也有直接修改/layouts/partials/head.html生成过程，去掉integrity的。\n以上两种情况，在折腾 Hugo \u0026amp; PaperMod 主题找到了好的方法：\nCloudflare 关闭的方法：速度 - 优化 - Auto Minify。 在 Hugo 中关闭的方法： 1[params.assets] 2 disableFingerprinting = true 本文未做以上修改。在对本地及GitHub上的CSS文件进行SHA-256校验时，发现提交GitHub后的文件就已经不一致了，可以猜测是Git提交时有改动，此时，很容易就联想到行尾序列（行结束符）的问题。\n假设你在Windows上使用Git上传代码，Git会在你提交时自动的把行结束符CRLF转化成LF，而在拉取代码时把LF转化成CRLF。查看Git配置：\n1git config --global -l 关闭自动转换行尾序列功能\n1git config --global core.autocrlf false 重新提交网页文件（最好是先删除），再次部署即可。\n","permalink":"https://blog.lordash.de/posts/configure/ff377f87efdbc8bc/","summary":"起因 最近在用霞鹜文楷(LXGW WenKai)，配合上PaperMod这种强调文字的主题，在观感上很不错，于是决定转到Hugo。Hugo的文档","title":"Hugo以及PaperMod主题的配置"},{"content":" 文章的部分内容被密码保护：\n--- DON'T MODIFY THIS LINE --- 此内容加密 点击展开 表面上\n一级标题 二级标题 三级标题 四级标题 五级标题 六级标题 This is a test!\n这是一个测试\nMarkdown 字体 加粗 显示\n字体 加粗 显示\n字体 斜体 显示\n字体 斜体 显示\n字体 加粗并斜体 显示\n字体 加粗并斜体 显示\n组合 加粗并斜体 显示\n引用\n引用引用\n这样来 删除一段文本\n无序\n无序 无序 无序\n无序\n无序 有序 有序 有序 有序 有序 表头 表头 单元格 单元格 单元格 单元格 表头 表头 单元格 单元格 单元格 单元格 首页\n首页: http://localhost:1313/posts/test/#一级标题\nLaTeX 行间公式 $$ a = b * c / d - (e + f) $$\n行内公式 $ a = b * c / d - (e + f) $\n代码高亮 C++ 1//#pragma GCC optimize(3,\u0026#34;Ofast\u0026#34;,\u0026#34;inline\u0026#34;) 2#define _CRT_SECURE_NO_WARNINGS 3#include \u0026lt;bits/stdc++.h\u0026gt; 4#include \u0026lt;unordered_map\u0026gt; 5using namespace std; 6 7#define Mid ((l+r)/2) 8#define pb push_back 9#define mp make_pair 10#define ls ((rt)\u0026lt;\u0026lt;1) 11#define rs ((rt)\u0026lt;\u0026lt;1|1) 12#define sq(u) ((u)*(u)) 13#define Abs(u) ((u)\u0026gt;0?(u):-(u)) 14#define ze(u) (Abs(u)\u0026lt;eps) 15#define eq(u, v) (ze((u)-(v))) 16#define Sgn(u) ((u)\u0026gt;eps?1:((u)\u0026lt;-eps?-1:0)) 17typedef long long LL; 18typedef unsigned long long UL; 19typedef double DB; 20const int inf = 0x3f3f3f3f; 21const LL INF = 0x3f3f3f3f3f3f3f3f; 22const DB eps = 1e-8; 23const DB pi = acos(-1.0); 24 25const int N = (int)1e5; 26const int M = (int)4e3; 27const int mxn = N + 5; 28const int mxm = M + 5; 29 30LL ans = 1e18 + 7; 31 32LL SUM(LL a, LL b) 33{ 34 LL cnt = 0; 35 for (a /= b; a; a /= b) cnt += a; 36 return cnt; 37} 38 39LL sum = 0, upperlim = 1; 40 41void test(LL row, LL ld, LL rd) 42{ 43 if (row != upperlim) 44 { 45 LL pos = upperlim \u0026amp; ~(row | ld | rd); 46 while (pos) 47 { 48 long p = pos \u0026amp; -pos; 49 pos -= p; 50 test(row + p, (ld + p) \u0026lt;\u0026lt; 1, (rd + p) \u0026gt;\u0026gt; 1); 51 } 52 } 53 else 54 sum++; 55} 56 57LL f[84] = { 0,1,1,2 }; 58 59void fib() 60{ 61 for (int i = 3; i \u0026lt;= 83; i++) { 62 f[i] = f[i - 1] + f[i - 2]; 63 } 64} 65 66int main() 67{ 68 //int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 69 //int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 70 fib(); 71 72 LL x, m; 73 scanf(\u0026#34;%lld %lld\u0026#34;, \u0026amp;x, \u0026amp;m); 74 75 76 LL v = 1, flag = 0; 77 for (v = 1; v \u0026lt;= 83; v++) { 78 if (x == f[v]) { 79 flag = 1; 80 break; 81 } 82 } 83 84 85 if (flag) { 86 for (LL i = 2; i * i \u0026lt;= m; ++i) 87 { 88 LL cnt = 0; 89 while (m % i == 0)++cnt, m /= i; 90 if (cnt)ans = min(ans, SUM(x, i) / cnt); 91 } 92 if (m \u0026gt; 1)ans = min(ans, SUM(x, m)); 93 printf(\u0026#34;%lld\\n\u0026#34;, ans); 94 return 0; 95 } 96 97 int n = x % min(13LL, m) + 1LL; 98 99 upperlim = (upperlim \u0026lt;\u0026lt; n) - 1; 100 101 test(0, 0, 0); 102 printf(\u0026#34;%lld\\n\u0026#34;, sum); 103 104 return 0; 105} 106 107/* 108 109*/ Java 1package cn.jee.config; 2 3import org.springframework.context.annotation.Bean; 4import org.springframework.context.annotation.Configuration; 5import org.springframework.web.servlet.LocaleResolver; 6import org.springframework.web.servlet.config.annotation.InterceptorRegistry; 7import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; 8import org.springframework.web.servlet.i18n.LocaleChangeInterceptor; 9import org.springframework.web.servlet.i18n.SessionLocaleResolver; 10 11import java.util.Locale; 12 13@Configuration 14public class MyMvcConfiger implements WebMvcConfigurer { 15 @Override 16 public void addInterceptors(InterceptorRegistry registry) { 17 registry.addInterceptor(localeChangeInterceptor()); 18 } 19 20 @Bean 21 public LocaleResolver localeResolver() { 22 SessionLocaleResolver sessionLocaleResolver = new SessionLocaleResolver(); 23 sessionLocaleResolver.setDefaultLocale(Locale.CHINA); 24 return sessionLocaleResolver; 25 } 26 27 @Bean 28 public LocaleChangeInterceptor localeChangeInterceptor() { 29 LocaleChangeInterceptor localeChangeInterceptor = new LocaleChangeInterceptor(); 30 localeChangeInterceptor.setParamName(\u0026#34;lang\u0026#34;); 31 return localeChangeInterceptor; 32 } 33} Python 1#!/usr/bin/python 2# -*- coding: UTF-8 -*- 3import unittest 4 5file = open(\u0026#34;test.txt\u0026#34;, \u0026#34;r+\u0026#34;) 6article = file.read() 7 8@profile 9def count_char_1(): 10 num = 0 11 for line in article: 12 for word in line.split(): 13 num = num + len(word) 14 return num 15 16 17@profile 18def count_char_2(): 19 return sum([len(word) for line in article for word in line.split()]) 20 21 22@profile 23def count_char_3(): 24 return sum(len(word) for line in article for word in line.split()) 25 26 27if __name__ == \u0026#39;__main__\u0026#39;: 28 count_char_1() 29 count_char_2() 30 count_char_3() 评论","permalink":"https://blog.lordash.de/f/test/","summary":"","title":"Test"},{"content":"1 Vercel配置 进入Vercel官网，点击右上角Sign Up注册，选择Continue with GitHub使用GitHub账号注册。\n注册完成后，会进入新建项目页面。如果没有，点击页面左上角进入控制面板，点击Overview进入概览，点击New Project。\n在Import Git Repository下面的选择框中选择Add GitHub Account，在弹出来的页面中选择之前配置GitHub Pages用的仓库，然后点击Import。\n导入完会自动进入部署页面，可以修改一下项目名，因为仓库中已经是Hexo生成的页面文件了，预设框架选择默认的Other即可。直接点击Deploy开始部署。\n部署完成，Vercel会提供几个.vercel.app的默认域名进行访问。\n2 使用自定义域名 因为我目前使用Cloudflare管理域名（参考【配置】Win10将域名NameServer从NameSilo替换到Cloudflare），所以接下来将以Cloudflare作为例子。\n在Vercel中进入项目的Setting设置页，选择Domains域名管理，可以看到当前配置的自定义域名。其中包含了Vercel默认生成的二级域名，点击Edit可修改为其它无人占用的.vercel.app域名，详细信息可以查看Vercel官方文档。\n想要使用其它自定义域名，在输入框中输入，点击Add添加。\n添加完后，需要验证配置，这里选择CNAME方式。\n登录Cloudflare，在域名的DNS配置中，选择添加记录，填写之前Vercel要求的解析内容。按需选择是否开启Cloudflare CDN。\n关闭Cloudflare CDN Cloudflare提供的代理服务在大陆访问速度过慢，我们可以选择关闭Cloudflare的反向加速服务。在Cloudflare的DNS记录配置中，点击编辑，取消代理状态。\n开启Cloudflare CDN 回到Vercel页面，如果之前配置了Cloudflare代理，会发现还是有问题，点击Learn More查看Vercel官方文档给的提示。\nVercel构建项目时，使用Let\u0026rsquo;s Encrypt颁发SSL证书，会向域名/.well-known/acme-challenge发出HTTP请求，如果此HTTP请求被Cloudflare重定向到HTTPS，则无法生成证书。\n打开CMD，输入以上curl命令测试，注意是HTTP请求。如果返回的是404说明成功，如果是3XX重定向，那么Cloudflare会阻止访问此路由，且Vercel会将域名标记为未配置。\n1curl http://your.domain.com/.well-known/acme-challenge -I 一般都是3XX重定向，需要添加例外配置。打开Cloudflare，在规则 - 页面规则中，点击创建页面规则，\n在URL输入框中输入*your.domain/.well-known/*，在选取设置的下拉列表中选择SSL，然后在选择SSL设置下拉列表中选择关，点击保存和部署页面规则。\n如果依旧是配置失败，请检查Cloudflare的配置，在SSL/TLS - 边缘证书中，是否开启了始终使用HTTPS，如果有，请关闭。\n生成证书后，配置成功\n3 其它问题 ERR_TOO_MANY_REDIRECTS 打开页面时，提示ERR_TOO_MANY_REDIRECTS重定向次数过多，请尝试清除Cookie。但是清除Cookie无用，重新打开依旧是这个提示。\n在Cloudflare的SSL/TLS - 概述中，将模式改为完全（严格）模式。\n","permalink":"https://blog.lordash.de/posts/configure/abf4cb68b4c20c52/","summary":"1 Vercel配置 进入Vercel官网，点击右上角Sign Up注册，选择Continue with GitHub使用GitHub账号注册。 注册完成后，","title":"Win10使用Vercel托管Hexo博客"},{"content":"1 配置 首先，需要在NameSilo上注册登录，购买心仪的域名，然后注册并登录Cloudflare，\n点击左侧网站，进入网站管理页面，点击添加站点，\n在输入您的站点输入框内填写NameSilo上的域名，点击添加站点，\n选择您的计划，一般用户选最下面的Free免费版就行了。选中免费那一栏，然后点击继续按钮。\n查看DNS记录，我这个域名当前是没有DNS记录的。有需要添加记录的，可以在这添加，也可以先跳过，点击继续按钮。\n更换名称服务器，这边需要复制下Cloudflare给出的NS记录\n我们打开NameSilo，点击上面的Manage My Domains，进入域名管理页面，选中需要更换的域名，点击Change Nameservers按钮，\n然后把NS替换为Cloudflare给出的NS，保存。这时候可以看到域名的Status显示Processing NameServer Update，稍等几分钟，就会变成Active。\n回到Cloudflare，点击完成，检查名称服务器，然后可以配置或者跳过快速入门指南。点击左侧概述，点击检查名称服务器，再次检测。\n在确认更换成功后，会出现以下提示\n","permalink":"https://blog.lordash.de/posts/configure/7f8636440ab49b65/","summary":"1 配置 首先，需要在NameSilo上注册登录，购买心仪的域名，然后注册并登录Cloudflare， 点击左侧网站，进入网站管理页面，点击添加站","title":"Win10将域名NameServer从NameSilo替换到Cloudflare"},{"content":"1 安装NexT v8.0 打开命令行，进入博客根目录，使用git下载NexT主题\n1# 下载NexT主题 2git clone https://github.com/next-theme/hexo-theme-next themes/next 然后修改博客根目录下的_config.yml配置文件，将主题设置为NexT\n1theme: next 然后重新生成一下博客，打开本地服务\n1# 清除缓存 2hexo clean 3# 生成静态文件 4hexo generate 5# 启动服务（开启调试） 6hexo server --debug 访问http://localhost:4000/，查看效果\n2 配置修改 2.1 博客配置 以下配置，需添加至博客根目录下_config.yml中\n博客信息 1title: 标题 2subtitle: \u0026#39;子标题\u0026#39; 3description: \u0026#39;描述\u0026#39; 4keywords: 关键词 5author: 作者 开启中文 1language: zh-CN 修改文章永久链接 文章标题大多使用中文，但是URL并不推荐包含中文，也不利于SEO\n1url: https://gh1656409967.github.io/ 2permalink: posts/:hash/ 自动检测高亮 1highlight: 2 auto_detect: true 3 tab_replace: \u0026#39; \u0026#39; 显示文章数 1index_generator: 2 per_page: 30 每页页码 1per_page: 30 默认分类 1default_category: 测试 2.2 主题配置 以下配置，需添加至博客根目录下_config.next.yml中\n切换布局方案 NexT提供Muse、Mist、Pisces和Gemini四种布局方案。\n1scheme: Pisces 添加子标题 1index_with_subtitle: true 关闭页面底部博客信息 1footer: 2 powered: false 添加自定义menu菜单 格式为Key: /link || icon，icon即为Font Awesome提供的图标。 修改主题目录下languages/zh-CN.yml，在menu下添加对应菜单的中文，例如gallery: 相册，注意统一缩进。 在博客根目录，运行 hexo new page \u0026quot;菜单\u0026quot;，编辑新建的 source/菜单/index.md 即可。 1menu: 2 about: /about/ || fa fa-user 3 gallery: /gallery/ || fa fa-camera 添加社交链接 1social: 2 GitHub: https://github.com/GH1656409967 || fa-brands fa-github 3 QQ: http://wpa.qq.com/msgrd?v=3\u0026amp;uin=1656409967\u0026amp;site=qq\u0026amp;menu=yes || fa-brands fa-qq 4 网易云: https://music.163.com/#/user/home?id=270121274 || fa fa-music 5 豆瓣: https://www.douban.com/people/215985894/ || fa fa-video-camera 添加友链 1links_settings: 2 icon: fa fa-link 3 title: 友情链接 4 layout: inline 5 6links: 7 【jaihk662】: https://blog.csdn.net/jaihk662 8 【信仰.】: https://blog.csdn.net/haut_ykc 9 【SSimpLe_Y】: https://blog.csdn.net/ssimple_y 10 【柳婼のblog】: https://www.liuchuo.net/ 11 【liweihang】: https://www.cnblogs.com/liweihang/ 12 【ironz】: https://ironz.cn/ 13 【Sysipus】: https://runzhaochen.github.io/ 14 【Long_hen】: https://blog.csdn.net/Long_hen 15 【haut_bao】: https://blog.csdn.net/qq_41856950 16 【阿清そ 】: https://aqingya.cn/ 目录设置 开启目录，关闭目录自动编号，开启目录自动换行，开启全部展开\n1toc: 2 enable: true 3 number: false 4 wrap: true 5 expand_all: true 开启文章结尾版权声明 1creative_commons: 2 post: true 文章结尾打赏 添加文章结尾打赏图片，图片放至主题目录的source/images/下\n1reward_settings: 2 enable: true 3 animation: false 4 5reward: 6 wechatpay: /images/wechatpay.png 7 alipay: /images/thanks.png 8 bitcoin: /images/alipay.png 修改themes/next/languages/zh-CN.yml，文字与图片对应\n1reward: 2 wechatpay: 微信 3 alipay: 感谢 4 bitcoin: 支付宝 网站头像 图片放至主题目录的source/images/下\n1avatar: 2 url: /images/avatar.png 网站图标 图片放至主题目录的source/images/下\n1favicon: 2 small: /images/favicon-16x16-.png 3 medium: /images/favicon-32x32-.png 设置字体 设置字体为Fira Code和思源黑体\n1font: 2 enable: true 3 4 # Uri of fonts host, e.g. https://fonts.googleapis.com (Default). 5 host: 6 7 # Font options: 8 # `external: true` will load this font family from `host` above. 9 # `family: Times New Roman`. Without any quotes. 10 # `size: x.x`. Use `em` as unit. Default: 1 (16px) 11 12 # Global font settings used for all elements inside \u0026lt;body\u0026gt;. 13 global: 14 external: true 15 family: \u0026#39;Fira Code,Noto Sans SC\u0026#39; 16 size: 17 18 # Font settings for site title (.site-title). 19 title: 20 external: true 21 family: \u0026#39;Fira Code,Noto Sans SC\u0026#39; 22 size: 23 24 # Font settings for headlines (\u0026lt;h1\u0026gt; to \u0026lt;h6\u0026gt;). 25 headings: 26 external: true 27 family: \u0026#39;Fira Code,Noto Sans SC\u0026#39; 28 size: 29 30 # Font settings for posts (.post-body). 31 posts: 32 external: true 33 family: \u0026#39;Fira Code,Noto Sans SC\u0026#39; 34 35 # Font settings for \u0026lt;code\u0026gt; and code blocks. 36 codes: 37 external: true 38 family: \u0026#39;Fira Code,Noto Sans SC\u0026#39; 设置代码高亮 1codeblock: 2 theme: 3 light: atom-one-light 代码一键复制 1codeblock: 2 copy_button: 3 enable: true 4 show_result: true 切换CDN jsdelivr容易寄，可以换cdnjs或者unpkg\n1vendors: 2 plugins: unpkg 3 功能添加 3.1 图片不显示 此处仅处理本地图片引用，不考虑使用图床的情况\n从之前生成的静态文件中，可以看到图片未上传至public目录，且图片路径是markdown源文件中的绝对路径，而不是相对路径。\n首先修改博客根目录_config.yml配置文件，开启上传资源文件夹\n1post_asset_folder: true 然后需要安装一个图片路径转换插件，打开命令行，进入博客根目录，执行以下命令\n1npm i hexo-asset-image --save 修改此插件源码/node_modules/hexo-asset-image/index.js，修改内容参看注释\n1 ... 2 3 if(config.post_asset_folder){ 4 var link = data.permalink; 5 var beginPos = getPosition(link, \u0026#39;/\u0026#39;, 3) + 1; 6 /* 注释以下内容 7 var appendLink = \u0026#39;\u0026#39;; 8 // In hexo 3.1.1, the permalink of \u0026#34;about\u0026#34; page is like \u0026#34;.../about/index.html\u0026#34;. 9 // if not with index.html endpos = link.lastIndexOf(\u0026#39;.\u0026#39;) + 1 support hexo-abbrlink 10 if(/.*\\/index\\.html$/.test(link)) { 11 // when permalink is end with index.html, for example 2019/02/20/xxtitle/index.html 12 // image in xxtitle/ will go to xxtitle/index/ 13 appendLink = \u0026#39;index/\u0026#39;; 14 var endPos = link.lastIndexOf(\u0026#39;/\u0026#39;); 15 } 16 else { 17 var endPos = link.lastIndexOf(\u0026#39;.\u0026#39;); 18 } 19 link = link.substring(beginPos, endPos) + \u0026#39;/\u0026#39; + appendLink; 20 */ 21 /* 修改为下面两行 */ 22 var endPos = link.lastIndexOf(\u0026#39;/\u0026#39;) + 1; 23 link = link.substring(beginPos, endPos); 24 25 var toprocess = [\u0026#39;excerpt\u0026#39;, \u0026#39;more\u0026#39;, \u0026#39;content\u0026#39;]; 26 27 ... 28 29 // 将所有\u0026#39;src\u0026#39;替换为\u0026#39;data-src\u0026#39; 30 $(\u0026#39;img\u0026#39;).each(function(){ 31 if ($(this).attr(\u0026#39;data-src\u0026#39;)){ 32 // For windows style path, we replace \u0026#39;\\\u0026#39; to \u0026#39;/\u0026#39;. 33 var src = $(this).attr(\u0026#39;data-src\u0026#39;).replace(\u0026#39;\\\\\u0026#39;, \u0026#39;/\u0026#39;); 34 if(!(/http[s]*.*|\\/\\/.*/.test(src) 35 || /^\\s+\\//.test(src) 36 || /^\\s*\\/uploads|images\\//.test(src))) { 37 ... 38 39 $(this).attr(\u0026#39;data-src\u0026#39;, config.root + link + src); 40 console.info\u0026amp;\u0026amp;console.info(\u0026#34;update link as:--\u0026gt;\u0026#34;+config.root + link + src); 41 } 42 ... 清除缓存，重新生成博客，打开本地服务，查看效果\n3.2 MathJax 使用MathJax，开启LaTeX数学公式支持。首先更换解析器，打开命令行，进入博客根目录，执行以下命令\n1# 卸载hexo-renderer-marked 2npm uninstall hexo-renderer-marked --save 3# 安装hexo-renderer-pandoc 4npm install hexo-renderer-pandoc --save 然后安装Pandoc，并且配置好环境变量。在博客根目录_config.next.yaml中添加\n1math: 2 mathjax: 3 enable: true 使用时需要在文章的front-matter里打开mathjax: true，简单测试\n1$$ x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a} $$ $$ x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a} $$\n1$$ f(a) = \\frac{1}{2\\pi i} \\oint\\frac{f(z)}{z-a}dz $$ $$ f(a) = \\frac{1}{2\\pi i} \\oint\\frac{f(z)}{z-a}dz $$\n1$$ \\cos(\\theta+\\phi)=\\cos(\\theta)\\cos(\\phi)−\\sin(\\theta)\\sin(\\phi) $$ $$ \\cos(\\theta+\\phi)=\\cos(\\theta)\\cos(\\phi)−\\sin(\\theta)\\sin(\\phi) $$\n1$$ \\int_D ({\\nabla\\cdot} F)dV=\\int_{\\partial D} F\\cdot ndS $$ $$ \\int_D ({\\nabla\\cdot} F)dV=\\int_{\\partial D} F\\cdot ndS $$\n1$$ 2\\vec{\\nabla} \\times \\vec{F} = 3 \\left( \\frac{\\partial F_z}{\\partial y} - \\frac{\\partial F_y}{\\partial z} \\right) \\mathbf{i} 4 + \\left( \\frac{\\partial F_x}{\\partial z} - \\frac{\\partial F_z}{\\partial x} \\right) \\mathbf{j} 5 + \\left( \\frac{\\partial F_y}{\\partial x} - \\frac{\\partial F_x}{\\partial y} \\right) \\mathbf{k} 6$$ $$ \\vec{\\nabla} \\times \\vec{F} = \\left( \\frac{\\partial F_z}{\\partial y} - \\frac{\\partial F_y}{\\partial z} \\right) \\mathbf{i} + \\left( \\frac{\\partial F_x}{\\partial z} - \\frac{\\partial F_z}{\\partial x} \\right) \\mathbf{j} + \\left( \\frac{\\partial F_y}{\\partial x} - \\frac{\\partial F_x}{\\partial y} \\right) \\mathbf{k} $$\n1$$ \\sigma = \\sqrt{ \\frac{1}{N} \\sum_{i=1}^N (x_i -\\mu)^2} $$ $$ \\sigma = \\sqrt{ \\frac{1}{N} \\sum_{i=1}^N (x_i -\\mu)^2} $$\n1$$ 2(\\nabla_X Y)^k = X^i (\\nabla_i Y)^k 3 = X^i \\left( \\frac{\\partial Y^k}{\\partial x^i} + \\Gamma_{im}^k Y^m \\right) 4$$ $$ (\\nabla_X Y)^k = X^i (\\nabla_i Y)^k = X^i \\left( \\frac{\\partial Y^k}{\\partial x^i} + \\Gamma_{im}^k Y^m \\right) $$\n3.3 搜索功能 安装搜索插件\n1npm i hexo-generator-searchdb --save 打开 _config.next.yml ，添加\n1local_search: 2 enable: true 打开hexo的站点配置 _config.yml，添加\n1search: 2 path: search.json 3 field: post 4 format: html 5 limit: 10000 3.4 统计功能 显示文章字数统计、阅读时长及总字数。首先安装插件\n1npm i hexo-word-counter --save 修改博客根目录_config.yml配置\n1symbols_count_time: 2 symbols: true 3 time: true 4 total_symbols: true 5 total_time: true 6 exclude_codeblock: true 7 awl: 2 8 wpm: 300 9 suffix: \u0026#34;分钟\u0026#34; 修改博客根目录_config.next.yml主题配置\n1symbols_count_time: 2 separated_meta: false 3 item_text_total: true 3.5 简易相册 得益于Markdown和HTML混编可以被部分解析器解析的优势，可以使用HTML+CSS，添加一个简易相册。\n注意：之前由于为了使用MathJax而更换解析器为Pandoc，对于需要解析raw-html的文章，所有标签前不应有空格，且块级标签前后需要留出空行\n首先hexo n page gallery，创建图库。修改图库页面gallery/index.md，按照以下格式添加相册，相册封面图片放至gallery/index/目录下。\n1\u0026lt;div class=\u0026#34;gallery-list\u0026#34;\u0026gt; 2\u0026lt;div class=\u0026#34;gallery-item\u0026#34;\u0026gt; 3\u0026lt;a href=\u0026#34;相册1/\u0026#34;\u0026gt;\u0026lt;img data-src=\u0026#34;gallery/index/相册1封面.jpg\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; 4\u0026lt;p\u0026gt;-相册1-\u0026lt;/p\u0026gt; 5\u0026lt;/div\u0026gt; 6 7\u0026lt;div class=\u0026#34;gallery-item\u0026#34;\u0026gt; 8\u0026lt;a href=\u0026#34;相册2/\u0026#34;\u0026gt;\u0026lt;img data-src=\u0026#34;gallery/index/相册2封面.jpg\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; 9\u0026lt;p\u0026gt;-相册2-\u0026lt;/p\u0026gt; 10\u0026lt;/div\u0026gt; 11\u0026lt;/div\u0026gt; 新建相册页面gallery/相册名/index.md，按照以下格式添加图片，图片放至gallery/相册名/index/目录下，其它相册同理。\n1 2\u0026lt;div class=\u0026#34;img-list\u0026#34;\u0026gt; 3\u0026lt;div class=\u0026#34;img-item\u0026#34;\u0026gt;\u0026lt;img data-src=\u0026#34;相册1/index/图片1.png\u0026#34; alt=\u0026#34;图片1标题\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 4\u0026lt;div class=\u0026#34;img-item\u0026#34;\u0026gt;\u0026lt;img data-src=\u0026#34;相册1/index/图片2.jpg\u0026#34; alt=\u0026#34;图片2标题\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 5\u0026lt;div class=\u0026#34;img-item\u0026#34;\u0026gt;\u0026lt;img data-src=\u0026#34;相册1/index/图片3.png\u0026#34; alt=\u0026#34;图片3标题\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 6\u0026lt;div class=\u0026#34;img-item\u0026#34;\u0026gt;\u0026lt;img data-src=\u0026#34;相册1/index/图片4.png\u0026#34; alt=\u0026#34;图片4标题\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 7\u0026lt;div class=\u0026#34;img-item\u0026#34;\u0026gt;\u0026lt;img data-src=\u0026#34;相册1/index/图片5.jpg\u0026#34; alt=\u0026#34;图片5标题\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 8\u0026lt;div class=\u0026#34;img-item\u0026#34;\u0026gt;\u0026lt;img data-src=\u0026#34;相册1/index/图片6.png\u0026#34; alt=\u0026#34;图片6标题\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 9\u0026lt;/div\u0026gt; 在博客根目录下 _config.next.yml 中添加\n1menu: 2 gallery: /gallery/ || fa fa-camera 在主题目录下，修改国际化文件languages\\zh-CN.yml，添加\n1menu: 2 gallery: 相册 在博客根目录下，新建source/_data/styles.styl，添加自定义样式\n1// 自定义相册 2.img-list, .gallery-list { 3 gap: 1rem; 4 grid-gap: 1rem; 5 display: grid; 6 grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 7 padding: 1rem; 8 align-items: center; 9 align-content: center; 10 justify-items: center; 11 justify-content: center; 12} 13 14.img-item img, .gallery-item img { 15 width: 250px; 16 height: 200px; 17 object-fit: cover; 18 border: 1px solid rgba(221, 221, 221, 0.5); 19 border-radius: 7px; 20 margin-top: 10px; 21 margin-left: 5px; 22 margin-right: 5px; 23} 24 25.gallery-item p { 26 margin: 0 auto; 27 max-width: 50%; 28 border: 1px solid $black-deep; 29 border-radius: 7px; 30 background: rgba(255, 255, 255, 0.3); 31 box-shadow: 0 8px 20px -8px rgba(0, 0, 0, 0.3); 32 color: $black-deep; 33 text-align: center; 34 font-size: 15px; 35} 36 37@media (max-width: 767px) { 38 .gallery-item p { 39 min-width: 75px; 40 font-size: 13px; 41 } 42} 修改博客根目录下_config.next.yml，引用自定义样式\n1custom_file_path: 2 style: source/_data/styles.styl 3.6 添加分类和标签 打开命令行，进入博客根目录，执行以下命令\n1# 新建分类 2hexo n page categories 3# 新建标签 4hexo n page tags 修改source/categories/index.md，在front-matter中添加\n1--- 2title: 分类 3date: 2022-04-22 16:47:13 4type: \u0026#34;categories\u0026#34; 5--- 修改source/tags/index.md，在front-matter中添加\n1--- 2title: 标签 3date: 2022-04-22 16:47:30 4type: \u0026#34;tags\u0026#34; 5--- 3.7 代码折叠 强推hexo博客代码折叠功能\n在主题目录下，添加source/js/code-unfold.js，\n1var CODE_MAX_HEIGHT = 250; 2var containers = []; 3 4// 展开 5$(\u0026#39;body\u0026#39;).on(\u0026#39;click\u0026#39;, \u0026#39;.js_unfold_code_btn\u0026#39;, function () { 6 $(this).closest(\u0026#39;.js_highlight_container\u0026#39;).addClass(\u0026#39;on\u0026#39;); 7}); 8// 收起 9$(\u0026#39;body\u0026#39;).on(\u0026#39;click\u0026#39;, \u0026#39;.js_retract_code_btn\u0026#39;, function () { 10 var $container = $(this).closest(\u0026#39;.js_highlight_container\u0026#39;).removeClass(\u0026#39;on\u0026#39;); 11 var winTop = $(window).scrollTop(); 12 var offsetTop = $container.offset().top; 13 $(this).css(\u0026#39;top\u0026#39;, 0); 14 if (winTop \u0026gt; offsetTop) { 15 // 设置滚动条位置 16 $(\u0026#39;body, html\u0026#39;).animate({ 17 scrollTop: $container.offset().top - CODE_MAX_HEIGHT 18 }, 600); 19 } 20}); 21// 滚动事件，触发动画效果 22$(window).on(\u0026#39;scroll\u0026#39;, function () { 23 var scrollTop = $(window).scrollTop(); 24 var temp = []; 25 for (let i = 0; i \u0026lt; containers.length; i++) { 26 var item = containers[i]; 27 var { 28 $container, 29 height, 30 $hide, 31 hasHorizontalScrollbar 32 } = item; 33 if ($container.closest(\u0026#39;body\u0026#39;).length === 0) { 34 // 如果 $container 元素已经不在页面上, 则删除该元素 35 // 防止pjax页面跳转之后，元素未删除 36 continue; 37 } 38 temp.push(item); 39 if (!$container.hasClass(\u0026#39;on\u0026#39;)) { 40 continue; 41 } 42 var offsetTop = $container.offset().top; 43 var hideBtnHeight = $hide.outerHeight(); 44 // 减去按钮高度，减去底部滚动条高度 45 var maxTop = parseInt(height - (hasHorizontalScrollbar ? 17 : 0) - hideBtnHeight); 46 let top = parseInt( 47 Math.min( 48 Math.max(scrollTop - offsetTop, 0), // 如果小于 0 ，则取 0 49 maxTop, // 如果大于 height ，则取 height 50 ) 51 ); 52 // 根据 sin 曲线设置\u0026#34;收起代码\u0026#34;位置 53 var halfHeight = parseInt($(window).height() / 2 * Math.sin((top / maxTop) * 90 * (2 * Math.PI / 360))); 54 $hide.css(\u0026#39;top\u0026#39;, Math.min(top + halfHeight, maxTop)); 55 } 56 containers = temp; 57}); 58 59// 添加隐藏容器 60function addCodeWrap($node) { 61 var $container = $node.wrap(\u0026#39;\u0026lt;div class=\u0026#34;js_highlight_container highlight-container\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;highlight-wrap\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/div\u0026gt;\u0026#39;).closest(\u0026#39;.js_highlight_container\u0026#39;); 62 63 // 底部 \u0026#34;展开代码\u0026#34; 与 侧边栏 \u0026#34;收起代码\u0026#34; 64 var $btn = $(` 65 \u0026lt;div class=\u0026#34;highlight-footer\u0026#34;\u0026gt; 66 \u0026lt;a class=\u0026#34;js_unfold_code_btn show-btn\u0026#34; href=\u0026#34;javascript:;\u0026#34;\u0026gt;展开代码\u0026lt;i class=\u0026#34;fa fa-angle-down\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;\u0026lt;/a\u0026gt; 67 \u0026lt;/div\u0026gt; 68 \u0026lt;a class=\u0026#34;js_retract_code_btn hide-btn\u0026#34; href=\u0026#34;javascript:;\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;fa fa-angle-up\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;收起代码\u0026lt;/a\u0026gt; 69 `); 70 71 $container.append($btn); 72 return $container; 73}; 74 75function codeUnfold() { 76 $(\u0026#39;.highlight\u0026#39;).each(function () { 77 // 防止重复渲染 78 if (this.__render__ === true) { 79 return true; 80 } 81 this.__render__ = true; 82 var $this = $(this); 83 var height = $(this).outerHeight(); 84 if (height \u0026gt; CODE_MAX_HEIGHT) { 85 // 添加展开\u0026amp;收起容器 86 var $container = addCodeWrap($this, height); 87 containers.push({ 88 $container, 89 height, 90 $hide: $container.find(\u0026#39;.js_retract_code_btn\u0026#39;), 91 hasHorizontalScrollbar: this.scrollWidth \u0026gt; this.offsetWidth, 92 }); 93 } 94 }); 95}; 在NexT主题中全局引用jQuery，或者在_config.next.yml中开启Fancybox，Fancybox会依赖jQuery，\n1fancybox: true 引用code-unfold.js，在主题目录下，layout/_scripts/index.njk的最后添加\n1{{- next_js(\u0026#39;code-unfold.js\u0026#39;) }} 修改主题目录下source/js/next-boot.js\n1NexT.boot.refresh = function() { 2 // 添加一行代码 3 codeUnfold(); 4 // ... 打开之前创建的source/_data/styles.styl，添加\n1// 展开收起效果 2.highlight-container { 3 position: relative; 4 background-color: highlight-background; 5 6 \u0026amp;.on { 7 .highlight-footer { 8 display: none; 9 } 10 11 .hide-btn { 12 display: flex; 13 } 14 15 .highlight-wrap { 16 max-height: none; 17 } 18 } 19 20 .highlight-wrap { 21 overflow: hidden; 22 max-height: 200px; 23 } 24 25 .highlight-footer { 26 position: absolute; 27 bottom: 0; 28 left: 0; 29 width: 100%; 30 height: 60px; 31 background-image: \u0026#39;linear-gradient(-180deg, rgba(255,255,255,0) 0%, %s 65%)\u0026#39; % highlight-background; 32 text-align: center; 33 } 34 35 .show-btn { 36 position: absolute; 37 bottom: 0; 38 left: 50%; 39 padding: 0 0.8em; 40 border-radius: 4px 4px 0; 41 color: #fff; 42 text-align: center; 43 text-decoration: none; 44 font-size: 12px; 45 line-height: 2em; 46 transform: translateX(-50%); 47 48 \u0026amp;:hover { 49 text-decoration: none; 50 } 51 } 52 53 .hide-btn { 54 position: absolute; 55 top: 0; 56 left: -21px; 57 display: none; 58 flex-direction: column; 59 padding: 0.1em 0 0.6em; 60 width: 22px; 61 border-radius: 4px 0 0 4px; 62 background-color: highlight-background; 63 color: #fff; 64 text-align: center; 65 text-decoration: none; 66 font-size: 12px; 67 line-height: 1em; 68 transition: top ease 0.35s; 69 } 70 71 .fa-angle-up, .fa-angle-down { 72 color: #fff; 73 font-style: normal; 74 } 75 76 .fa-angle-up:before { 77 content: \u0026#39;\\f106\u0026#39;; 78 } 79 80 .fa-angle-down:before { 81 margin-left: 0.5em; 82 content: \u0026#39;\\f107\u0026#39;; 83 } 84 85 .js_unfold_code_btn, .js_retract_code_btn { 86 border-bottom: none !important; 87 background: rgba(0, 0, 0, 0.5); 88 89 \u0026amp;:hover { 90 border-bottom-color: none !important; 91 } 92 } 93} 3.8 折叠内容 推荐Hexo 静态博客添加可折叠内容\n在主题目录下创建scripts/tags/fold_tag.js\n1/* global hexo */ 2// Usage: {% fold Title %} Something {% endfold %} 3function fold(args, content) { 4 var text = args[0]; 5 if (!text) text = \u0026#34;点击显示/隐藏\u0026#34;; 6 return \u0026#39;\u0026lt;div\u0026gt;\u0026lt;div class=\u0026#34;fold_hider\u0026#34;\u0026gt;\u0026lt;div class=\u0026#34;close hider_title\u0026#34;\u0026gt;\u0026#39; + 7 hexo.render.renderSync({ 8 text: text, 9 engine: \u0026#39;markdown\u0026#39; 10 }).replace(/^\u0026lt;p\u0026gt;/, \u0026#39;\u0026#39;).replace(/\u0026lt;\\/p\u0026gt;$/, \u0026#39;\u0026#39;) + 11 \u0026#39;\u0026lt;/div\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;div class=\u0026#34;fold\u0026#34;\u0026gt;\\n\u0026#39; + 12 hexo.render.renderSync({ 13 text: content, 14 engine: \u0026#39;markdown\u0026#39; 15 }) + 16 \u0026#39;\\n\u0026lt;/div\u0026gt;\u0026lt;/div\u0026gt;\u0026#39;; 17} 18hexo.extend.tag.register(\u0026#39;fold\u0026#39;, fold, { 19 ends: true 20}); 在主题目录下创建source/js/fold_action.js\n1$(document).ready(function () { 2 $(document).on(\u0026#39;click\u0026#39;, \u0026#39;.fold_hider\u0026#39;, function () { 3 $(\u0026#39;\u0026gt;.fold\u0026#39;, this.parentNode).slideToggle(); 4 $(\u0026#39;\u0026gt;:first\u0026#39;, this).toggleClass(\u0026#39;open\u0026#39;); 5 }); 6 //默认情况下折叠 7 $(\u0026#34;div.fold\u0026#34;).css(\u0026#34;display\u0026#34;, \u0026#34;none\u0026#34;); 8}); 打开之前创建的source/_data/styles.styl，添加\n1// toggle hider title 2.hider_title { 3 cursor: pointer; 4 background: #eeeeee; 5} 6 7// toggle indicators 8.close:before { 9 padding-left: 0.5em; 10 padding-right: 0.5em; 11 content: \u0026#39;▼\u0026#39;; 12} 13 14.open:before { 15 padding-left: 0.5em; 16 padding-right: 0.5em; 17 content: \u0026#39;▲\u0026#39;; 18} 19 20// inline code 21p code, .hider_title code { 22 color: #c71585; 23 background: #fffafa; 24 margin: 2px; 25} 在博客根目录_config.next.yml中添加\n1custom_file_path: 2 bodyEnd: source/_data/body-end.njk 在博客根目录下创建source/_data/body-end.njk\n1{# 代码折叠 #} 2\u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;/js/fold_action.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 使用fold标签，可以折叠内容\n1{% fold 折叠内容 %} 2 Hello World 3{% endfold %} {% fold 折叠内容 %} Hello World {% endfold %}\n注意：如果开启了pjax，则需要修改主题目录下source/js/next-boot.js\n1NexT.boot.refresh = function() { 2 // 添加一行代码 3 $(\u0026#34;div.fold\u0026#34;).css(\u0026#34;display\u0026#34;, \u0026#34;none\u0026#34;); 4 // ... 3.9 压缩 添加官方插件hexo-clean-css、hexo-html-minifier和hexo-uglify\n1npm i hexo-clean-css hexo-html-minifier hexo-uglify --save 在博客根目录_config.yml中添加\n1uglify: 2 mangle: true 3 # 这儿不能为空，为空会导致 js 文件压缩 4 # output: 5 # compress: 6 exclude: 7 - \u0026#39;*.min.js\u0026#39; 8 es6: false 9 10clean_css: 11 exclude: 12 - \u0026#39;*.min.css\u0026#39; 13 14html_minifier: 15 collapseBooleanAttributes: true 16 collapseWhitespace: true 17 # Ignore \u0026#39;\u0026lt;!-- more --\u0026gt;\u0026#39; https://hexo.io/docs/tag-plugins#Post-Excerpt 18 ignoreCustomComments: [ !!js/regexp /^\\s*more/] 19 removeComments: true 20 removeEmptyAttributes: true 21 removeScriptTypeAttributes: true 22 removeStyleLinkTypeAttributes: true 23 minifyJS: true 24 minifyCSS: true 3.10 评论系统 Gitalk是一个基于GitHub Issue和Preact开发的评论插件。\n首先需要去GitHub新建一个仓库，点击New创建\n然后创建GitHub Application\n然后点击Generate a new client secret，验证GitHub密码后，保存好Client ID和Client secrets\n在博客根目录下_config.next.yml中添加\n1comments: 2 style: buttons 3 active: gitalk 4 storage: true 5 lazyload: true 6 nav: 7 gitalk: 8 order: -2 9 10gitalk: 11 enable: true 12 github_id: gh1656409967 13 repo: Gitalk 14 client_id: adfg89av4s9bf4s89nsn 15 client_secret: 1561aefeaegadadag5e1a68bbfsnyfsrg4587sr7 16 admin_user: gh1656409967 17 distraction_free_mode: true 18 proxy: https://cors-anywhere.azm.workers.dev/https://github.com/login/oauth/access_token 19 language: zh-CN 然后每次新生成文章/页面后，都需要去文章页初始化Issues\n点击使用GitHub登录后，再点击Authorize username\n刷新后即可开启评论\n3.11 博文加密 首先打开命令行，进入博客根目录，执行以下命令，安装hexo-blog-encrypt插件\n1npm install hexo-blog-encrypt --save 在需要加密的文章开头front-matter中添加\n1password: 123456 2abstract: 博文被加密了, 请输入密码查看。 3message: 您好, 这里需要密码。 4wrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试。 注意，Fancybox可能会不加载，复制themes\\next\\source\\js\\third-party\\fancybox.js的内容，添加到node_modules\\hexo-blog-encrypt\\lib\\hbe.js中\n1 ... 2 3 // 添加内容 4 function refreshfancybox() { 5 document.querySelectorAll(\u0026#39;.post-body :not(a) \u0026gt; img, .post-body \u0026gt; img\u0026#39;).forEach(element =\u0026gt; { 6 const $image = $(element); 7 const imageLink = $image.attr(\u0026#39;data-src\u0026#39;) || $image.attr(\u0026#39;src\u0026#39;); 8 const $imageWrapLink = $image.wrap(`\u0026lt;a class=\u0026#34;fancybox fancybox.image\u0026#34; href=\u0026#34;${imageLink}\u0026#34; itemscope itemtype=\u0026#34;http://schema.org/ImageObject\u0026#34; itemprop=\u0026#34;url\u0026#34;\u0026gt;\u0026lt;/a\u0026gt;`).parent(\u0026#39;a\u0026#39;); 9 if ($image.is(\u0026#39;.post-gallery img\u0026#39;)) { 10 $imageWrapLink.attr(\u0026#39;data-fancybox\u0026#39;, \u0026#39;gallery\u0026#39;).attr(\u0026#39;rel\u0026#39;, \u0026#39;gallery\u0026#39;); 11 } else if ($image.is(\u0026#39;.group-picture img\u0026#39;)) { 12 $imageWrapLink.attr(\u0026#39;data-fancybox\u0026#39;, \u0026#39;group\u0026#39;).attr(\u0026#39;rel\u0026#39;, \u0026#39;group\u0026#39;); 13 } else { 14 $imageWrapLink.attr(\u0026#39;data-fancybox\u0026#39;, \u0026#39;default\u0026#39;).attr(\u0026#39;rel\u0026#39;, \u0026#39;default\u0026#39;); 15 } 16 17 const imageTitle = $image.attr(\u0026#39;title\u0026#39;) || $image.attr(\u0026#39;alt\u0026#39;); 18 if (imageTitle) { 19 // Do not append image-caption if pandoc has already created a figcaption 20 if (!$imageWrapLink.next(\u0026#39;figcaption\u0026#39;).length) { 21 $imageWrapLink.append(`\u0026lt;p class=\u0026#34;image-caption\u0026#34;\u0026gt;${imageTitle}\u0026lt;/p\u0026gt;`); 22 } 23 // Make sure img title tag will show correctly in fancybox 24 $imageWrapLink.attr(\u0026#39;title\u0026#39;, imageTitle).attr(\u0026#39;data-caption\u0026#39;, imageTitle); 25 } 26 }); 27 28 $.fancybox.defaults.hash = false; 29 $(\u0026#39;.fancybox\u0026#39;).fancybox({ 30 loop: true, 31 helpers: { 32 overlay: { 33 locked: false 34 } 35 } 36 }); 37 } 38 39 async function decrypt(decryptKey, iv, hmacKey) { 40 let typedArray = hexToArray(encryptedData); 41 42 const result = await cryptoObj.subtle.decrypt({ 43 \u0026#39;name\u0026#39;: \u0026#39;AES-CBC\u0026#39;, 44 \u0026#39;iv\u0026#39;: iv, 45 }, decryptKey, typedArray.buffer).then(async (result) =\u0026gt; { 46 47 ... 48 49 // 添加内容 50 refreshfancybox(); 51 52 return await verifyContent(hmacKey, decoded); 53 }).catch((e) =\u0026gt; { 54 alert(wrongPassMessage); 55 console.log(e); 56 return false; 57 }); 58 59 ... 3.11 aplayer音乐播放器 首先打开命令行，进入博客根目录，执行以下命令，安装aplayer插件\n1npm install aplayer --save 在source/_data/body-end.njk添加以下内容\n1\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/aplayer/1.10.1/APlayer.min.css\u0026#34; integrity=\u0026#34;sha512-CIYsJUa3pr1eoXlZFroEI0mq0UIMUqNouNinjpCkSWo3Bx5NRlQ0OuC6DtEB/bDqUWnzXc1gs2X/g52l36N5iw==\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; referrerpolicy=\u0026#34;no-referrer\u0026#34; /\u0026gt; 2\u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/aplayer/1.10.1/APlayer.min.js\u0026#34; integrity=\u0026#34;sha512-RWosNnDNw8FxHibJqdFRySIswOUgYhFxnmYO3fp+BgCU7gfo4z0oS7mYFBvaa8qu+axY39BmQOrhW3Tp70XbaQ==\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; referrerpolicy=\u0026#34;no-referrer\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 3\u0026lt;div id=\u0026#34;aplayer\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; 4 5\u0026lt;script\u0026gt; 6 const ap = new APlayer({ 7 container: document.getElementById(\u0026#39;aplayer\u0026#39;), 8 fixed: true, 9 listFolded: true, 10 lrcType: 3, 11 audio: [ 12 { 13 name: \u0026#39;AVICII UMF2016 Live\u0026#39;, 14 artist: \u0026#39;Avicii\u0026#39;, 15 url: \u0026#39;https://music.163.com/song/media/outer/url?id=440767926.mp3\u0026#39;, 16 cover: \u0026#39;http://p2.music.126.net/kmo__VMOex_fRScv2RXStA==/109951162842392590.jpg\u0026#39;, 17 lrc: \u0026#39;/lyric/AVICII UMF2016 Live.lrc\u0026#39; 18 }, 19 { 20 ... 21 }, 22 ] 23 }); 24\u0026lt;/script\u0026gt; 其中，APlayer.min.js和APlayer.min.css可以使用CDN，也可以在GitHub上下载。配置内容的具体含义参考APlayer官方文档。\nurl后面填写歌曲外链。打开网页版网易云音乐，选择非VIP歌曲，点开至歌词页面，将地址栏中的歌曲id，复制到https://music.163.com/song/media/outer/url?id=xxxx.mp3对应位置。\ncover后面填写封面图片链接。以edge为例，按F12进入控制台，使用选择元素，选中封面，在对应的img标签内复制data-src属性的值。\nlrc后面填写本地保存的歌词文件。以edge为例，按F12进入控制台，选择网络，搜索lyric，然后刷新歌词页面，找到对应的歌词文件，lrc对应外文歌词，tlyric对应翻译歌词，将lyric后面的值复制到的本地文件中，以.lrc格式保存，然后引用即可。我这里保存在主题目录下source/lyric/中。\n注意：链接跳转后播放会被打断，使用pjax可以解决这个问题。\n3.12 豆瓣插件 注意：此方法适合像我这样的懒人，由于hexo升级至6.1.0后，不再使用ejs等，建议能折腾的好好重写这个插件。\n首先打开命令行，进入博客根目录，执行以下命令，安装hexo-douban豆瓣插件\n1npm install hexo-douban --save 在博客根目录_config.yml中添加\n1douban: 2 user: lordash 3 builtin: false 4 book: 5 title: \u0026#39;This is my book title\u0026#39; 6 quote: \u0026#39;This is my book quote\u0026#39; 7 movie: 8 title: \u0026#39;This is my movie title\u0026#39; 9 quote: \u0026#39;This is my movie quote\u0026#39; 10 timeout: 10000 user豆瓣用户名，登录豆瓣，点击个人主页，地址栏URL中https://www.douban.com/people/xxxxxx/后的xxxxxx即是个人ID。title页面标题，builtin是否将生成页面功能嵌入hexo g中，默认为false，quote是页面开头的一段话，timeout是豆瓣接口超时时间，默认为10000毫秒，如果在使用时发现报了超时的错(ETIMEOUT)可以把这个数据设置的大一点。\n然后修改_config.next.yml，添加\n1menu: 2 books: /books/ || fa fa-book 3 movies: /movies/ || fa fa-film 修改themes\\next\\languages\\zh-CN.yml，添加\n1menu: 2 books: 书籍 3 movies: 影音 使用hexo douban生成豆瓣页面，命令行提示\n1INFO 0 books have been loaded in 858 ms, because you are offline or your network is bad 2INFO 0 movies have been loaded in 1751 ms, because you are offline or your network is bad 根据打印，在node_modules\\hexo-douban\\lib\\books-generator.js中添加打印\n1... 2var offline = false; 3# 添加hexo-log引用 4var log = require(\u0026#39;hexo-log\u0026#39;)({ 5 debug: false, 6 silent: false 7}); 8 9var log = require(\u0026#39;hexo-log\u0026#39;)({ 10 debug: false, 11 silent: false 12}); 13 14function resolv(url, timeout, headers) { 15 16 var response = \u0026#39;\u0026#39;; 17 try { 18 response = request(url, { 19 timeout: timeout, 20 dataType: \u0026#39;xml\u0026#39;, 21 headers: headers, 22 }); 23 } catch (err) { 24 # 打印详细错误日志 25 log.error(err); 26 offline = true; 27 } 28 ... 再次hexo douban生成，可以看到详细错误提示，\n1ERROR E:\\work\\blog\\node_modules\\urllib-sync\\request.js:44 2 var filepath = path.join(os.tmpDir(), name); 3 ^ 4 5TypeError: os.tmpDir is not a function 6 at E:\\work\\blog\\node_modules\\urllib-sync\\request.js:44:31 7 at done (E:\\work\\blog\\node_modules\\urllib\\lib\\urllib.js:396:5) 8 at E:\\work\\blog\\node_modules\\urllib\\lib\\urllib.js:628:9 9 at decodeContent (E:\\work\\blog\\node_modules\\urllib\\lib\\urllib.js:469:14) 10 at IncomingMessage.\u0026lt;anonymous\u0026gt; (E:\\work\\blog\\node_modules\\urllib\\lib\\urllib.js:593:7) 11 at IncomingMessage.emit (node:events:538:35) 12 at endReadableNT (node:internal/streams/readable:1345:12) 13 at processTicksAndRejections (node:internal/process/task_queues:83:21) 14 15Error: E:\\work\\blog\\node_modules\\urllib-sync\\request.js:44 16 var filepath = path.join(os.tmpDir(), name); 17 ^ 18 19TypeError: os.tmpDir is not a function 20 at E:\\work\\blog\\node_modules\\urllib-sync\\request.js:44:31 21 at done (E:\\work\\blog\\node_modules\\urllib\\lib\\urllib.js:396:5) 22 at E:\\work\\blog\\node_modules\\urllib\\lib\\urllib.js:628:9 23 at decodeContent (E:\\work\\blog\\node_modules\\urllib\\lib\\urllib.js:469:14) 24 at IncomingMessage.\u0026lt;anonymous\u0026gt; (E:\\work\\blog\\node_modules\\urllib\\lib\\urllib.js:593:7) 25 at IncomingMessage.emit (node:events:538:35) 26 at endReadableNT (node:internal/streams/readable:1345:12) 27 at processTicksAndRejections (node:internal/process/task_queues:83:21) 28 29 at request (E:\\work\\blog\\node_modules\\urllib-sync\\index.js:44:13) 30 at resolv (E:\\work\\blog\\node_modules\\hexo-douban\\lib\\books-generator.js:25:20) 31 at Hexo.module.exports (E:\\work\\blog\\node_modules\\hexo-douban\\lib\\books-generator.js:134:23) 32 at Hexo.tryCatcher (E:\\work\\blog\\node_modules\\bluebird\\js\\release\\util.js:16:23) 33 at Hexo.\u0026lt;anonymous\u0026gt; (E:\\work\\blog\\node_modules\\bluebird\\js\\release\\method.js:15:34) 34 at E:\\work\\blog\\node_modules\\hexo\\lib\\hexo\\index.js:407:22 35 at tryCatcher (E:\\work\\blog\\node_modules\\bluebird\\js\\release\\util.js:16:23) 36 at MappingPromiseArray._promiseFulfilled (E:\\work\\blog\\node_modules\\bluebird\\js\\release\\map.js:68:38) 37 at MappingPromiseArray.PromiseArray._iterate (E:\\work\\blog\\node_modules\\bluebird\\js\\release\\promise_array.js:115:31) 38 at MappingPromiseArray.init (E:\\work\\blog\\node_modules\\bluebird\\js\\release\\promise_array.js:79:10) 39 at MappingPromiseArray._asyncInit (E:\\work\\blog\\node_modules\\bluebird\\js\\release\\map.js:37:10) 40 at _drainQueueStep (E:\\work\\blog\\node_modules\\bluebird\\js\\release\\async.js:97:12) 41 at _drainQueue (E:\\work\\blog\\node_modules\\bluebird\\js\\release\\async.js:86:9) 42 at Async._drainQueues (E:\\work\\blog\\node_modules\\bluebird\\js\\release\\async.js:102:5) 43 at Immediate.Async.drainQueues [as _onImmediate] (E:\\work\\blog\\node_modules\\bluebird\\js\\release\\async.js:15:14) 44 at processImmediate (node:internal/timers:466:21) 看来是由于Node.js升级后，os.tmpDir()方法失效导致。我们使用os.tmpdir()替换node_modules\\urllib-sync\\request.js中的os.tmpDir()，再次使用hexo douban后，生成成功。\n使用pjax，还需要修改node_modules\\hexo-douban\\lib\\templates\\book.ejs，\n1/* 添加data-pjax属性 */ 2\u0026lt;script data-pjax\u0026gt; 3 \u0026lt;% include index.js %\u0026gt; 4 \u0026lt;% include pagination.js %\u0026gt; 5\u0026lt;/script\u0026gt; ","permalink":"https://blog.lordash.de/posts/configure/ad1c5aba78b0afc4/","summary":"1 安装NexT v8.0 打开命令行，进入博客根目录，使用git下载NexT主题 1# 下载NexT主题 2git clone https://github.com/next-theme/hexo-theme-next themes/next 然后修改博客根目录下的_config.yml","title":"Hexo以及NexT8主题的配置"},{"content":"1 博客 博客（blog或weblog）正式名称是网络日志。一个典型的博客结合了文字、图像、链接以及其它主题相关的媒体，同时能够让读者以互动的方式留下建议和意见。博客的内容包括专注在特定课题上的评论或新闻，以及个人性的日记等。\n博客主要就是为了学习和记录。写作是一种产出，能够输出表达、巩固所学，同时满足分享欲和表达欲。\n喜欢写Blog的人，会经历三个阶段。 第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。 第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。 第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。\n引自阮一峰\n1.1 免费博客网站 第一阶段是最常见的，也是入门需求最低的。选择一个可以免费发布博客的网站，注册登录后即可开始创作。早期的有天涯、新浪等，近期的有简书、知乎、豆瓣等、面向开发者的有博客园、CSDN、思否、掘金等。\n优点：\n免费 开箱即用（Out of the box） 不用考虑内容推广 缺点：\n依赖平台，审核机制、敏感词过滤、限制发布内容等 个性化界面定制差（博客园除外） 弹窗、广告 需要登录 1.2 服务器上搭建独立博客 第二阶段，在个人服务器上搭建网站。如果是建站小白，或者懒得折腾，可以使用开源的博客系统简化步骤。目前主流的有WordPress、Halo、Typecho等。\n以WordPress为例，这是当前应用最广泛的CMS（Content Management System，内容管理系统），它基于PHP和MySQL数据库，配置方便，作为开源项目，有着优质的社区和丰富的插件。\n优点：\n完全的可定制化 内容和规模不受限制 缺点：\n需要购买服务器和域名 需要考虑内容推广，网站备案、收录以及SEO优化等 需要建站相关知识 维护完全靠个人 1.3 免费静态网页托管服务 第三阶段，使用GitHub、Gitee、CODING等提供的Pages免费静态网页托管服务。\nGitHub Pages直接从GitHub上的代码仓库中获取HTML、CSS和JavaScript文件，可以选择通过构建过程运行这些文件，并发布网站。用户可以使用GitHub Pages来展示开源项目，搭建博客，或者分享简历等。\n你可以直接使用HTML+CSS+JS编写博客，但是这样做，排版费时费力，对前端技术也有一定要求。目前流行使用Markdown来写文档，例如GitHub项目中的README.md。\nMarkdown是一种轻量级标记语言，使用纯文本格式来编写文档，可与HTML混编，语法简洁，让创作者节约排版耗时，更多地关注内容本身。拓展的Markdown语法还支持代码高亮、MathJax数学公式等。\nMarkdown的使用，需要配合解析器。将Markdown转为HTML文件的最简单的方法，就是使用Markdeep，它是一个纯JS项目，只需在将编写好的Markdown文件的.md后缀改成.html，并且在文章里引用markdeep.min.js，就可以在浏览器中访问了。\n但博客不只有一篇文章，想要分类、标签、评论之类的功能，更普遍的，可以选择使用开源博客框架，例如Hexo，Ghost，Jekyll等。\n博客框架，也可以叫做静态网站生成器。框架处理博客文章，生成HTML、CSS、JS文件，配合Pages服务或者部署nginx服务器等，即可在浏览器中访问。静态网站没有服务端处理或者数据库交互，利于使用CDN（Content Delivery Network内容分发网络）进行扩展加速，缓存上比动态网页的效率高。\nJekyll Hexo Ghost 语言 Ruby JS Go 优势 1.强大的GitHub Pages支持\n2.主题为gems方便分发 1.相当快速\n2.在GitHub Pages部署简单\n3.中文支持、中文社区 1.速度非常快，对构建速度做了优化\n2.预置Go模版和模式\n3.无需依赖（不用安装Go，因为它是编译好的二进制）\n4.功能强大的内容模型 劣势 1.当网站内容不断增加后，\n构建速度会明显变慢。 1.没有英文 1.没有内置默认主题\n2.主题使用Go模版，所以需要熟悉Go\n3.缺少扩展性和插件（因为Go是编译型语言） 功能 1.Liquid模版引擎\n2.Sass预处理CSS\n1.EJS模版引擎\n2.对于HTML+CSS+JS非常友好 1.国际化\n2.支持动态API 优点：\n免费 可定制程度高 缺点：\n只支持静态网页 更新网页需要重新生成整个网站 需要考虑内容推广，网站备案、收录以及SEO优化等 2 配置 配置Hexo前需要自行安装的环境：\nNode.js Git 2.1 GitHub Pages配置 使用GitHub Pages服务搭建自己的静态博客前，首先需要GitHub账号，没有的话请先注册。登录之后，点击New，创建一个代码仓库（repository），除非是手头上正好有个闲置的域名，否则更推荐将仓库名设置为username.github.io，这样可以通过GitHub提供的https://username.github.io来访问。\n创建完成之后可以写一个HTML简单测试一下，点击Add file，选择Create new file，填写文件名和内容，然后点击Commit new file提交。\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;head\u0026gt; 4\u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 5\u0026lt;title\u0026gt;test\u0026lt;/title\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 Hello World. 9\u0026lt;/body\u0026gt; 10\u0026lt;/html\u0026gt; 提交后稍等几分钟，待GitHub缓存更新后，就可以在浏览器中访问了。\n2.2 Git和SSH配置 参考【配置】Win10配置Git和SSH\n2.3 Hexo配置 基本配置过程可以参考Hexo官方文档。\nnpm是Node.js的包管理工具，用来安装、管理和分享JavaScript包，同时会自动处理多个包之间的依赖。打开命令行，执行npm install -g npm更新npm。\n1# 查看npm版本 2npm -v 3# 更新npm 4npm install -g npm 5# 更新npm至指定版本 6npm install -g npm@8.7.0 安装Hexo\n1# 安装Hexo 2npm install -g hexo-cli cd到想要创建的博客目录，初始化Hexo\n1# 初始化Hexo 2hexo init 初始化之后，目录下会增加如下内容，详细解释可以参考Hexo文档。\n1. 2├─.github/ # GitHub配置 3├─node_modules/ # 包管理目录 4├─scaffolds/ # 模板目录 5├─source/ # 文章目录 6│ └─_posts/ 7│ hello-world.md 8└─themes/ # 主题目录 9 .gitignore # 忽略文件 10 _config.landscape.yml # 主题配置文件 11 _config.yml # 全局配置文件 12 package.json # 包配置文件 13 package-lock.json 将编写好的Markdown博客，放在source/_posts/目录下，Hexo默认有一篇欢迎博客hello-world.md，里面有简单介绍和快速入门。执行命令，测试Hexo本地配置。\n1# 生成博客 2hexo generate 3# 启动服务 4hexo server 打开链接http://localhost:4000/，查看博客。\n在博客目录下运行命令行，安装hexo-deployer-git插件。\n1# 安装hexo-deployer-git插件 2npm install hexo-deployer-git --save 看到提示有高危漏洞 ，我也不明白怎么处理 ，按照提示输入npm audit fix --force修复。\n回到GitHub博客项目，点击Code，选择SSH，点击链接右侧图标，将链接复制到剪贴板。\n打开博客根目录下的_config.yml，在deploy下填写配置，将链接粘贴到repository字段。\n1deploy: 2 type: git 3 repository: git@github.com:GH1656409967/GH1656409967.github.io.git 4 branch: main 注意，2020年10月1日起，在Github平台上所有新创建的源代码仓库的默认分支被命名为\u0026quot;main\u0026quot;，不再是原先的\u0026quot;master\u0026quot;。\n测试Hexo远程部署。如果之前SSH设置了密码，则需要输入密码，看到Deploy done，说明部署成功。\n1# 远程部署（上传到GitHub） 2hexo deploy 打开GitHub博客项目，可以看到代码文件已经更新了。再打开https://username.github.io/，博客内容也同步更新了，与本地http://localhost:4000/访问页面一样。\n3 总结 至此，一个基础的独立博客已经搭建完成了, 在Linux和Mac上的配置，也应该类似。Hexo有丰富的插件和社区资源，能提供更多个性化定制，想要添加更多的功能可以参考我的文章【配置】Hexo及NexT主题的配置。\n由于博客源文件是Markdown格式，后续的博客的迁移也不麻烦。在购买了云服务器后，也可以使用nginx等服务替换GitHub Pages服务。\n最后，请保证将Pages服务仅用于博客/门户/开源项目网站/开源项目静态效果演示用途，请勿用于违规内容，包括但不仅限于：\n发布诱导分享/诱导关注/诱导下载/诱导跳转内容 发布欺诈/谣言/骚扰信息/广告信息/垃圾信息/特殊识别码、口令类信息 发布低俗内容/“宗教性捐献”及相关信息 发布侵害他人权利/违法经营及可疑服务类内容 发布其它违反国家法律法规的内容 ","permalink":"https://blog.lordash.de/posts/configure/f6c59ae5f9b3dc94/","summary":"1 博客 博客（blog或weblog）正式名称是网络日志。一个典型的博客结合了文字、图像、链接以及其它主题相关的媒体，同时能够让读者以互动的方","title":"Win10使用Hexo和Pages服务搭建个人博客"},{"content":"1 Git配置 打开Git Bash，配置用户信息,\n1# 配置用户名和邮箱 2git config --global user.name \u0026#34;github用户名\u0026#34; 3git config --global user.email \u0026#34;github注册邮箱\u0026#34; 2 SSH配置 Git和GitHub之间可以通过HTTPS、SSH、GitHub CLI等形式来连接，这里我们使用SSH方式连接。\nSSH登录安全性由非对称加密保证，产生密钥时，一次产生两个密钥，一个公钥，一个私钥，在Git中一般命名为id_rsa.pub, id_rsa。公钥放到远程主机，私钥保存在本地。\n当本地主机需要登录远程主机时，①本地主机向远程主机发送一个登录请求，②远程收到消息后，随机生成一个字符串并用公钥加密，发回给本地。③本地拿到该字符串，用存放在本地的私钥进行解密，再次发送到远程，④远程比对该解密后的字符串与源字符串是否等同，如果等同则认证成功。\n执行下面命令生成ssh密钥文件，会提示你指定保存路径（默认是C:/Users/当前用户/.ssh/id_rsa），然后确认密码。使用默认配置可以直接回车跳过，但是并不推荐，如果之前生成过密钥文件，会提示覆盖。这边指定了保存路径为C:/Users/当前用户/.ssh/id_rsa.github。\n1# 生成 ssh 密钥 2ssh-keygen -t rsa -C \u0026#34;github注册邮箱\u0026#34; 在GitHub设置里点击New SSH key添加公钥，在Title中填写名称，方便区分，接着以文本方式打开之前生成的.pub公钥文件，Ctrl + A全选，然后复制内容并粘贴到Key中，点击Add SSH key，确认GitHub密码后，完成配置。\n在默认保存路径C:/Users/当前用户/.ssh/下，创建一个名为config的文件，输入以下内容，IdentityFile后面是之前配置的密钥的路径。如果之前保存过其它SSH密钥，可以依照相同格式进行配置。然后回到Git Bash，执行chmod 600 ~/.ssh/config添加读写权限。\n1# github 2Host github.com 3IdentityFile ~/.ssh/id_rsa.github 4User git 测试配置，出现successfully authenticated说明成功\n1# 测试配置 2ssh -T git@github.com 如果提示Could not resolve hostname github.com: No address associated with hostname，使用IPAddress查询GitHub真实IP地址，然后添加到C:\\Windows\\System32\\drivers\\etc\\hosts文件中。\n1140.82.114.4 github.com 推荐使用114DNS，可以避免此情况，也无需改动hosts文件。\n","permalink":"https://blog.lordash.de/posts/configure/bb23eaa4846998e0/","summary":"1 Git配置 打开Git Bash，配置用户信息, 1# 配置用户名和邮箱 2git config --global user.name \u0026#34;github用户名\u0026#34; 3git config --global user.email \u0026#34;github","title":"Win10配置Git和SSH"},{"content":"简介 快速排序算法是对冒泡排序算法的一种改进。平均时间复杂度$O(nlogn)$，最坏时间复杂度$O(n^2)$。\n快速排序的基本思想：每趟排序选择一个基准值pivot，使得小于pivot的元素和大于pivot的元素分隔于pivot两侧，即每一趟确定了一个元素的位置。然后对基准值两侧的区间进行递归，以达到整个序列有序。\n可以看出时间复杂度与递归的层数相关，提升效率的关键就在于partition，划分时的实现。\n单路快排 最基础的实现版本，前后双指针法：\n1// 对左闭右开区间a[l, r)，单路快排，前后双指针法 2void quickSort(int *a, int l, int r){ 3 if(l\u0026gt;=r) return; 4 5 int pivot = a[l]; 6 int j = l; 7 for(int i=l+1; i\u0026lt;r; i++){ 8 if(a[i] \u0026lt; pivot) 9 swap(a[++j], a[i]); 10 } 11 swap(a[l], a[j]); 12 13 quickSort(a, l, j); 14 quickSort(a, j+1, r); 15} 这种方法有许多缺陷，但胜在简短，而且简单修改就可以变成链表版本：\n1// 单链表采用直接交换数据区，修改指针的话没什么好想法 2void quickSort(ListNode *head, ListNode *last){ 3 if(head==nullptr || head==last) return; 4 5 int pivot = head-\u0026gt;val; 6 ListNode *pre = head; 7 for(ListNode *cur=head; cur-\u0026gt;next!=last; cur=cur-\u0026gt;next){ 8 if(cur-\u0026gt;next-\u0026gt;val \u0026lt; pivot){ 9 swap(cur-\u0026gt;next-\u0026gt;val, pre-\u0026gt;next-\u0026gt;val); 10 pre = pre-\u0026gt;next; 11 } 12 } 13 swap(head-\u0026gt;val, pre-\u0026gt;val); 14 15 quickSort(head, pre); 16 quickSort(pre-\u0026gt;next, last); 17} 双路快排 单路快排会使得与基准值pivot相等的元素总是归为一侧，存在大量相同元素时，时间复杂度退化为$ O(n^2) $。左右双指针法可以让与基准值相等的元素随机交换至两侧，但是还需处理。\n1// 左闭右开区间a[l, r)，双路快排，左右双指针法 2void quickSort(int *a, int l, int r){ 3 if(l\u0026gt;=r) return; 4 5 int pivot = a[l]; 6 int i=l+1, j=r-1; 7 while(i\u0026lt;=j){ 8 while(a[i]\u0026lt;pivot \u0026amp;\u0026amp; i\u0026lt;r) i++; 9 while(a[j]\u0026gt;pivot \u0026amp;\u0026amp; j\u0026gt;l) j--; 10 if(i\u0026gt;j) break; 11 swap(a[i++], a[j--]); 12 } 13 swap(a[l], a[j]); 14 15 quickSort(a, l, j); 16 quickSort(a, j+1, r); 17} 三路快排 要真正优化存在大量相同元素情况下快排的效率时，还是需要使用三路快排，将序列分为小于pivot的 $ [l, lt) $ ， 等于pivot的 $ [lt, i] $ ， 大于pivot的 $ [rt, r) $ 三部分。\n1// 左闭右开区间a[l, r)，三路快排 2void quickSort(int *a, int l, int r){ 3 if(l\u0026gt;=r) return; 4 5 int pivot = a[l]; 6 int lt = l, rt = r; 7 for(int i=l+1; i\u0026lt;rt; ){ 8 if(a[i] \u0026lt; pivot) 9 swap(a[i++], a[++lt]); 10 else if(a[i] \u0026gt; pivot) 11 swap(a[i], a[--rt]); 12 else 13 i++; 14 } 15 swap(a[l], a[lt]); 16 17 quickSort(a, l, lt); 18 quickSort(a, rt, r); 19} 更多优化 更多优化就可以参考STL::sort()函数的实现。例如，\n在基准值pivot的选取中，如果每次选取的恰好是当前序列中的最大或最小元素，划分的结果是最坏情况，递归层数大大上升。对此，我们可以使用随机选取或者三数取中法。\n1// 左闭右开区间a[l, r)，随机选取 2srand(time(NULL)); 3int pivot = a[rand()%(r-l)+l]; 4 5// 左闭右开区间a[l, r)，三数取中法 6int pivot = a[l + (r-l)/2]; 7if(pivot\u0026lt;a[l] \u0026amp;\u0026amp; pivot\u0026lt;a[r]) pivot=min(a[l], a[r]); 8if(pivot\u0026gt;a[l] \u0026amp;\u0026amp; pivot\u0026gt;a[r]) pivot=max(a[l], a[r]); 当序列较短时(\u0026lt;16)，可以采用直接插入排序，减少递归深度。\n1// 还需要具体实现 2if(r-l \u0026lt; 16){ 3 insertionSort(a, l, r); 4 return; 5} 当递归次数大于限制时，采用堆排序等。\n代码 测试代码：\n1#include \u0026lt;bits/stdc++.h\u0026gt; 2using namespace std; 3 4void showArray(int *a, int n){ 5 for(int i=0; i\u0026lt;n; i++){ 6 printf(\u0026#34;%d \u0026#34;, a[i]); 7 } 8 printf(\u0026#34;\\n\u0026#34;); 9} 10 11// 单路快排，前后双指针法 12void quickSort(int *a, int l, int r){ 13 if(l\u0026gt;=r) return; 14 15 int pivot = a[l]; 16 int j = l; 17 for(int i=l+1; i\u0026lt;r; i++){ 18 if(a[i] \u0026lt; pivot) 19 swap(a[++j], a[i]); 20 } 21 swap(a[l], a[j]); 22 23 quickSort(a, l, j); 24 quickSort(a, j+1, r); 25} 26 27// 双路快排，左右双指针法 28void quickSort(int *a, int l, int r){ 29 if(l\u0026gt;=r) return; 30 31 int pivot = a[l]; 32 int i=l+1, j=r-1; 33 while(i\u0026lt;=j){ 34 while(a[i]\u0026lt;pivot \u0026amp;\u0026amp; i\u0026lt;r) i++; 35 while(a[j]\u0026gt;pivot \u0026amp;\u0026amp; j\u0026gt;l) j--; 36 if(i\u0026gt;j) break; 37 swap(a[i++], a[j--]); 38 } 39 swap(a[l], a[j]); 40 41 quickSort(a, l, j); 42 quickSort(a, j+1, r); 43} 44 45// 三路快排 46void quickSort(int *a, int l, int r){ 47 if(l\u0026gt;=r) return; 48 49 int pivot = a[l]; 50 int lt = l, rt = r; 51 for(int i=l+1; i\u0026lt;rt; ){ 52 if(a[i] \u0026lt; pivot) 53 swap(a[i++], a[++lt]); 54 else if(a[i] \u0026gt; pivot) 55 swap(a[i], a[--rt]); 56 else 57 i++; 58 } 59 swap(a[l], a[lt]); 60 61 quickSort(a, l, lt); 62 quickSort(a, rt, r); 63} 64 65struct ListNode { 66 int val; 67 ListNode *next; 68 ListNode(int x) : val(x), next(NULL) {} 69}; 70 71void showList(ListNode *head){ 72 ListNode *p = head; 73 while(p!=nullptr){ 74 printf(\u0026#34;%d \u0026#34;, p-\u0026gt;val); 75 p = p-\u0026gt;next; 76 } 77 printf(\u0026#34;\\n\u0026#34;); 78} 79 80// 链表快排 81void quickSort(ListNode *head, ListNode *last){ 82 if(head==nullptr || head==last) return; 83 84 int pivot = head-\u0026gt;val; 85 ListNode *pre = head; 86 for(ListNode *cur=head; cur-\u0026gt;next!=last; cur=cur-\u0026gt;next){ 87 if(cur-\u0026gt;next-\u0026gt;val \u0026lt; pivot){ 88 swap(cur-\u0026gt;next-\u0026gt;val, pre-\u0026gt;next-\u0026gt;val); 89 pre = pre-\u0026gt;next; 90 } 91 } 92 swap(head-\u0026gt;val, pre-\u0026gt;val); 93 94 quickSort(head, pre); 95 quickSort(pre-\u0026gt;next, last); 96} 97 98int main() 99{ 100 int n = 10; 101 int a[11] = {4,1,7,6,9,2,8,0,3,5}; 102 103 ListNode *h[10]; 104 for(int i=0; i\u0026lt;n; i++){ 105 h[i] = new ListNode(a[i]); 106 if(i) h[i-1]-\u0026gt;next = h[i]; 107 } 108 ListNode *head = h[0]; 109 110 showArray(a, n); 111 quickSort(a, 0, n); 112 showArray(a, n); 113 114 showList(head); 115 quickSort(head, nullptr); 116 showList(head); 117 118 return 0; 119} ","permalink":"https://blog.lordash.de/posts/algorithm/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/","summary":"简介 快速排序算法是对冒泡排序算法的一种改进。平均时间复杂度$O(nlogn)$，最坏时间复杂度$O(n^2)$。 快速排序的基本思想：每趟排序","title":"快速排序"},{"content":"数组中出现次数超过一半的数字(剑指Offer-39) 题面 数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。\n你可以假设数组是非空的，并且给定的数组总是存在多数元素。\n示例 1输入: [1, 2, 3, 2, 2, 2, 5, 4, 2] 2输出: 2 限制 11 \u0026lt;= 数组长度 \u0026lt;= 50000 思路 摩尔投票法基于这样一个事实，当一个数的重复次数超过数组长度的一半，每次将两个不相同的数删除，最终剩下的就是要找的数。\n代码 1class Solution { 2public: 3 int majorityElement(vector\u0026lt;int\u0026gt;\u0026amp; nums) { 4 int num=0, ans=0; 5 for(int x : nums){ 6 if(num==0) ans = x; 7 if(ans == x) num++; 8 else num--; 9 } 10 return ans; 11 } 12}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-39-%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/","summary":"数组中出现次数超过一半的数字(剑指Offer-39) 题面 数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。 你可以假设数组是非空的","title":"剑指Offer-39 数组中出现次数超过一半的数字"},{"content":"字符串的排列(剑指Offer-38) 题面 输入一个字符串，打印出该字符串中字符的所有排列。\n你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。\n示例 1输入：s = \u0026#34;abc\u0026#34; 2输出：[\u0026#34;abc\u0026#34;,\u0026#34;acb\u0026#34;,\u0026#34;bac\u0026#34;,\u0026#34;bca\u0026#34;,\u0026#34;cab\u0026#34;,\u0026#34;cba\u0026#34;] 限制 11 \u0026lt;= s 的长度 \u0026lt;= 8 思路 dfs遍历回溯。\n代码 1class Solution { 2 vector\u0026lt;string\u0026gt; ans; 3 void dfs(string s, string \u0026amp;t, vector\u0026lt;bool\u0026gt; \u0026amp;vis){ 4 if(s.size() == t.size()){ 5 ans.push_back(t); 6 return; 7 } 8 for(int i=0; i\u0026lt;s.size(); i++){ 9 if(vis[i]) continue; 10 if(i \u0026amp;\u0026amp; s[i-1]==s[i] \u0026amp;\u0026amp; !vis[i-1]) continue; 11 t.push_back(s[i]); 12 vis[i] = true; 13 dfs(s, t, vis); 14 vis[i] = false; 15 t.pop_back(); 16 } 17 } 18public: 19 vector\u0026lt;string\u0026gt; permutation(string s) { 20 if(s.size() == 0) return {}; 21 string t = \u0026#34;\u0026#34;; 22 sort(s.begin(), s.end()); 23 vector\u0026lt;bool\u0026gt; vis(s.size()); 24 dfs(s, t, vis); 25 return ans; 26 } 27}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-38-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/","summary":"字符串的排列(剑指Offer-38) 题面 输入一个字符串，打印出该字符串中字符的所有排列。 你可以以任意顺序返回这个字符串数组，但里面不能有重复","title":"剑指Offer-38 字符串的排列"},{"content":"二叉树中和为某一值的路径(剑指Offer-34) 题面 请实现两个函数，分别用来序列化和反序列化二叉树。\n示例 给定如下二叉树，以及目标和 target = 22，\n1 5 2 / \\ 3 4 8 4 / / \\ 5 11 13 4 6 / \\ / \\ 7 7 2 5 1 返回:\n1[ 2 [5,4,11,2], 3 [5,8,4,5] 4] 提示 节点总数 \u0026lt;= 10000\n思路 dfs遍历即可，注意路径是根节点到叶子结点。\n代码 1/** 2 * Definition for a binary tree node. 3 * struct TreeNode { 4 * int val; 5 * TreeNode *left; 6 * TreeNode *right; 7 * TreeNode() : val(0), left(nullptr), right(nullptr) {} 8 * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} 9 * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} 10 * }; 11 */ 12class Solution { 13 vector\u0026lt;vector\u0026lt;int\u0026gt; \u0026gt; ans; 14 vector\u0026lt;int\u0026gt; v; 15 void dfs(TreeNode *rt, int n){ 16 if(rt == nullptr) return; 17 n -= rt-\u0026gt;val; 18 v.push_back(rt-\u0026gt;val); 19 if(n || rt-\u0026gt;left || rt-\u0026gt;right){ 20 dfs(rt-\u0026gt;left, n); 21 dfs(rt-\u0026gt;right, n); 22 }else{ 23 ans.push_back(v); 24 } 25 v.pop_back(); 26 } 27public: 28 vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; pathSum(TreeNode* root, int target) { 29 dfs(root, target); 30 return ans; 31 } 32}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-34-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84/","summary":"二叉树中和为某一值的路径(剑指Offer-34) 题面 请实现两个函数，分别用来序列化和反序列化二叉树。 示例 给定如下二叉树，以及目标和 target = 22，","title":"剑指Offer-34 二叉树中和为某一值的路径"},{"content":"序列化二叉树(剑指Offer-37) 题面 请实现两个函数，分别用来序列化和反序列化二叉树。\n示例 1你可以将以下二叉树： 2 3 1 4 / \\ 5 2 3 6 / \\ 7 4 5 8 9序列化为 \u0026#34;[1,2,3,null,null,4,5]\u0026#34; 思路 BFS层序遍历即可，注意，如果节点为null，则它的子节点就不记录。\n即\n1 1 2 \\ 3 2 4 / 5 3 表示为[1,null,2,3] 而非[1,null,2,null,null,3]\n反序列化时不能使用父子节点的下标关系。\n代码 1/** 2 * Definition for a binary tree node. 3 * struct TreeNode { 4 * int val; 5 * TreeNode *left; 6 * TreeNode *right; 7 * TreeNode(int x) : val(x), left(NULL), right(NULL) {} 8 * }; 9 */ 10class Codec { 11public: 12 13 // Encodes a tree to a single string. 14 string serialize(TreeNode* root) { 15 if(root == nullptr) return \u0026#34;[]\u0026#34;; 16 string res = \u0026#34;[\u0026#34;; 17 queue\u0026lt;TreeNode *\u0026gt; q; 18 q.push(root); 19 while(!q.empty()){ 20 TreeNode *t = q.front(); q.pop(); 21 if(t == nullptr){ 22 res += \u0026#34;null,\u0026#34;; 23 }else{ 24 res += to_string(t-\u0026gt;val) + \u0026#34;,\u0026#34;; 25 q.push(t-\u0026gt;left); 26 q.push(t-\u0026gt;right); 27 } 28 } 29 res[res.length()-1] = \u0026#39;]\u0026#39;; 30 return res; 31 } 32 33 // Decodes your encoded data to tree. 34 TreeNode* deserialize(string data) { 35 if(data==\u0026#34;[]\u0026#34;) return nullptr; 36 vector\u0026lt;TreeNode *\u0026gt; v; 37 for(int i=0; i\u0026lt;data.length(); i++){ 38 if(data[i]==\u0026#39;-\u0026#39; || isdigit(data[i])){ 39 int f=1, x=0; 40 if(data[i]==\u0026#39;-\u0026#39;){ 41 f = -1; 42 i++; 43 } 44 for(; isdigit(data[i]); i++){ 45 x = x*10 + (data[i]-\u0026#39;0\u0026#39;); 46 } 47 i--; x *= f; 48 TreeNode *p = new TreeNode(x); 49 v.push_back(p); 50 }else if(data[i]==\u0026#39;n\u0026#39;){ 51 v.push_back(nullptr); 52 i += 3; 53 } 54 } 55 for(int i=0, j=1; i\u0026lt;v.size()\u0026amp;\u0026amp;j\u0026lt;v.size(); i++,j++){ 56 while(v[i]==nullptr) i++; 57 v[i]-\u0026gt;left = v[j++]; 58 v[i]-\u0026gt;right = v[j]; 59 } 60 return v[0]; 61 } 62}; 63 64// Your Codec object will be instantiated and called as such: 65// Codec codec; 66// codec.deserialize(codec.serialize(root)); ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-37-%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91/","summary":"序列化二叉树(剑指Offer-37) 题面 请实现两个函数，分别用来序列化和反序列化二叉树。 示例 1你可以将以下二叉树： 2 3 1 4 / \\ 5 2 3 6 / \\ 7","title":"剑指Offer-37 序列化二叉树"},{"content":"二叉搜索树与双向链表(剑指Offer-36) 题面 输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。\n为了让您更好地理解问题，以下面的二叉搜索树为例：\n我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。\n下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。\n特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。\n思路 二叉搜索树的中序遍历为递增序列。\n代码 1/* 2// Definition for a Node. 3class Node { 4public: 5 int val; 6 Node* left; 7 Node* right; 8 9 Node() {} 10 11 Node(int _val) { 12 val = _val; 13 left = NULL; 14 right = NULL; 15 } 16 17 Node(int _val, Node* _left, Node* _right) { 18 val = _val; 19 left = _left; 20 right = _right; 21 } 22}; 23*/ 24class Solution { 25 Node *pre=nullptr, *head=nullptr; 26 void dfs(Node *cur){ 27 if(cur == nullptr) return; 28 dfs(cur-\u0026gt;left); 29 if(pre == nullptr) 30 head = cur; 31 else 32 pre-\u0026gt;right = cur; 33 cur-\u0026gt;left = pre; 34 pre = cur; 35 dfs(cur-\u0026gt;right); 36 } 37public: 38 Node* treeToDoublyList(Node* root) { 39 if(root == nullptr) return nullptr; 40 dfs(root); 41 head-\u0026gt;left = pre; 42 pre-\u0026gt;right = head; 43 return head; 44 } 45}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-36-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/","summary":"二叉搜索树与双向链表(剑指Offer-36) 题面 输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只","title":"剑指Offer-36 二叉搜索树与双向链表"},{"content":"复杂链表的复制(剑指Offer-34) 题面 请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。\n示例 示例 1：\n1输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]] 2输出：[[7,null],[13,0],[11,4],[10,2],[1,0]] 示例 2：\n1输入：head = [[1,1],[2,1]] 2输出：[[1,1],[2,1]] 示例 3：\n1输入：head = [[3,null],[3,0],[3,null]] 2输出：[[3,null],[3,0],[3,null]] 示例 4：\n1输入：head = [] 2输出：[] 3解释：给定的链表为空（空指针），因此返回 null。 限制 1 -10000 \u0026lt;= Node.val \u0026lt;= 10000 2 Node.random 为空（null）或指向链表中的节点。 3 节点数目不超过 1000 。 思路 复制各节点，构建拼接链表: 设原链表为 node1 → node2 → ⋯，构建的拼接链表如下所示： node1 → node1new → node2 → node2new → ⋯\n构建新链表各节点的 random 指向： 当访问原节点 cur 的随机指向节点 cur.random 时，对应新节点 cur.next 的随机指向节点为 cur.random.next 。\n拆分原 / 新链表： 设置 pre / cur 分别指向原 / 新链表头节点，遍历执行 pre.next = pre.next.next 和 cur.next = cur.next.next 将两链表拆分开。\n返回新链表的头节点 res 即可。\n代码 1/* 2// Definition for a Node. 3class Node { 4public: 5 int val; 6 Node* next; 7 Node* random; 8 9 Node(int _val) { 10 val = _val; 11 next = NULL; 12 random = NULL; 13 } 14}; 15*/ 16class Solution { 17public: 18 Node* copyRandomList(Node* head) { 19 if(head == nullptr) return nullptr; 20 Node *cur = head; 21 22 while(cur != nullptr){ 23 Node *t = new Node(cur-\u0026gt;val); 24 t-\u0026gt;next = cur-\u0026gt;next; 25 cur-\u0026gt;next = t; 26 cur = t-\u0026gt;next; 27 } 28 29 cur = head; 30 while(cur != nullptr){ 31 if(cur-\u0026gt;random != nullptr) 32 cur-\u0026gt;next-\u0026gt;random = cur-\u0026gt;random-\u0026gt;next; 33 cur = cur-\u0026gt;next-\u0026gt;next; 34 } 35 36 cur = head-\u0026gt;next; 37 Node *pre = head, *res = head-\u0026gt;next; 38 while(cur-\u0026gt;next != nullptr){ 39 pre-\u0026gt;next = pre-\u0026gt;next-\u0026gt;next; 40 cur-\u0026gt;next = cur-\u0026gt;next-\u0026gt;next; 41 pre = pre-\u0026gt;next; 42 cur = cur-\u0026gt;next; 43 } 44 pre-\u0026gt;next = nullptr; 45 return res; 46 } 47}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-35-%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/","summary":"复杂链表的复制(剑指Offer-34) 题面 请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指","title":"剑指Offer-34 复杂链表的复制"},{"content":"二叉搜索树的后序遍历序列(剑指Offer-33) 题面 输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。如果是则返回 true，否则返回 false。假设输入的数组的任意两个数字都互不相同。\n参考以下这颗二叉搜索树：\n1 5 2 / \\ 3 2 6 4 / \\ 5 1 3 示例 示例 1：\n1输入: [1,6,3,2,5] 2输出: false 示例 2：\n1输入: [1,3,2,6,5] 2输出: true 限制 1数组长度 \u0026lt;= 1000 思路 按照后续遍历的实现最后一个元素是根节点， 比根节点的小的说明是在左子树，比根节点大的说明在右子树。\n代码 1class Solution { 2 bool dfs(vector\u0026lt;int\u0026gt;\u0026amp; postorder, int start, int end){ 3 if(start \u0026gt;= end) return true; 4 5 int p = start; 6 int rootval = postorder[end]; 7 while(postorder[p] \u0026lt; rootval){ 8 ++p; 9 } 10 int leftEnd = p-1; 11 12 while(postorder[p] \u0026gt; rootval){ 13 ++p; 14 } 15 16 return p==end \u0026amp;\u0026amp; dfs(postorder, start, leftEnd) \u0026amp;\u0026amp; dfs(postorder, leftEnd+1, end-1); 17 } 18public: 19 bool verifyPostorder(vector\u0026lt;int\u0026gt;\u0026amp; postorder) { 20 return dfs(postorder, 0, postorder.size()-1); 21 } 22}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-33-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/","summary":"二叉搜索树的后序遍历序列(剑指Offer-33) 题面 输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。如果是则返回 true，否则","title":"剑指Offer-33 二叉搜索树的后序遍历序列"},{"content":"从上到下打印二叉树III(剑指Offer-32.3) 题面 请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。\n例如: 给定二叉树: [3,9,20,null,null,15,7],\n1 3 2 / \\ 3 9 20 4 / \\ 5 15 7 返回：\n1[ 2 [3], 3 [20,9], 4 [15,7] 5] 限制 1节点总数 \u0026lt;= 1000 思路 BFS层序遍历，加个标记，当一层遍历完时，队列里即是下一层，使用q.back()更新标记即可。\n再加个行号判断奇偶，决定是否reverse即可。\n代码 1/** 2 * Definition for a binary tree node. 3 * struct TreeNode { 4 * int val; 5 * TreeNode *left; 6 * TreeNode *right; 7 * TreeNode(int x) : val(x), left(NULL), right(NULL) {} 8 * }; 9 */ 10class Solution { 11public: 12 vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; levelOrder(TreeNode* root) { 13 vector\u0026lt;vector\u0026lt;int\u0026gt; \u0026gt; ans; 14 vector\u0026lt;int\u0026gt; row; 15 if(root==NULL) return ans; 16 17 queue\u0026lt;TreeNode *\u0026gt;q; 18 q.push(root); 19 TreeNode *end = root; 20 int line = 0; 21 22 while(!q.empty()){ 23 TreeNode *t = q.front(); q.pop(); 24 row.push_back(t-\u0026gt;val); 25 if(t-\u0026gt;left) 26 q.push(t-\u0026gt;left); 27 if(t-\u0026gt;right) 28 q.push(t-\u0026gt;right); 29 if(t == end){ 30 if(line \u0026amp; 1) 31 reverse(row.begin(), row.end()); 32 ans.push_back(row); 33 line++; 34 row.clear(); 35 end = q.back(); 36 } 37 } 38 return ans; 39 } 40}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-32.3-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91iii/","summary":"从上到下打印二叉树III(剑指Offer-32.3) 题面 请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从","title":"剑指Offer-32.3 从上到下打印二叉树III"},{"content":"从上到下打印二叉树II(剑指Offer-32.2) 题面 从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。\n例如: 给定二叉树: [3,9,20,null,null,15,7],\n1 3 2 / \\ 3 9 20 4 / \\ 5 15 7 返回：\n1[ 2 [3], 3 [9,20], 4 [15,7] 5] 限制 1节点总数 \u0026lt;= 1000 思路 BFS层序遍历，加个标记，当一层遍历完时，队列里即是下一层，使用q.back()更新标记即可。\n代码 1/** 2 * Definition for a binary tree node. 3 * struct TreeNode { 4 * int val; 5 * TreeNode *left; 6 * TreeNode *right; 7 * TreeNode(int x) : val(x), left(NULL), right(NULL) {} 8 * }; 9 */ 10class Solution { 11public: 12 vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; levelOrder(TreeNode* root) { 13 vector\u0026lt;vector\u0026lt;int\u0026gt; \u0026gt; ans; 14 vector\u0026lt;int\u0026gt; row; 15 if(root==NULL) return ans; 16 17 queue\u0026lt;TreeNode *\u0026gt;q; 18 q.push(root); 19 TreeNode *end = root; 20 21 while(!q.empty()){ 22 TreeNode *t = q.front(); q.pop(); 23 row.push_back(t-\u0026gt;val); 24 if(t-\u0026gt;left) 25 q.push(t-\u0026gt;left); 26 if(t-\u0026gt;right) 27 q.push(t-\u0026gt;right); 28 if(t == end){ 29 ans.push_back(row); 30 row.clear(); 31 end = q.back(); 32 } 33 } 34 return ans; 35 } 36}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-32.2-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91ii/","summary":"从上到下打印二叉树II(剑指Offer-32.2) 题面 从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。 例如: 给定二叉树:","title":"剑指Offer-32.2 从上到下打印二叉树II"},{"content":"从上到下打印二叉树(剑指Offer-32.1) 题面 从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。\n例如: 给定二叉树: [3,9,20,null,null,15,7],\n1 3 2 / \\ 3 9 20 4 / \\ 5 15 7 返回：\n1[3,9,20,15,7] 限制 1节点总数 \u0026lt;= 1000 思路 BFS层序遍历。\n代码 1/** 2 * Definition for a binary tree node. 3 * struct TreeNode { 4 * int val; 5 * TreeNode *left; 6 * TreeNode *right; 7 * TreeNode(int x) : val(x), left(NULL), right(NULL) {} 8 * }; 9 */ 10class Solution { 11public: 12 vector\u0026lt;int\u0026gt; levelOrder(TreeNode* root) { 13 vector\u0026lt;int\u0026gt; v; 14 if(root==NULL) return v; 15 16 queue\u0026lt;TreeNode *\u0026gt;q; 17 q.push(root); 18 19 while(!q.empty()){ 20 TreeNode *t = q.front(); q.pop(); 21 v.push_back(t-\u0026gt;val); 22 if(t-\u0026gt;left) 23 q.push(t-\u0026gt;left); 24 if(t-\u0026gt;right) 25 q.push(t-\u0026gt;right); 26 } 27 return v; 28 } 29}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-32.1-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/","summary":"从上到下打印二叉树(剑指Offer-32.1) 题面 从上到下打印出二叉树的每个节点，同一层的节点按照从左到右的顺序打印。 例如: 给定二叉树: [3,9,20,null,null,15,7], 1","title":"剑指Offer-32.1 从上到下打印二叉树"},{"content":"栈的压入、弹出序列(剑指Offer-31) 题面 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列 {1,2,3,4,5} 是某栈的压栈序列，序列 {4,5,3,2,1} 是该压栈序列对应的一个弹出序列，但 {4,3,5,1,2} 就不可能是该压栈序列的弹出序列。\n示例 示例 1：\n1输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1] 2输出：true 3解释：我们可以按以下顺序执行： 4push(1), push(2), push(3), push(4), pop() -\u0026gt; 4, 5push(5), pop() -\u0026gt; 5, pop() -\u0026gt; 3, pop() -\u0026gt; 2, pop() -\u0026gt; 1 示例 2：\n1输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2] 2输出：false 3解释：1 不能在 2 之前弹出。 限制 10 \u0026lt;= pushed.length == popped.length \u0026lt;= 1000 20 \u0026lt;= pushed[i], popped[i] \u0026lt; 1000 3pushed 是 popped 的排列。 思路 辅助栈模拟。\n代码 1class Solution { 2public: 3 bool validateStackSequences(vector\u0026lt;int\u0026gt;\u0026amp; pushed, vector\u0026lt;int\u0026gt;\u0026amp; popped) { 4 stack\u0026lt;int\u0026gt; st; 5 int i=0; 6 for(int x:pushed){ 7 st.push(x); 8 while(!st.empty() \u0026amp;\u0026amp; st.top()==popped[i]){ 9 st.pop(); 10 i++; 11 } 12 } 13 return st.empty(); 14 } 15}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-31-%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/","summary":"栈的压入、弹出序列(剑指Offer-31) 题面 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈","title":"剑指Offer-31 栈的压入、弹出序列"},{"content":"包含min函数的栈(剑指Offer-30) 题面 定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、push 及 pop 的时间复杂度都是 O(1)。\n示例 1MinStack minStack = new MinStack(); 2minStack.push(-2); 3minStack.push(0); 4minStack.push(-3); 5minStack.min(); --\u0026gt; 返回 -3. 6minStack.pop(); 7minStack.top(); --\u0026gt; 返回 0. 8minStack.min(); --\u0026gt; 返回 -2. 限制 1各函数的调用总次数不超过 20000 次 思路 除了常规的栈，再维护一个单调栈，从栈顶到栈底递增\n常规栈常规添加删除元素\n单调栈栈顶元素大于等于待加入元素或者单调栈为空，则入栈；当常规栈的出栈元素等于单调栈的栈顶元素，单调栈出栈\n代码 1class MinStack { 2 stack\u0026lt;int\u0026gt; s, t; 3public: 4 /** initialize your data structure here. */ 5 MinStack() { 6 7 } 8 9 void push(int x) { 10 if(t.empty() || t.top() \u0026gt;= x) 11 t.push(x); 12 s.push(x); 13 } 14 15 void pop() { 16 if(t.top() == s.top()) 17 t.pop(); 18 s.pop(); 19 } 20 21 int top() { 22 return s.top(); 23 } 24 25 int min() { 26 return t.top(); 27 } 28}; 29 30/** 31 * Your MinStack object will be instantiated and called as such: 32 * MinStack* obj = new MinStack(); 33 * obj-\u0026gt;push(x); 34 * obj-\u0026gt;pop(); 35 * int param_3 = obj-\u0026gt;top(); 36 * int param_4 = obj-\u0026gt;min(); 37 */ ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-30-%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/","summary":"包含min函数的栈(剑指Offer-30) 题面 定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 min 函数在该栈中，调用 min、pus","title":"剑指Offer-30 包含min函数的栈"},{"content":"顺时针打印矩阵(剑指Offer-29) 题面 输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。\n示例 示例 1：\n1输入：matrix = [[1,2,3],[4,5,6],[7,8,9]] 2输出：[1,2,3,6,9,8,7,4,5] 示例 2：\n1输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]] 2输出：[1,2,3,4,8,12,11,10,9,5,6,7] 限制 1 0 \u0026lt;= matrix.length \u0026lt;= 100 2 0 \u0026lt;= matrix[i].length \u0026lt;= 100 思路 暴力模拟。\n代码 1class Solution { 2public: 3 vector\u0026lt;int\u0026gt; spiralOrder(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; matrix) { 4 if(matrix.empty()) return vector\u0026lt;int\u0026gt;(); 5 vector\u0026lt;int\u0026gt; v; 6 int u=0, d=matrix.size()-1, l=0, r=matrix[0].size()-1; 7 while(1){ 8 for(int i=l; i\u0026lt;=r; i++) v.push_back(matrix[u][i]); 9 if(++u \u0026gt; d) break; 10 11 for(int i=u; i\u0026lt;=d; i++) v.push_back(matrix[i][r]); 12 if(l \u0026gt; --r) break; 13 14 for(int i=r; i\u0026gt;=l; i--) v.push_back(matrix[d][i]); 15 if(u \u0026gt; --d) break; 16 17 for(int i=d; i\u0026gt;=u; i--) v.push_back(matrix[i][l]); 18 if(++l \u0026gt; r) break; 19 } 20 return v; 21 } 22}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-29-%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/","summary":"顺时针打印矩阵(剑指Offer-29) 题面 输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。 示例 示例 1： 1输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]","title":"剑指Offer-29 顺时针打印矩阵"},{"content":"对称的二叉树(剑指Offer-28) 题面 请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。\n例如，二叉树 [1,2,2,3,4,4,3] 是对称的。\n1 1 2 / \\ 3 2 2 4 / \\ / \\ 5 3 4 4 3 但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:\n1 1 2 / \\ 3 2 2 4 \\ \\ 5 3 3 示例 示例 1：\n1输入：root = [1,2,2,3,4,4,3] 2输出：true 示例 2：\n1输入：root = [1,2,2,null,3,null,3] 2输出：false 限制 10 \u0026lt;= 节点个数 \u0026lt;= 1000 思路 递归。\n代码 1/** 2 * Definition for a binary tree node. 3 * struct TreeNode { 4 * int val; 5 * TreeNode *left; 6 * TreeNode *right; 7 * TreeNode(int x) : val(x), left(NULL), right(NULL) {} 8 * }; 9 */ 10class Solution { 11 bool dfs(TreeNode *left, TreeNode *right){ 12 if(left==NULL \u0026amp;\u0026amp; right==NULL) return true; 13 if(left==NULL || right==NULL || left-\u0026gt;val!=right-\u0026gt;val) return false; 14 return dfs(left-\u0026gt;left, right-\u0026gt;right) \u0026amp;\u0026amp; dfs(left-\u0026gt;right, right-\u0026gt;left); 15 } 16public: 17 bool isSymmetric(TreeNode* root) { 18 if(root==NULL) return true; 19 return dfs(root-\u0026gt;left, root-\u0026gt;right); 20 } 21}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-28-%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/","summary":"对称的二叉树(剑指Offer-28) 题面 请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。 例如，","title":"剑指Offer-28 对称的二叉树"},{"content":"二叉树的镜像(剑指Offer-27) 题面 请完成一个函数，输入一个二叉树，该函数输出它的镜像。\n例如输入：\n1 4 2 / \\ 3 2 7 4 / \\ / \\ 51 3 6 9 镜像输出：\n1 4 2 / \\ 3 7 2 4 / \\ / \\ 59 6 3 1 示例 1输入：root = [4,2,7,1,3,6,9] 2输出：[4,7,2,9,6,3,1] 限制 10 \u0026lt;= 节点个数 \u0026lt;= 1000 思路 递归。\n代码 1/** 2 * Definition for a binary tree node. 3 * struct TreeNode { 4 * int val; 5 * TreeNode *left; 6 * TreeNode *right; 7 * TreeNode(int x) : val(x), left(NULL), right(NULL) {} 8 * }; 9 */ 10class Solution { 11public: 12 TreeNode* mirrorTree(TreeNode* root) { 13 if(root==NULL) return NULL; 14 TreeNode *t = root-\u0026gt;left; 15 root-\u0026gt;left = mirrorTree(root-\u0026gt;right); 16 root-\u0026gt;right = mirrorTree(t); 17 return root; 18 } 19}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-27-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/","summary":"二叉树的镜像(剑指Offer-27) 题面 请完成一个函数，输入一个二叉树，该函数输出它的镜像。 例如输入： 1 4 2 / \\ 3 2 7 4 / \\ / \\ 51 3 6 9 镜像","title":"剑指Offer-27 二叉树的镜像"},{"content":"树的子结构(剑指Offer-26) 题面 输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)\nB是A的子结构， 即 A中有出现和B相同的结构和节点值。\n例如: 给定的树 A:\n1 3 2 / \\ 3 4 5 4 / \\ 5 1 2 给定的树 B：\n1 4 2 / 3 1 返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。\n示例 示例 1：\n1输入：A = [1,2,3], B = [3,1] 2输出：false 示例 2：\n1输入：A = [3,4,5,1,2], B = [4,1] 2输出：true 限制 10 \u0026lt;= 节点个数 \u0026lt;= 10000 思路 递归。\n代码 1/** 2 * Definition for a binary tree node. 3 * struct TreeNode { 4 * int val; 5 * TreeNode *left; 6 * TreeNode *right; 7 * TreeNode(int x) : val(x), left(NULL), right(NULL) {} 8 * }; 9 */ 10class Solution { 11 bool equal(TreeNode *A, TreeNode *B){ 12 if(B==NULL) return true; 13 if(A==NULL || A-\u0026gt;val != B-\u0026gt;val) return false; 14 return equal(A-\u0026gt;left, B-\u0026gt;left) \u0026amp;\u0026amp; equal(A-\u0026gt;right, B-\u0026gt;right); 15 } 16public: 17 bool isSubStructure(TreeNode* A, TreeNode* B) { 18 if(A==NULL || B==NULL) return false; 19 return equal(A, B) || isSubStructure(A-\u0026gt;left, B) || isSubStructure(A-\u0026gt;right, B); 20 } 21}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-26-%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/","summary":"树的子结构(剑指Offer-26) 题面 输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构) B是A的子结构， 即 A中","title":"剑指Offer-26 树的子结构"},{"content":"合并两个排序的链表(剑指Offer-25) 题面 输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。\n示例 1输入：1-\u0026gt;2-\u0026gt;4, 1-\u0026gt;3-\u0026gt;4 2输出：1-\u0026gt;1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;4 限制 10 \u0026lt;= 链表长度 \u0026lt;= 1000 思路 链表合并，设立一个伪头结点可以方便代码书写。\n代码 1/** 2 * Definition for singly-linked list. 3 * struct ListNode { 4 * int val; 5 * ListNode *next; 6 * ListNode(int x) : val(x), next(NULL) {} 7 * }; 8 */ 9class Solution { 10public: 11 ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) { 12 ListNode *head = new ListNode(0); 13 ListNode *p = head; 14 while(l1 \u0026amp;\u0026amp; l2){ 15 if(l1-\u0026gt;val \u0026lt; l2-\u0026gt;val){ 16 p-\u0026gt;next = l1; 17 l1 = l1-\u0026gt;next; 18 }else{ 19 p-\u0026gt;next = l2; 20 l2 = l2-\u0026gt;next; 21 } 22 p = p-\u0026gt;next; 23 } 24 p-\u0026gt;next = l1 ? l1 : l2; 25 return head-\u0026gt;next; 26 } 27}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-25-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/","summary":"合并两个排序的链表(剑指Offer-25) 题面 输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。 示例 1输入：1-\u0026g","title":"剑指Offer-25 合并两个排序的链表"},{"content":"反转链表(剑指Offer-24) 题面 定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。\n示例 1输入: 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5-\u0026gt;NULL 2输出: 5-\u0026gt;4-\u0026gt;3-\u0026gt;2-\u0026gt;1-\u0026gt;NULL 限制 10 \u0026lt;= 节点个数 \u0026lt;= 5000 思路 链表原地转置。\n代码 1/** 2 * Definition for singly-linked list. 3 * struct ListNode { 4 * int val; 5 * ListNode *next; 6 * ListNode(int x) : val(x), next(NULL) {} 7 * }; 8 */ 9class Solution { 10public: 11 ListNode* reverseList(ListNode* head) { 12 ListNode *h=NULL, *pre=head, *last=head; 13 while(pre){ 14 last = last-\u0026gt;next; 15 pre-\u0026gt;next = h; 16 h = pre; 17 pre = last; 18 } 19 return h; 20 } 21}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-24-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/","summary":"反转链表(剑指Offer-24) 题面 定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。 示例 1输入: 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5-\u0026gt;NULL 2输出: 5-\u0026gt;4-\u0026gt;3-\u0026gt;2-\u0026gt;1-\u0026gt;NULL 限制 10 \u0026lt;=","title":"剑指Offer-24 反转链表"},{"content":"链表中倒数第k个节点(剑指Offer-22) 题面 输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。\n例如，一个链表有 6 个节点，从头节点开始，它们的值依次是 1、2、3、4、5、6。这个链表的倒数第 3 个节点是值为 4 的节点。\n示例 1给定一个链表: 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5, 和 k = 2. 2返回链表 4-\u0026gt;5. 思路 双指针，使得两个指针间隔为k。\n代码 1/** 2 * Definition for singly-linked list. 3 * struct ListNode { 4 * int val; 5 * ListNode *next; 6 * ListNode(int x) : val(x), next(NULL) {} 7 * }; 8 */ 9class Solution { 10public: 11 ListNode* getKthFromEnd(ListNode* head, int k) { 12 ListNode *pre = head, *last = head; 13 for(int i=0; i\u0026lt;k \u0026amp;\u0026amp; last!=NULL; i++){ 14 last = last-\u0026gt;next; 15 } 16 while(last != NULL){ 17 last = last-\u0026gt;next; 18 pre = pre-\u0026gt;next; 19 } 20 return pre; 21 } 22}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-22-%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/","summary":"链表中倒数第k个节点(剑指Offer-22) 题面 输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的","title":"剑指Offer-22 链表中倒数第k个节点"},{"content":"调整数组顺序使奇数位于偶数前面(剑指Offer-21) 题面 输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。\n示例 1输入：nums = [1,2,3,4] 2输出：[1,3,2,4] 3注：[3,1,2,4] 也是正确的答案之一。 限制 0 \u0026lt;= nums.length \u0026lt;= 50000 1 \u0026lt;= nums[i] \u0026lt;= 10000 思路 定义头指针 left，尾指针 right。left 一直往右移，直到它指向的值为偶数，right 一直往左移，直到它指向的值为奇数。交换 nums[left] 和 nums[right]。重复上述操作，直到 left==right .\n代码 1class Solution { 2public: 3 vector\u0026lt;int\u0026gt; exchange(vector\u0026lt;int\u0026gt;\u0026amp; nums) { 4 int l = 0, r = nums.size()-1; 5 while(l \u0026lt; r){ 6 if(nums[l] \u0026amp; 1){ 7 l++; 8 continue; 9 } 10 if(!(nums[r] \u0026amp; 1)){ 11 r--; 12 continue; 13 } 14 swap(nums[l++], nums[r--]); 15 } 16 return nums; 17 } 18}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-21-%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D%E9%9D%A2/","summary":"调整数组顺序使奇数位于偶数前面(剑指Offer-21) 题面 输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半","title":"剑指Offer-21 调整数组顺序使奇数位于偶数前面"},{"content":"表示数值的字符串(剑指Offer-20) 题面 请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串\u0026quot;+100\u0026quot;、\u0026ldquo;5e2\u0026rdquo;、\u0026quot;-123\u0026quot;、\u0026ldquo;3.1416\u0026rdquo;、\u0026quot;-1E-16\u0026quot;、\u0026ldquo;0123\u0026quot;都表示数值，但\u0026quot;12e\u0026rdquo;、\u0026ldquo;1a3.14\u0026rdquo;、\u0026ldquo;1.2.3\u0026rdquo;、\u0026quot;+-5\u0026quot;及\u0026quot;12e+5.4\u0026quot;都不是。\n思路 自动机。\n![状态转移](剑指Offer-20 表示数值的字符串/状态转移.png)\n合法的结束状态有 2, 3, 7, 8 。\n代码 1class Solution { 2public: 3 bool isNumber(string s) { 4 unordered_map\u0026lt;char, int\u0026gt; mp[9]; 5 mp[0][\u0026#39; \u0026#39;]=0; mp[0][\u0026#39;s\u0026#39;]=1; mp[0][\u0026#39;d\u0026#39;]=2; mp[0][\u0026#39;.\u0026#39;]=4; 6 mp[1][\u0026#39;d\u0026#39;]=2; mp[1][\u0026#39;.\u0026#39;]=4; 7 mp[2][\u0026#39;d\u0026#39;]=2; mp[2][\u0026#39;.\u0026#39;]=3; mp[2][\u0026#39;e\u0026#39;]=5; mp[2][\u0026#39; \u0026#39;]=8; 8 mp[3][\u0026#39;d\u0026#39;]=3; mp[3][\u0026#39;e\u0026#39;]=5; mp[3][\u0026#39; \u0026#39;]=8; 9 mp[4][\u0026#39;d\u0026#39;]=3; 10 mp[5][\u0026#39;s\u0026#39;]=6; mp[5][\u0026#39;d\u0026#39;]=7; 11 mp[6][\u0026#39;d\u0026#39;]=7; 12 mp[7][\u0026#39;d\u0026#39;]=7; mp[7][\u0026#39; \u0026#39;]=8; 13 mp[8][\u0026#39; \u0026#39;]=8; 14 15 int p = 0; 16 char t; 17 for(char c:s){ 18 if(\u0026#39;0\u0026#39;\u0026lt;=c \u0026amp;\u0026amp; c\u0026lt;=\u0026#39;9\u0026#39;) t = \u0026#39;d\u0026#39;; 19 else if(c==\u0026#39;+\u0026#39; || c==\u0026#39;-\u0026#39;) t = \u0026#39;s\u0026#39;; 20 else if(c==\u0026#39;e\u0026#39; || c==\u0026#39;E\u0026#39;) t = \u0026#39;e\u0026#39;; 21 else t = c; 22 23 if(mp[p].find(t) == mp[p].end()) return false; 24 p = mp[p][t]; 25 } 26 return (p==2 || p==3 || p==7 || p==8); 27 } 28}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-20-%E8%A1%A8%E7%A4%BA%E6%95%B0%E5%80%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/","summary":"表示数值的字符串(剑指Offer-20) 题面 请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串\u0026quot;+100\u0026q","title":"剑指Offer-20 表示数值的字符串"},{"content":"正则表达式匹配(剑指Offer-19) 题面 请实现一个函数用来匹配包含'.'和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串\u0026quot;aaa\u0026quot;与模式\u0026quot;a.a\u0026quot;和\u0026quot;ab*ac*a\u0026quot;匹配，但与\u0026quot;aa.a\u0026quot;和\u0026quot;ab*a\u0026quot;均不匹配。\n示例 示例 1：\n1输入: 2s = \u0026#34;aa\u0026#34; 3p = \u0026#34;a\u0026#34; 4输出: false 5解释: \u0026#34;a\u0026#34; 无法匹配 \u0026#34;aa\u0026#34; 整个字符串。 示例 2：\n1输入: 2s = \u0026#34;aa\u0026#34; 3p = \u0026#34;a*\u0026#34; 4输出: true 5解释: 因为 \u0026#39;*\u0026#39; 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 \u0026#39;a\u0026#39;。因此，字符串 \u0026#34;aa\u0026#34; 6可被视为 \u0026#39;a\u0026#39; 重复了一次。 示例 3：\n1输入: 2s = \u0026#34;ab\u0026#34; 3p = \u0026#34;.*\u0026#34; 4输出: true 5解释: \u0026#34;.*\u0026#34; 表示可匹配零个或多个（\u0026#39;*\u0026#39;）任意字符（\u0026#39;.\u0026#39;）。 示例 4：\n1输入: 2s = \u0026#34;aab\u0026#34; 3p = \u0026#34;c*a*b\u0026#34; 4输出: true 5解释: 因为 \u0026#39;*\u0026#39; 表示零个或多个，这里 \u0026#39;c\u0026#39; 为 0 个, \u0026#39;a\u0026#39; 被重复一次。因此可以匹配字符串 \u0026#34;aab\u0026#34;。 示例 5：\n1输入: 2s = \u0026#34;mississippi\u0026#34; 3p = \u0026#34;mis*is*p*.\u0026#34; 4输出: false 限制 s 可能为空，且只包含从 a-z 的小写字母。 p 可能为空，且只包含从 a-z 的小写字母以及字符 . 和 *，无连续的 '*'。 思路 DP题。详见jyd的题解\n动态规划解析：\n状态定义： 设动态规划矩阵 dp ， dp[i][j] 代表字符串 s 的前 i 个字符和 p 的前 j 个字符能否匹配。\n转移方程： 需要注意，由于 dp[0][0] 代表的是空字符的状态， 因此 dp[i][j] 对应的添加字符是 s[i-1] 和 p[j-1] 。\n当p[j-1] = '*'时， dp[i][j] 在当以下任一情况为 true 时等于 true ：\ndp[i][j-2]： 即将字符组合 p[j-2] * 看作出现 0 次时，能否匹配； dp[i-1][j] 且 s[i-1] = p[j-2]: 即让字符 p[j-2] 多出现 1 次时，能否匹配； dp[i-1][j] 且 p[j-2] = '.': 即让字符'.'多出现 1 次时，能否匹配； 当 p[j-1] != '*' 时， dp[i][j] 在当以下任一情况为 true 时等于 true ：\ndp[i-1][j-1] 且 s[i-1] = p[j-1]： 即让字符 p[j-1] 多出现一次时，能否匹配； dp[i-1][j-1] 且 p[j-1] = '.'： 即将字符 . 看作字符 s[i-1] 时，能否匹配； 初始化： 需要先初始化 dp 矩阵首行，以避免状态转移时索引越界。\ndp[0][0] = true： 代 表两个空字符串能够匹配。 dp[0][j] = dp[0][j-2] 且 p[j-1] = '*'： 首行 s 为空字符串，因此当 p 的偶数位为 * 时才能够匹配（即让 p 的奇数位出现 0 次，保持 p 是空字符串）。因此，循环遍历字符串 p ，步长为 2（即只看偶数位）。 返回值： dp 矩阵右下角字符，代表字符串 s 和 p 能否匹配。\n代码 1class Solution { 2public: 3 bool isMatch(string s, string p) { 4 int n=s.size()+1, m=p.size()+1; 5 vector\u0026lt;vector\u0026lt;bool\u0026gt; \u0026gt; dp(n, vector\u0026lt;bool\u0026gt;(m, false)); 6 7 dp[0][0] = true; 8 for(int j=2; j\u0026lt;m; j+=2) 9 dp[0][j] = dp[0][j-2] \u0026amp;\u0026amp; p[j-1]==\u0026#39;*\u0026#39;; 10 11 for(int i=1; i\u0026lt;n; i++){ 12 for(int j=1; j\u0026lt;m; j++){ 13 if(p[j-1] == \u0026#39;*\u0026#39;){ 14 dp[i][j] = dp[i][j-2] || 15 dp[i-1][j] \u0026amp;\u0026amp; s[i-1]==p[j-2] || 16 dp[i-1][j] \u0026amp;\u0026amp; p[j-2]==\u0026#39;.\u0026#39;; 17 }else{ 18 dp[i][j] = dp[i-1][j-1] \u0026amp;\u0026amp; s[i-1]==p[j-1] || 19 dp[i-1][j-1] \u0026amp;\u0026amp; p[j-1]==\u0026#39;.\u0026#39;; 20 } 21 } 22 } 23 return dp[n-1][m-1]; 24 } 25}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-19-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/","summary":"正则表达式匹配(剑指Offer-19) 题面 请实现一个函数用来匹配包含'.'和'*'的正则表达式。模式中的字符'.'表示任意一个字符，而'*'","title":"剑指Offer-19 正则表达式匹配"},{"content":" 关于 个人 相册 分享 游戏 手机先吃\n","permalink":"https://blog.lordash.de/f/gallery/cookbook/","summary":"关于 个人 相册 分享 游戏 手机先吃","title":"菜谱"},{"content":" 关于 个人 相册 分享 游戏 Be water, my friend.\n","permalink":"https://blog.lordash.de/f/gallery/workout/","summary":"关于 个人 相册 分享 游戏 Be water, my friend.","title":"锻炼"},{"content":" 关于 个人 相册 分享 游戏 MuseScore 3已经下载好了，等我搬运好吧\n","permalink":"https://blog.lordash.de/f/gallery/score/","summary":"关于 个人 相册 分享 游戏 MuseScore 3已经下载好了，等我搬运好吧","title":"曲谱"},{"content":" 关于 个人 相册 分享 游戏 学如逆水行舟，不进则退\n","permalink":"https://blog.lordash.de/f/gallery/award/","summary":"关于 个人 相册 分享 游戏 学如逆水行舟，不进则退","title":"证书"},{"content":"删除链表的节点(剑指Offer-18) 题面 给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。\n返回删除后的链表的头节点。\n**注意：**此题对比原题有改动\n示例 示例 1：\n1输入: head = [4,5,1,9], val = 5 2输出: [4,1,9] 3解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -\u0026gt; 1 -\u0026gt; 9. 示例 2：\n1输入: head = [4,5,1,9], val = 1 2输出: [4,5,9] 3解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -\u0026gt; 5 -\u0026gt; 9. 限制 题目保证链表中节点的值互不相同 若使用 C 或 C++ 语言，你不需要 free 或 delete 被删除的节点 思路 简简单单删除节点。\n代码 1/** 2 * Definition for singly-linked list. 3 * struct ListNode { 4 * int val; 5 * ListNode *next; 6 * ListNode(int x) : val(x), next(NULL) {} 7 * }; 8 */ 9class Solution { 10public: 11 ListNode* deleteNode(ListNode* head, int val) { 12 if(head-\u0026gt;val == val) return head-\u0026gt;next; 13 ListNode *p = head; 14 while(p-\u0026gt;next){ 15 if(p-\u0026gt;next-\u0026gt;val == val){ 16 p-\u0026gt;next = p-\u0026gt;next-\u0026gt;next; 17 break; 18 } 19 p = p-\u0026gt;next; 20 } 21 return head; 22 } 23}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-18-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E8%8A%82%E7%82%B9/","summary":"删除链表的节点(剑指Offer-18) 题面 给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。 返回删除后的链表的头节点。 **","title":"剑指Offer-18 删除链表的节点"},{"content":"打印从1到最大的n位数(剑指Offer-17) 题面 输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。\n示例 示例 1：\n1输入: n = 1 2输出: [1,2,3,4,5,6,7,8,9] 限制 用返回一个整数列表来代替打印 n 为正整数 思路 简简单单for循环。\n代码 1class Solution { 2 int pow(int a, int b){ 3 int res = 1; 4 while(b){ 5 if(b\u0026amp;1) res*=a; 6 a *= a; 7 b \u0026gt;\u0026gt;= 1; 8 } 9 return res; 10 } 11public: 12 vector\u0026lt;int\u0026gt; printNumbers(int n) { 13 int last = pow(10,n)-1; 14 vector\u0026lt;int\u0026gt; ans(last); 15 for(int i=0; i\u0026lt;last; i++){ 16 ans[i] = i+1; 17 } 18 return ans; 19 } 20}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-17-%E6%89%93%E5%8D%B0%E4%BB%8E1%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/","summary":"打印从1到最大的n位数(剑指Offer-17) 题面 输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大","title":"剑指Offer-17 打印从1到最大的n位数"},{"content":"二进制中1的个数(剑指Offer-16) 题面 实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。不得使用库函数，同时不需要考虑大数问题。\n示例 示例 1：\n1输入：x = 2.00000, n = 10 2输出：1024.00000 示例 2：\n1输入：x = 2.10000, n = 3 2输出：9.26100 示例 3：\n1输入：x = 2.00000, n = -2 2输出：0.25000 3解释：2-2 = 1/22 = 1/4 = 0.25 限制 -100.0 \u0026lt; x \u0026lt; 100.0 -2^31 \u0026lt;= n \u0026lt;= 2^31-1 -10^4 \u0026lt;= x^n \u0026lt;= 10^4 思路 简简单单快速幂。\n代码 1class Solution { 2public: 3 double myPow(double x, int n) { 4 double res = 1.0; 5 long long m = n; 6 if(m\u0026lt;0){ 7 m=-m; x=1.0/x; 8 } 9 while(m){ 10 if(m\u0026amp;1) 11 res = res*x; 12 x = x*x; 13 m \u0026gt;\u0026gt;= 1; 14 } 15 return res; 16 } 17}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-16-%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/","summary":"二进制中1的个数(剑指Offer-16) 题面 实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。不得使用库函数，同时不需要考虑大数问题。 示例 示例 1：","title":"剑指Offer-16 数值的整数次方"},{"content":"二进制中1的个数(剑指Offer-15) 题面 请实现一个函数，输入一个整数（以二进制串形式），输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。\n示例 示例 1：\n1输入：00000000000000000000000000001011 2输出：3 3解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 \u0026#39;1\u0026#39;。 示例 2：\n1输入：00000000000000000000000010000000 2输出：1 3解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 \u0026#39;1\u0026#39;。 示例 3：\n1 输入：11111111111111111111111111111101 2 输出：31 3 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 \u0026#39;1\u0026#39;。 限制 1输入必须是长度为 32 的 二进制串 。 思路 n \u0026amp;= (n-1) 使n最后一位1变成0。\n代码 1class Solution { 2public: 3 int hammingWeight(uint32_t n) { 4 int res = 0; 5 while(n){ 6 res ++; 7 n \u0026amp;= n-1; 8 } 9 return res; 10 } 11}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-15-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/","summary":"二进制中1的个数(剑指Offer-15) 题面 请实现一个函数，输入一个整数（以二进制串形式），输出该数二进制表示中 1 的个数。例如，把 9 表示成二","title":"剑指Offer-15 二进制中1的个数"},{"content":"剪绳子II(剑指Offer-14.2) 题面 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n\u0026gt;1并且m\u0026gt;1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。\n答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。\n示例 示例 1：\n1输入: 2 2输出: 1 3解释: 2 = 1 + 1, 1 × 1 = 1 示例 2：\n1输入: 10 2输出: 36 3解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36 限制 12 \u0026lt;= n \u0026lt;= 1000 思路 同上题，取个模。\n代码 1class Solution { 2 long long fpow(long long a, long long b, long long mod){ 3 long long res = 1; 4 while(b){ 5 if(b\u0026amp;1) 6 res = res * a % mod; 7 a = a * a % mod; 8 b \u0026gt;\u0026gt;= 1; 9 } 10 return res % mod; 11 } 12public: 13 int cuttingRope(int n) { 14 if(n \u0026lt;= 3) return n-1; 15 int mod = 1000000007; 16 if(n % 3 == 0) return fpow(3, n/3, mod) % mod; 17 if(n % 3 == 1) return fpow(3, n/3-1, mod) * 4 % mod; 18 return fpow(3, n/3, mod) * 2 % mod; 19 } 20}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-14.2-%E5%89%AA%E7%BB%B3%E5%AD%90ii/","summary":"剪绳子II(剑指Offer-14.2) 题面 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n\u0026gt;1并且m\u0026gt;1）","title":"剑指Offer-14.2 剪绳子II"},{"content":"剪绳子(剑指Offer-14.1) 题面 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n\u0026gt;1并且m\u0026gt;1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。\n示例 示例 1：\n1输入: 2 2输出: 1 3解释: 2 = 1 + 1, 1 × 1 = 1 示例 2：\n1输入: 10 2输出: 36 3解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36 限制 12 \u0026lt;= n \u0026lt;= 58 思路 尽量分成长度为3的段，证明思路\n代码 1class Solution { 2 long long fpow(long long a, long long b){ 3 long long res = 1; 4 while(b){ 5 if(b\u0026amp;1) 6 res *= a; 7 a *= a; 8 b \u0026gt;\u0026gt;= 1; 9 } 10 return res; 11 } 12public: 13 int cuttingRope(int n) { 14 if(n \u0026lt;= 3) return n-1; 15 if(n % 3 == 0) return fpow(3, n/3); 16 if(n % 3 == 1) return fpow(3, n/3-1)*4; 17 return fpow(3, n/3)*2; 18 } 19}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-14.1-%E5%89%AA%E7%BB%B3%E5%AD%90/","summary":"剪绳子(剑指Offer-14.1) 题面 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n\u0026gt;1并且m\u0026gt;1），每","title":"剑指Offer-14.1 剪绳子"},{"content":"机器人的运动范围(剑指Offer-13) 题面 地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？\n示例 示例 1：\n1输入：m = 2, n = 3, k = 1 2输出：3 示例 2：\n1输入：m = 2, n = 3, k = 1 2输出：3 限制 1 \u0026lt;= n,m \u0026lt;= 100 0 \u0026lt;= k \u0026lt;= 20 思路 BFS即可\n代码 1class Solution { 2public: 3 int movingCount(int m, int n, int k) { 4 if(!k) return 1; 5 vector\u0026lt;vector\u0026lt;int\u0026gt; \u0026gt; vis(m, vector\u0026lt;int\u0026gt;(n, 0)); 6 7 queue\u0026lt;pair\u0026lt;int,int\u0026gt; \u0026gt; q; 8 q.push({0,0}); 9 10 int dx[2] = {0, 1}, dy[2] = {1, 0}; 11 int ans = vis[0][0] = 1; 12 13 while(!q.empty()){ 14 auto [x, y] = q.front(); 15 q.pop(); 16 17 for(int i=0; i\u0026lt;2; i++){ 18 int tx = dx[i]+x, ty = dy[i]+y; 19 if(tx\u0026lt;0 || tx\u0026gt;=m || ty\u0026lt;0 || ty\u0026gt;=n || vis[tx][ty] || get(tx)+get(ty)\u0026gt;k) 20 continue; 21 q.push({tx, ty}); 22 vis[tx][ty] = 1; 23 ans++; 24 } 25 } 26 return ans; 27 } 28private: 29 int get(int x){ 30 int t = 0; 31 while(x){ 32 t += x % 10; 33 x /= 10; 34 } 35 return t; 36 } 37}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-13-%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/","summary":"机器人的运动范围(剑指Offer-13) 题面 地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、","title":"剑指Offer-13 机器人的运动范围"},{"content":"矩阵中的路径(剑指Offer-12) 题面 请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。例如，在下面的3×4的矩阵中包含一条字符串“bfce”的路径（路径中的字母用加粗标出）。\n[[a,b,c,e], [s,f,c,s], [a,d,e,e]]\n但矩阵中不包含字符串“abfb”的路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入这个格子。\n示例 示例 1：\n1输入：board = [[\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;E\u0026#34;],[\u0026#34;S\u0026#34;,\u0026#34;F\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;S\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;E\u0026#34;,\u0026#34;E\u0026#34;]], word = \u0026#34;ABCCED\u0026#34; 2输出：true 示例 2：\n1输入：board = [[\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;],[\u0026#34;c\u0026#34;,\u0026#34;d\u0026#34;]], word = \u0026#34;abcd\u0026#34; 2输出：false 限制 1 \u0026lt;= board.length \u0026lt;= 200 1 \u0026lt;= board[i].length \u0026lt;= 200 思路 dfs即可。\n代码 1class Solution { 2public: 3 bool exist(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, string word) { 4 n = board.size(); 5 if(n \u0026lt;= 0) return false; 6 7 m = board[0].size(); 8 if(m \u0026lt;= 0) return false; 9 10 for(int i=0; i\u0026lt;n; i++){ 11 for(int j=0; j\u0026lt;m; j++){ 12 if(dfs(board, word, i, j, 0)) 13 return true; 14 } 15 } 16 return false; 17 } 18private: 19 int n, m; 20 bool dfs(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, string word, int i, int j, int k){ 21 if(i\u0026lt;0 || i\u0026gt;=n || j\u0026lt;0 || j\u0026gt;=m || board[i][j]!=word[k]) return false; 22 if(k == word.size()-1) return true; 23 24 board[i][j] = \u0026#39;\\0\u0026#39;; 25 bool ans = dfs(board, word, i+1, j, k+1) || dfs(board, word, i, j+1, k+1) || 26 dfs(board, word, i-1, j, k+1) || dfs(board, word, i, j-1, k+1); 27 board[i][j] = word[k]; 28 return ans; 29 } 30}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-12-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/","summary":"矩阵中的路径(剑指Offer-12) 题面 请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一","title":"剑指Offer-12 矩阵中的路径"},{"content":"旋转数组的最小数字(剑指Offer-11) 题面 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组[3,4,5,1,2] 为[1,2,3,4,5] 的一个旋转，该数组的最小值为1。\n示例 示例 1：\n1输入：[3,4,5,1,2] 2输出：1 示例 2：\n1输入：[2,2,2,0,1] 2输出：0 限制 无\n思路 二分，numbers[mid]与numbers[r]比较。\n无法与左端点比较进行二分，当i=0, j=4, mid=2时，以下情况都有 numbers[mid] \u0026gt; numbers[l]，而结果不同。 [1,2,3,4,5]， 答案x=0在mid左侧。 [3,4,5,1,2] ，答案x=1在mid右侧。\n代码 1class Solution { 2public: 3 int minArray(vector\u0026lt;int\u0026gt;\u0026amp; numbers) { 4 int l = 0, r = numbers.size()-1; 5 while(l \u0026lt; r){ 6 int mid = (l + r) / 2; 7 if(numbers[mid] \u0026lt; numbers[r]){ 8 r = mid; 9 }else if(numbers[mid] \u0026gt; numbers[r]){ 10 l = mid + 1; 11 }else{ 12 r = r - 1; 13 } 14 } 15 return numbers[l]; 16 } 17}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-11-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/","summary":"旋转数组的最小数字(剑指Offer-11) 题面 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个","title":"剑指Offer-11 旋转数组的最小数字"},{"content":"青蛙跳台阶问题(剑指Offer-10.2) 题面 一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。\n答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。\n示例 示例 1：\n1输入：n = 2 2输出：2 示例 2：\n1输入：n = 7 2输出：21 示例 3：\n1输入：n = 0 2输出：1 限制 10 \u0026lt;= n \u0026lt;= 100 思路 同【题解】剑指Offer-10.1 斐波那契数列，初始值不同，简单Fibonacci递推。\n代码 1class Solution { 2public: 3 int numWays(int n) { 4 int a[105] = {1, 1, 2}; 5 for(int i=3; i\u0026lt;=100; i++) 6 a[i] = (a[i-1] + a[i-2]) % 1000000007; 7 return a[n]; 8 } 9}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-10.2-%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6%E9%97%AE%E9%A2%98/","summary":"青蛙跳台阶问题(剑指Offer-10.2) 题面 一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。","title":"剑指Offer-10.2 青蛙跳台阶问题"},{"content":"斐波那契数列(剑指Offer-10.1) 题面 写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。斐波那契数列的定义如下：\n1F(0) = 0, F(1) = 1 2F(N) = F(N - 1) + F(N - 2), 其中 N \u0026gt; 1. 斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。\n答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。\n示例 示例 1：\n1输入：n = 2 2输出：1 示例 2：\n1输入：n = 5 2输出：5 限制 10 \u0026lt;= n \u0026lt;= 100 思路 简单Fibonacci递推。\n代码 1class Solution { 2public: 3 int fib(int n) { 4 int a[105] = {0, 1, 1}; 5 for(int i=3; i\u0026lt;=100; i++) 6 a[i] = (a[i-1] + a[i-2]) % 1000000007; 7 return a[n]; 8 } 9}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-10.1-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/","summary":"斐波那契数列(剑指Offer-10.1) 题面 写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。斐波那契数列的定","title":"剑指Offer-10.1 斐波那契数列"},{"content":"用两个栈实现队列(剑指Offer-09) 题面 用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )\n示例 示例 1：\n1输入： 2[\u0026#34;CQueue\u0026#34;,\u0026#34;appendTail\u0026#34;,\u0026#34;deleteHead\u0026#34;,\u0026#34;deleteHead\u0026#34;] 3[[],[3],[],[]] 4输出：[null,null,3,-1] 示例 2：\n1输入： 2[\u0026#34;CQueue\u0026#34;,\u0026#34;deleteHead\u0026#34;,\u0026#34;appendTail\u0026#34;,\u0026#34;appendTail\u0026#34;,\u0026#34;deleteHead\u0026#34;,\u0026#34;deleteHead\u0026#34;] 3[[],[],[5],[2],[],[]] 4输出：[null,-1,null,null,5,2] 限制 11 \u0026lt;= values \u0026lt;= 10000 2最多会对 appendTail、deleteHead 进行 10000 次调用 思路 使用两个栈模拟队列，st1只负责维护插入，当需要删除时，为了维护队列的先入先出，需要先将st1里的数据倒入空的st2，此时st2的栈顶相当于队列头。注意st2未空时，不可倒入st1的数据，会打乱顺序，应当直接弹出。\n代码 1class CQueue { 2public: 3 stack\u0026lt;int\u0026gt; st1, st2; 4 CQueue() { 5 while(!st1.empty()) st1.pop(); 6 while(!st2.empty()) st2.pop(); 7 } 8 9 void appendTail(int value) { 10 st1.push(value); 11 } 12 13 int deleteHead() { 14 if(st2.empty()){ 15 while(!st1.empty()){ 16 st2.push(st1.top()); 17 st1.pop(); 18 } 19 } 20 if(!st2.empty()){ 21 int ans = st2.top(); 22 st2.pop(); 23 return ans; 24 }else{ 25 return -1; 26 } 27 } 28}; 29 30/** 31 * Your CQueue object will be instantiated and called as such: 32 * CQueue* obj = new CQueue(); 33 * obj-\u0026gt;appendTail(value); 34 * int param_2 = obj-\u0026gt;deleteHead(); 35 */ ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-09-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/","summary":"用两个栈实现队列(剑指Offer-09) 题面 用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队","title":"剑指Offer-09 用两个栈实现队列"},{"content":"重建二叉树(剑指Offer-07) 题面 输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。\n示例 例如，给出\n1前序遍历 preorder = [3,9,20,15,7] 2中序遍历 inorder = [9,3,15,20,7] 返回如下的二叉树：\n3 / \\ 9 20 / \\ 15 7 限制 10 \u0026lt;= 节点个数 \u0026lt;= 5000 思路 经典题，给出先序中序建树。\n代码 1/** 2 * Definition for a binary tree node. 3 * struct TreeNode { 4 * int val; 5 * TreeNode *left; 6 * TreeNode *right; 7 * TreeNode(int x) : val(x), left(NULL), right(NULL) {} 8 * }; 9 */ 10class Solution { 11public: 12 TreeNode* solve(int l, int r, int rt, vector\u0026lt;int\u0026gt;\u0026amp; preorder, vector\u0026lt;int\u0026gt;\u0026amp; inorder){ 13 if(l \u0026gt; r) return NULL; 14 int i=l; 15 while(inorder[i]!=preorder[rt]) i++; 16 TreeNode *p = new TreeNode(preorder[rt]); 17 p-\u0026gt;left = solve(l, i-1, rt+1, preorder, inorder); 18 p-\u0026gt;right = solve(i+1, r, rt+1+i-l, preorder, inorder); 19 return p; 20 } 21 TreeNode* buildTree(vector\u0026lt;int\u0026gt;\u0026amp; preorder, vector\u0026lt;int\u0026gt;\u0026amp; inorder) { 22 if(preorder.size() == 0) return NULL; 23 return solve(0, preorder.size()-1, 0, preorder, inorder); 24 } 25}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-07-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/","summary":"重建二叉树(剑指Offer-07) 题面 输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复","title":"剑指Offer-07 重建二叉树"},{"content":"从尾到头打印链表(剑指Offer-06) 题面 输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。\n示例 1输入：head = [1,3,2] 2输出：[2,3,1] 限制 10 \u0026lt;= 链表长度 \u0026lt;= 10000 思路 简单遍历链表，然后reverse一下就好。\n代码 1/** 2 * Definition for singly-linked list. 3 * struct ListNode { 4 * int val; 5 * ListNode *next; 6 * ListNode(int x) : val(x), next(NULL) {} 7 * }; 8 */ 9class Solution { 10public: 11 vector\u0026lt;int\u0026gt; reversePrint(ListNode* head) { 12 vector\u0026lt;int\u0026gt; v; 13 ListNode *p = head; 14 15 while(p != NULL){ 16 v.push_back(p-\u0026gt;val); 17 p = p-\u0026gt;next; 18 } 19 20 reverse(v.begin(), v.end()); 21 return v; 22 } 23}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-06-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/","summary":"从尾到头打印链表(剑指Offer-06) 题面 输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。 示例 1输入：head = [1,3,2] 2输","title":"剑指Offer-06 从尾到头打印链表"},{"content":"替换空格(剑指Offer-05) 题面 请实现一个函数，把字符串 s 中的每个空格替换成\u0026quot;%20\u0026quot;。\n示例 1输入：s = \u0026#34;We are happy.\u0026#34; 2输出：\u0026#34;We%20are%20happy.\u0026#34; 限制 10 \u0026lt;= s 的长度 \u0026lt;= 10000 思路 resize一下，然后双指针逆序遍历。\n代码 1class Solution { 2public: 3 string replaceSpace(string s) { 4 int count = 0, len = s.size(); 5 for (char c : s) 6 count += (c == \u0026#39; \u0026#39;); 7 8 s.resize(len + 2 * count); 9 10 for(int i=len-1, j=s.size()-1; i\u0026lt;j; i--, j--) { 11 if (s[i] != \u0026#39; \u0026#39;) 12 s[j] = s[i]; 13 else { 14 s[j-2]=\u0026#39;%\u0026#39;, s[j-1]=\u0026#39;2\u0026#39;, s[j]=\u0026#39;0\u0026#39;; 15 j -= 2; 16 } 17 } 18 return s; 19 } 20}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-05-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/","summary":"替换空格(剑指Offer-05) 题面 请实现一个函数，把字符串 s 中的每个空格替换成\u0026quot;%20\u0026quot;。 示例 1输入：s = \u0026#34;We are happy.\u0026#34; 2输出","title":"剑指Offer-05 替换空格"},{"content":"二维数组中的查找(剑指Offer-04) 题面 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。\n示例 现有矩阵 matrix 如下：\n1[ 2 [1, 4, 7, 11, 15], 3 [2, 5, 8, 12, 19], 4 [3, 6, 9, 16, 22], 5 [10, 13, 14, 17, 24], 6 [18, 21, 23, 26, 30] 7] 给定 target = 5，返回 true。\n给定 target = 20，返回 false。\n限制 10 \u0026lt;= n \u0026lt;= 1000 20 \u0026lt;= m \u0026lt;= 1000 思路 从右上至左下找（或左下至右上），每次都能使查找范围减少一行或一列。时间复杂度O(n+m)。\n代码 1class Solution { 2public: 3 bool findNumberIn2DArray(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; matrix, int target) { 4 int n = matrix.size(); 5 if(n\u0026lt;=0) return false; 6 int m = matrix[0].size(); 7 if(m\u0026lt;=0) return false; 8 9 int i=0, j=m-1; 10 while(i\u0026lt;n \u0026amp;\u0026amp; j\u0026gt;=0) { 11 if(matrix[i][j] \u0026lt; target) 12 i++; 13 else if(matrix[i][j] \u0026gt; target) 14 j--; 15 else 16 return true; 17 } 18 return false; 19 } 20}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-04-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/","summary":"二维数组中的查找(剑指Offer-04) 题面 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序","title":"剑指Offer-04 二维数组中的查找"},{"content":"数组中重复的数字(剑指Offer-03) 题面 找出数组中重复的数字。\n在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。\n示例 1输入：[2, 3, 1, 0, 2, 5, 3] 2输出：2 或 3 限制 12 \u0026lt;= n \u0026lt;= 100000 思路 哈希表\n代码 1class Solution { 2public: 3 int a[100010] = {0}; 4 int findRepeatNumber(vector\u0026lt;int\u0026gt;\u0026amp; nums) { 5 int n = nums.size(); 6 for(int i=0; i\u0026lt;n; i++) { 7 if(a[nums[i]]++) 8 return(nums[i]); 9 } 10 return -1; 11 } 12}; ","permalink":"https://blog.lordash.de/posts/solution/%E5%89%91%E6%8C%87offer-03-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/","summary":"数组中重复的数字(剑指Offer-03) 题面 找出数组中重复的数字。 在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是","title":"剑指Offer-03 数组中重复的数字"},{"content":"Radix(PATA-1010) 题面 Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is yes, if 6 is a decimal number and 110 is a binary number.\nNow for any pair of positive integers N1 and N2, your task is to find the radix of one number while that of the other is given.\n输入 Each input file contains one test case. Each case occupies a line which contains 4 positive integers:\n1N1 N2 tag radix Here N1 and N2 each has no more than 10 digits. A digit is less than its radix and is chosen from the set { 0-9, a-z } where 0-9 represent the decimal numbers 0-9, and a-z represent the decimal numbers 10-35. The last number radix is the radix of N1 if tag is 1, or of N2 if tag is 2.\n输出 For each test case, print in one line the radix of the other number so that the equation N1 = N2 is true. If the equation is impossible, print Impossible. If the solution is not unique, output the smallest possible radix.\n样例输入1 16 110 1 10 样例输出1 12 样例输入2 11 ab 1 2 样例输出2 1Impossible 提示 无\n思路 二分。\n代码 1const int inf = 0x3f3f3f3f; 2const int mxn = 1e6 + 5; 3 4char a[mxn], b[mxn]; 5 6LL getnum(char *s, LL r){ 7 LL ans = 0; 8 for(; *s; s++) 9 ans = ans * r + (*s - (*s \u0026lt;= \u0026#39;9\u0026#39; ? \u0026#39;0\u0026#39; : \u0026#39;a\u0026#39;-10)); 10 return ans; 11} 12 13LL getans(char *s, char *t, LL r){ 14 char mx = *max_element(t, t+strlen(t)); 15 LL l = mx - (mx \u0026lt;= \u0026#39;9\u0026#39; ? \u0026#39;0\u0026#39; : \u0026#39;a\u0026#39;-10) + 1; 16 LL f=0, at = getnum(s, r); r = max(l, at); 17 while(l \u0026lt;= r){ 18 LL m = (l + r) / 2; 19 LL bt = getnum(t, m); 20 if(bt \u0026lt; 0 || bt \u0026gt; at){ 21 r = m - 1; 22 }else if(at == bt){ 23 f = m; 24 break; 25 }else{ 26 l = m + 1; 27 } 28 } 29 return f; 30} 31 32int main() 33{ 34 LL t, r; 35 scanf(\u0026#34;%s %s %lld %lld\u0026#34;, a, b, \u0026amp;t, \u0026amp;r); 36 LL f = (t==1) ? getans(a, b, r) : getans(b, a, r); 37 if(f){ 38 printf(\u0026#34;%lld\\n\u0026#34;, f); 39 }else{ 40 printf(\u0026#34;Impossible\\n\u0026#34;); 41 } 42 43 return 0; 44} ","permalink":"https://blog.lordash.de/posts/solution/pata-1010-radix/","summary":"Radix(PATA-1010) 题面 Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is yes, if 6 is a decimal number and 110 is a binary number. Now for any pair of positive integers N1 and N2, your task is to find the radix of one number while that of the other is given. 输入 Each input file","title":"PATA-1010 Radix"},{"content":"Product of Polynomials(PATA-1009) 题面 This time, you are supposed to find A×B where A and B are two polynomials.\n输入 Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:\nK N1 aN1 N2 aN2 \u0026hellip; NK aNK\nwhere K is the number of nonzero terms in the polynomial, Ni and aNi (i=1,2,⋯,K) are the exponents and coefficients, respectively. It is given that 1≤K≤10, 0≤NK\u0026lt;⋯\u0026lt;N2\u0026lt;N1≤1000.\n输出 For each test case you should output the product of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate up to 1 decimal place.\n样例输入 12 1 2.4 0 3.2 22 2 1.5 1 0.5 样例输出 13 3 3.6 2 6.0 1 1.6 提示 无\n思路 类似【题解】PATA-1002 A+B for Polynomials，修改一下。水题。\n代码 1#define Sg(u) ((u)\u0026gt;eps?1:((u)\u0026lt;-eps?-1:0)) 2#define Abs(u) (Sg(u)\u0026gt;=0?(u):-(u)) 3#define Ze(u) (!Sg(u)) 4#define Eq(u,v) (Ze((u)-(v))) 5const double eps = 1e-6; 6double a[2005], b[2005]; 7 8int main() 9{ 10 int an; scanf(\u0026#34;%d\u0026#34;, \u0026amp;an); 11 for(int i=0; i\u0026lt;an; i++){ 12 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 13 scanf(\u0026#34;%lf\u0026#34;, \u0026amp;b[n]); 14 } 15 16 int bn; scanf(\u0026#34;%d\u0026#34;, \u0026amp;bn); 17 for(int i=0; i\u0026lt;bn; i++){ 18 int n; double x; 19 scanf(\u0026#34;%d %lf\u0026#34;, \u0026amp;n, \u0026amp;x); 20 for(int j=0; j\u0026lt;=2000; j++) 21 if(Sg(b[j])) 22 a[n+j] += x * b[j]; 23 } 24 25 int ans = 0; 26 for(int i=2000; i\u0026gt;=0; i--){ 27 if(Sg(a[i])) 28 ans++; 29 } 30 printf(\u0026#34;%d\u0026#34;, ans); 31 32 for(int i=2000; i\u0026gt;=0; i--){ 33 if(Sg(a[i])) 34 printf(\u0026#34; %d %.1lf\u0026#34;, i, a[i]); 35 } 36 printf(\u0026#34;\\n\u0026#34;); 37 38 return 0; 39} ","permalink":"https://blog.lordash.de/posts/solution/pata-1009-product-of-polynomials/","summary":"Product of Polynomials(PATA-1009) 题面 This time, you are supposed to find A×B where A and B are two polynomials. 输入 Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: K N1 aN1 N2 aN2 \u0026hellip; NK aNK where K is the number of nonzero terms in the polynomial, Ni and aNi (i=","title":"PATA-1009 Product of Polynomials"},{"content":"Elevator(PATA-1008) 题面 The highest building in our city has only one elevator. A request list is made up with N positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.\nFor a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.\n输入 Each input file contains one test case. Each case contains a positive integer N, followed by N positive numbers. All the numbers in the input are less than 100.\n输出 For each test case, print the total time on a single line.\n样例输入 13 2 3 1 样例输出 141 提示 无\n思路 电梯初始在0层，每上升一层花费6s，下降一层花费4s，停留花费5s，给你要停的楼层序列，求总耗时。水题。\n代码 1int main() 2{ 3 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 4 5 int ans = 0, l = 0, t; 6 for(int i=0; i\u0026lt;n; i++){ 7 scanf(\u0026#34;%d\u0026#34;, \u0026amp;t); 8 if(t \u0026gt; l){ 9 ans += (t-l) * 6 + 5; 10 }else{ 11 ans += (l-t) * 4 + 5; 12 } 13 l = t; 14 } 15 printf(\u0026#34;%d\\n\u0026#34;, ans); 16 17 return 0; 18} ","permalink":"https://blog.lordash.de/posts/solution/pata-1008-elevator/","summary":"Elevator(PATA-1008) 题面 The highest building in our city has only one elevator. A request list is made up with N positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop. For a given request list,","title":"PATA-1008 Elevator"},{"content":"Maximum Subsequence Sum(PATA-1007) 题面 Given a sequence of K integers { N1, N2, \u0026hellip;, NK }. A continuous subsequence is defined to be { Ni, Ni+1, \u0026hellip;, Nj } where 1≤i≤j≤K. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.\nNow you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence.\n输入 Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer K (≤10000). The second line contains K numbers, separated by a space.\n输出 For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case). If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.\n样例输入 110 2-10 1 2 3 4 -5 -23 3 7 -21 样例输出 110 1 4 提示 无\n思路 基础DP，最大子列和。\n代码 1const int mxn = 1e4 + 5; 2int a[mxn]; 3 4int main() 5{ 6 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 7 8 int ans=-1, t=0, tl=0, l, r; 9 for(int i=0; i\u0026lt;n; i++){ 10 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); 11 t += a[i]; 12 if(t \u0026lt; 0){ 13 t = 0; 14 tl = i+1; 15 }else if(t \u0026gt; ans){ 16 ans = t; 17 l = tl; 18 r = i; 19 } 20 } 21 if(ans \u0026lt; 0) 22 ans = 0, l = 0, r = n-1; 23 printf(\u0026#34;%d %d %d\\n\u0026#34;, ans, a[l], a[r]); 24 25 return 0; 26} ","permalink":"https://blog.lordash.de/posts/solution/pata-1007-maximum-subsequence-sum/","summary":"Maximum Subsequence Sum(PATA-1007) 题面 Given a sequence of K integers { N1, N2, \u0026hellip;, NK }. A continuous subsequence is defined to be { Ni, Ni+1, \u0026hellip;, Nj } where 1≤i≤j≤K. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is","title":"PATA-1007 Maximum Subsequence Sum"},{"content":"Sign In and Sign Out(PATA-1006) 题面 At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door. Given the records of signing in\u0026rsquo;s and out\u0026rsquo;s, you are supposed to find the ones who have unlocked and locked the door on that day.\n输入 Each input file contains one test case. Each case contains the records for one day. The case starts with a positive integer M, which is the total number of records, followed by M lines, each in the format:\n1ID_number Sign_in_time Sign_out_time where times are given in the format HH:MM:SS, and ID_number is a string with no more than 15 characters.\n输出 For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day. The two ID numbers must be separated by one space.\nNote: It is guaranteed that the records are consistent. That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.\n样例输入 13 2CS301111 15:30:28 17:00:10 3SC3021234 08:00:00 11:25:25 4CS301133 21:45:00 21:58:40 样例输出 1SC3021234 CS301133 提示 无\n思路 比大小的水题。RE就是数组开小了。\n代码 1char name[20], in[10], out[10]; 2char locked[20]=\u0026#34;\u0026#34;, unlock[20]=\u0026#34;\u0026#34;, mx[10]=\u0026#34;00:00:00\u0026#34;, mi[10]=\u0026#34;99:99:99\u0026#34;; 3 4int main() 5{ 6 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 7 for(int i=0; i\u0026lt;n; i++){ 8 scanf(\u0026#34;%s %s %s\u0026#34;, name, in, out); 9 if(strcmp(mi, in) \u0026gt; 0){ 10 strcpy(mi, in); 11 strcpy(unlock, name); 12 } 13 if(strcmp(mx, out) \u0026lt; 0){ 14 strcpy(mx, out); 15 strcpy(locked, name); 16 } 17 } 18 19 printf(\u0026#34;%s %s\\n\u0026#34;, unlock, locked); 20 return 0; 21} ","permalink":"https://blog.lordash.de/posts/solution/pata-1006-sign-in-and-sign-out/","summary":"Sign In and Sign Out(PATA-1006) 题面 At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door. Given the records of signing in\u0026rsquo;s and out\u0026rsquo;s, you are supposed to find the ones who have unlocked and locked the door on that day. 输入 Each input file contains one test","title":"PATA-1006 Sign In and Sign Out"},{"content":"Spell It Right(PATA-1005) 题面 Given a non-negative integer N, your task is to compute the sum of all the digits of N, and output every digit of the sum in English.\n输入 Each input file contains one test case. Each case occupies one line which contains an N (≤10^100).\n输出 For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.\n样例输入 112345 样例输出 1one five 提示 无\n思路 水题，每一位加起来输出即可。\n代码 1const int inf = 0x3f3f3f3f; 2const int mxn = 1e3 + 5; 3 4char s[mxn], p[][10] = { 5 \u0026#34;zero\u0026#34;, \u0026#34;one\u0026#34;, \u0026#34;two\u0026#34;, \u0026#34;three\u0026#34;, \u0026#34;four\u0026#34;, \u0026#34;five\u0026#34;, \u0026#34;six\u0026#34;, \u0026#34;seven\u0026#34;, \u0026#34;eight\u0026#34;, \u0026#34;nine\u0026#34; 6}; 7 8int main() 9{ 10 scanf(\u0026#34;%s\u0026#34;, s); 11 int n = strlen(s), ans = 0; 12 13 for(int i=0; i\u0026lt;n; i++){ 14 ans += s[i]-\u0026#39;0\u0026#39;; 15 } 16 sprintf(s, \u0026#34;%d\u0026#34;, ans); 17 n = strlen(s); 18 19 for(int i=0; i\u0026lt;n; i++){ 20 if(i) printf(\u0026#34; \u0026#34;); 21 printf(\u0026#34;%s\u0026#34;, p[s[i]-\u0026#39;0\u0026#39;]); 22 } 23 printf(\u0026#34;\\n\u0026#34;); 24 return 0; 25} ","permalink":"https://blog.lordash.de/posts/solution/pata-1005-spell-it-right/","summary":"Spell It Right(PATA-1005) 题面 Given a non-negative integer N, your task is to compute the sum of all the digits of N, and output every digit of the sum in English. 输入 Each input file contains one test case. Each case occupies one line which contains an N (≤10^100). 输出 For each test case, output in one line","title":"PATA-1005 Spell It Right"},{"content":"Counting Leaves(PATA-1004) 题面 A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members who have no child.\n输入 Each input file contains one test case. Each case starts with a line containing 0\u0026lt;N\u0026lt;100, the number of nodes in a tree, and M (\u0026lt;N), the number of non-leaf nodes. Then M lines follow, each in the format:\n1ID K ID[1] ID[2] ... ID[K] where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID\u0026rsquo;s of its children. For the sake of simplicity, let us fix the root ID to be 01.\nThe input ends with N being 0. That case must NOT be processed.\n输出 For each test case, you are supposed to count those family members who have no child for every seniority level starting from the root. The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.\nThe sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child. Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node. Then we should output 0 1 in a line.\n样例输入 12 1 201 1 02 样例输出 10 1 提示 无\n思路 给你一棵树，求每一层叶子节点的个数。\n开个数组保存，然后dfs一下，到叶子节点就加一。\n代码 1const int inf = 0x3f3f3f3f; 2const int mxn = 1e3 + 5; 3 4vector\u0026lt;int\u0026gt; a[mxn]; 5int num[mxn]; 6 7void dfs(int rt, int \u0026amp;d, int h){ 8 d = max(d, h); 9 if(a[rt].size() == 0){ 10 num[h]++; 11 return ; 12 } 13 for(int i=0; i\u0026lt;a[rt].size(); i++){ 14 dfs(a[rt][i], d, h+1); 15 } 16} 17 18int main() 19{ 20 int n, m; 21 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 22 23 for(int i=0; i\u0026lt;m; i++){ 24 int f, k, s; 25 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;f, \u0026amp;k); 26 while(k--){ 27 scanf(\u0026#34;%d\u0026#34;, \u0026amp;s); 28 a[f].push_back(s); 29 } 30 } 31 int d = 0; 32 dfs(1, d, 0); 33 34 for(int i=0; i\u0026lt;=d; i++){ 35 if(i) printf(\u0026#34; \u0026#34;); 36 printf(\u0026#34;%d\u0026#34;, num[i]); 37 } 38 printf(\u0026#34;\\n\u0026#34;); 39 return 0; 40} ","permalink":"https://blog.lordash.de/posts/solution/pata-1004-counting-leaves/","summary":"Counting Leaves(PATA-1004) 题面 A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members who have no child. 输入 Each input file contains one test case. Each case starts with a line containing 0\u0026lt;N\u0026lt;100, the number of nodes in a tree, and M (\u0026lt;N), the number of non-leaf nodes. Then M lines follow, each in the format: 1ID K ID[1] ID[2]","title":"PATA-1004 Counting Leaves"},{"content":"Emergency(PATA-1003) 题面 As an emergency rescue team leader of a city, you are given a special map of your country. The map shows several scattered cities connected by some roads. Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map. When there is an emergency call to you from some other city, your job is to lead your men to the place as quickly as possible, and at the mean time, call up as many hands on the way as possible.\n输入 Each input file contains one test case. For each test case, the first line contains 4 positive integers: N (≤500) - the number of cities (and the cities are numbered from 0 to N−1), M - the number of roads, C1 and C2 - the cities that you are currently in and that you must save, respectively. The next line contains N integers, where the i-th integer is the number of rescue teams in the i-th city. Then M lines follow, each describes a road with three integers c1, c2 and L, which are the pair of cities connected by a road and the length of that road, respectively. It is guaranteed that there exists at least one path from C1 to C2.\n输出 For each test case, print in one line two numbers: the number of different shortest paths between C1 and C2, and the maximum amount of rescue teams you can possibly gather. All the numbers in a line must be separated by exactly one space, and there is no extra space allowed at the end of a line.\n样例输入 15 6 0 2 21 2 1 5 3 30 1 1 40 2 2 50 3 1 61 2 1 72 4 1 83 4 1 样例输出 12 4 提示 无\n思路 给你一个连通图，及其点权和边权。求起点c1到终点c2的最短路径数量，以及最短路径上点权最大和。\n跑Dijkstra，在$dis[u]+w \\le dis[v]$的时候，分类讨论，更新最短路径数量和点权最大和。\n代码 1const int inf = 0x3f3f3f3f; 2const int mxn = 1e3 + 5; 3 4struct E { 5 int to, next, w; 6}e[mxn]; 7 8int H[mxn], tot; 9 10void add(int from, int to, int w){ 11 e[tot] = {to, H[from], w}; 12 H[from] = tot++; 13} 14 15void graph_init(int n) 16{ 17 for(int i=0; i\u0026lt;n; i++) 18 H[i] = -1; 19 tot = 0; 20} 21 22int dis[mxn], num[mxn], man[mxn]; 23bool vis[mxn]; 24priority_queue\u0026lt;pair\u0026lt;int, int\u0026gt;, vector\u0026lt;pair\u0026lt;int, int\u0026gt; \u0026gt;, greater\u0026lt;pair\u0026lt;int, int\u0026gt; \u0026gt; \u0026gt; q; 25 26int t[mxn]; 27 28void dijkstra_init(int n) 29{ 30 for(int i=0; i\u0026lt;n; i++){ 31 dis[i] = inf; 32 man[i] = vis[i] = 0; 33 } 34} 35 36void dijkstra(int s, int n) 37{ 38 num[s] = 1; man[s] = t[s]; 39 q.push({dis[s]=0, s}); 40 while(!q.empty()){ 41 int u = q.top().second; q.pop(); 42 if(vis[u]) continue; 43 vis[u] = 1; 44 for(int i=H[u]; ~i; i=e[i].next){ 45 int v=e[i].to, w=e[i].w; 46 if(!vis[v] \u0026amp;\u0026amp; dis[u]+w \u0026lt; dis[v]){ 47 dis[v] = dis[u]+w; 48 q.push({dis[v], v}); 49 num[v] = num[u]; 50 man[v] = max(man[v], man[u]+t[v]); 51 } 52 else if(!vis[v] \u0026amp;\u0026amp; dis[u]+w == dis[v]){ 53 num[v] += num[u]; 54 man[v] = max(man[v], man[u]+t[v]); 55 } 56 } 57 } 58} 59 60int main() 61{ 62 int n, m, c1, c2; 63 scanf(\u0026#34;%d %d %d %d\u0026#34;, \u0026amp;n, \u0026amp;m, \u0026amp;c1, \u0026amp;c2); 64 65 for(int i=0; i\u0026lt;n; i++) 66 scanf(\u0026#34;%d\u0026#34;, \u0026amp;t[i]); 67 68 graph_init(n); 69 for(int i=0; i\u0026lt;m; i++){ 70 int u, v, w; 71 scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;u, \u0026amp;v, \u0026amp;w); 72 add(u, v, w); 73 add(v, u, w); 74 } 75 76 dijkstra_init(n); 77 dijkstra(c1, n); 78 79 printf(\u0026#34;%d %d\\n\u0026#34;, num[c2], man[c2]); 80 return 0; 81} ","permalink":"https://blog.lordash.de/posts/solution/pata-1003-emergency/","summary":"Emergency(PATA-1003) 题面 As an emergency rescue team leader of a city, you are given a special map of your country. The map shows several scattered cities connected by some roads. Amount of rescue teams in each city and the length of each road between any pair of cities are marked on the map. When there is an emergency call to you from some other city, your job is to","title":"PATA-1003 Emergency"},{"content":"简介 Johnson算法是求解多源最短路的算法之一，核心操作是re-weight，适用于不包含负环（负权回路）的图。时间复杂度$O(nm+nmlogm)$。\nJohnson算法 全源最短路常用方法是Floyd算法，时间复杂度$O(n^{3})$。当然我们也可以对每个顶点跑单源最短路。如果对每个顶点求一次Bellman-Ford算法，时间复杂度是$O(n^{2}m)$，似乎不如Floyd算法。如果是对每个顶点求一次Dijkstra算法，时间复杂度是$O(nm+nmlogm)$，看起来优于Floyd算法了。但是如何去除负边权的影响呢？\n考虑一下直接把所有边权加个正数，但是显然不满足原图性质了：\n这里提出一个re-weight操作，首先加上一个源点，并使其与所有顶点连通，新边权赋值为0，如下图：\n然后以新加顶点为源，跑Bellman-Ford算法，求出到其它顶点的最短路：\n记录下最短路径长度h[] = {0, -3, 0, 0}，删除刚刚新增加的结点。然后对原图边权进行处理，使用以下方法更新边权：$w\u0026rsquo;(u, v) = w(u, v) + (h[u] - h[v])$。\n这时，负边权的影响就被消除了，可以愉快的使用Dijkstra算法了。（懒一下，正确性请自行证明）。\n模板 1const int inf = 0x3f3f3f3f; 2const int mxn = 1e3 + 5; 3 4struct E { 5 int to, next, w; 6} e[mxn]; 7 8int H[mxn], tot; 9 10void add(int from, int to, int w) { 11 e[tot] = {to, H[from], w}; 12 H[from] = tot++; 13} 14 15void graph_init(int n) 16{ 17 for(int i=1; i\u0026lt;=n; i++) 18 H[i] = -1; 19 tot = 0; 20} 21 22int h[mxn], num[mxn]; 23bool vis[mxn]; 24queue\u0026lt;int\u0026gt; q; 25 26void spfa_init(int n) 27{ 28 for(int i=1; i\u0026lt;=n; i++){ 29 h[i] = inf; 30 num[i] = 0; 31 } 32} 33 34int spfa(int s, int n) 35{ 36 h[s] = 0; q.push(s); 37 num[s] = vis[s] = 1; 38 while(!q.empty()) 39 { 40 int u = q.front(); q.pop(); vis[u] = 0; 41 for(int i=H[u]; ~i; i=e[i].next){ 42 int v = e[i].to, w = e[i].w; 43 if(h[u]+w \u0026lt; h[v]){ 44 h[v] = h[u]+w; 45 if(!vis[v]){ 46 q.push(v), vis[v] = 1; 47 if(++num[v] \u0026gt; n) return -1; 48 } 49 } 50 } 51 } 52 return 0; 53} 54 55int dis[mxn]; 56priority_queue\u0026lt;pair\u0026lt;int, int\u0026gt;, vector\u0026lt;pair\u0026lt;int, int\u0026gt; \u0026gt;, greater\u0026lt;pair\u0026lt;int, int\u0026gt; \u0026gt; \u0026gt; pq; 57 58void dijkstra_init(int n) 59{ 60 for(int i=1; i\u0026lt;=n; i++){ 61 vis[i] = 0; 62 dis[i] = inf; 63 } 64} 65 66void dijkstra(int s, int n) 67{ 68 pq.push({dis[s]=0, s}); 69 while(!pq.empty()){ 70 int u = pq.top().second; pq.pop(); 71 if(vis[u]) continue; 72 vis[u] = 1; 73 for(int i=H[u]; ~i; i=e[i].next){ 74 int v=e[i].to, w=e[i].w; 75 if(!vis[v] \u0026amp;\u0026amp; dis[u]+w \u0026lt; dis[v]){ 76 dis[v] = dis[u]+w; 77 pq.push({dis[v], v}); 78 } 79 } 80 } 81} 82 83int DIS[mxn][mxn]; 84 85int main() 86{ 87 int n, m; 88 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 89 graph_init(n); 90 91 for(int i=1; i\u0026lt;=m; i++) 92 { 93 int u, v, w; 94 scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;u, \u0026amp;v, \u0026amp;w); 95 add(u, v, w); 96 } 97 98 for(int i=1; i\u0026lt;=n; i++) 99 add(0, i, 0); 100 101 spfa_init(n); 102 if(spfa(0, n) == -1) 103 { 104 printf(\u0026#34;包含负权回路\\n\u0026#34;); 105 } 106 else 107 { 108 for(int u=1; u\u0026lt;=n; u++){ 109 for(int i=H[u]; ~i; i=e[i].next){ 110 e[i].w += h[u] - h[e[i].to]; 111 } 112 } 113 114 for(int i=1; i\u0026lt;=n; i++){ 115 dijkstra_init(n); 116 dijkstra(i, n); 117 for(int j=1; j\u0026lt;=n; j++){ 118 DIS[i][j] = dis[j] - h[i] + h[j]; 119 printf(\u0026#34;%d \u0026#34;, DIS[i][j]); 120 } 121 printf(\u0026#34;\\n\u0026#34;); 122 } 123 } 124 125 return 0; 126} 127 128 129/* 130Sample Input: 131 1324 5 1331 2 -3 1342 3 2 1351 4 3 1362 3 4 1373 4 1 138 139 140Sample Output: 141 1420 -3 -1 0 1431061109570 0 2 3 1441061109568 1061109565 0 1 1451061109567 1061109564 1061109566 0 146 147*/ ","permalink":"https://blog.lordash.de/posts/algorithm/johnson/","summary":"简介 Johnson算法是求解多源最短路的算法之一，核心操作是re-weight，适用于不包含负环（负权回路）的图。时间复杂度$O(nm+nm","title":"Johnson"},{"content":"简介 Floyd-Warshall算法是求解多源最短路的算法之一，核心思想是动态规划，适用于不包含负环（负权回路）的图。时间复杂度$O(n^{3})$，空间复杂度$O(n^{2})$。\nFloyd-Warshall算法 对于任何一个点而言，i到j的最短距离不外乎i到j经过k和不经过k两种可能，所以可以令$k=1,2,3,\\ldots,n$，检查$dis(i, j)$与$dis(i, k)+dis(k, j)$的大小，在此$dis(i, k)$与$dis(k, j)$分别是目前为止所知的i到k与k到j的最短距离，因此$dis(i, k)+dis(k, j)$就是i到j经过k的最短距离。\n所以，若有$dis(i, j) \\gt dis(i, k)+dis(k, j)$，就表示从i出发经过k再到j的距离要比原来的i到j距离短，自然把i到j的距离$dis(i, j)$更新为$dis(i, k)+dis(k, j)$，更新完后$dis(i, j)$就是目前的i到j的最短距离。重复这一过程，最后当遍历完k时，$dis(i, j)$里面存放的就是i到j之间的最短距离了。\n我们定义数组$dp[k][x][y]$表示只允许经过结点1到k，结点x到结点y的最短路径长度，那么状态转移方程就是$dp[k][x][y] = min(dp[k-1][x][y], dp[k-1][x][k]+dp[k-1][k][y])$，可以发现第一维是没有用的，于是直接改成$dp[x][y] = min(dp[x][y], dp[x][k]+dp[k][y])$。\n代码实现很简单，不过要注意循环的嵌套循序，k作为阶段，枚举时的循环要放在最外层：\n1void floyd(int n) 2{ 3 for(int k=1; k\u0026lt;=n; k++) 4 for(int i=1; i\u0026lt;=n; i++) 5 for(int j=1; j\u0026lt;=n; j++) 6 g[i][j] = min(g[i][j], g[i][k]+g[k][j]); 7} *传递闭包 Floyd算法不仅可以求最短路，也可以维护关系求传递闭包。建立邻接矩阵$f[i][j]$表示i和j是否有关系，跑一遍floyd，然后检查$f[i][j]\u0026amp;f[j][i]$是否为1。下面给出bitset优化版本，时间复杂度$O(\\frac{n^{3}}{w})$。\n1// std::bitset\u0026lt;SIZ\u0026gt; f[SIZ]; 2void floyd(int n) 3{ 4 for(int k=1; k\u0026lt;=n; k++) 5 for(int i=1; i\u0026lt;=n; i++) 6 if(f[i][k]) f[i] = f[i] | f[k]; 7} 模板 1const int inf = 0x3f3f3f3f; 2const int mxn = 1e3 + 5; 3 4int g[mxn][mxn], pre[mxn][mxn]; 5 6void graph_init(int n) 7{ 8 for(int i=1; i\u0026lt;=n; i++){ 9 for(int j=1; j\u0026lt;=n; j++) 10 g[i][j] = inf; 11 g[i][i] = 0; 12 } 13} 14 15void floyd_init(int n) 16{ 17 for(int i=1; i\u0026lt;=n; i++){ 18 for(int j=1; j\u0026lt;= n; j++){ 19 pre[i][j] = (g[i][j]==inf ? -1 : j); 20 } 21 } 22} 23 24void floyd(int n) 25{ 26 for(int k=1; k\u0026lt;=n; k++) 27 for(int i=1; i\u0026lt;=n; i++) 28 for(int j=1; j\u0026lt;=n; j++){ 29 if(g[i][k]+g[k][j] \u0026lt; g[i][j]){ 30 g[i][j] = g[i][k]+g[k][j]; 31 pre[i][j] = pre[i][k]; 32 } 33 } 34} 35 36int main() 37{ 38 int n, m; 39 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 40 graph_init(n); 41 42 for(int i=0; i\u0026lt;m; i++) 43 { 44 int u, v, w; 45 scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;u, \u0026amp;v, \u0026amp;w); 46 g[u][v] = w; 47 } 48 floyd_init(n); 49 floyd(n); 50 51 for(int i=1; i\u0026lt;=n; i++){ 52 for(int j=1; j\u0026lt;=n; j++) 53 printf(\u0026#34;%d \u0026#34;, g[i][j]); 54 printf(\u0026#34;\\n\u0026#34;); 55 } 56 57 for(int i=1; i\u0026lt;=n; i++){ 58 for(int j=1; j\u0026lt;=n; j++) 59 printf(\u0026#34;%d \u0026#34;, pre[i][j]); 60 printf(\u0026#34;\\n\u0026#34;); 61 } 62 63 return 0; 64} 65 66/* 67Sample Input: 68 694 5 701 2 2 711 3 4 722 4 1 733 2 1 743 4 8 75 76Sample Output: 77 780 2 4 3 791061109567 0 1061109567 1 801061109567 1 0 2 811061109567 1061109567 1061109567 0 821 2 3 2 83-1 2 -1 4 84-1 2 3 2 85-1 -1 -1 4 86 87*/ ","permalink":"https://blog.lordash.de/posts/algorithm/floyd/","summary":"简介 Floyd-Warshall算法是求解多源最短路的算法之一，核心思想是动态规划，适用于不包含负环（负权回路）的图。时间复杂度$O(n^{","title":"Floyd-Warshall"},{"content":"简介 Bellman-Ford算法是求解单源最短路的算法之一，适用于可包含负边权的有向和无向图，可以判断是否包含负环（注意，如果是包含负权回路则不存在最短路问题）。时间复杂度$O(nm)$。\nBellman-Ford算法 因为最短路径上最多有n-1条边，所以Bellman-Ford算法最多有n-1个阶段。在每一个阶段，我们对每一条边都要执行松弛操作。其实每实施一次松弛操作，就会有一些顶点已经求得其最短路，即这些顶点的最短路的“估计值”变为“确定值”。此后这些顶点的最短路的值就会一直保持不变，不再受后续松弛操作的影响(但是，每次还是会判断是否需要松弛)。在前k个阶段结束后，就已经找出了从源点出发“最多经过k条边”到达各个顶点的最短路。直到进行完n-1个阶段后，便得出了最多经过n-1条边的最短路。\n核心代码如下：\n1int bellman(int s, int n, int m) 2{ 3 dis[s] = 0; 4 for(int k=1; k\u0026lt;n; k++){ 5 for(int i=1; i\u0026lt;=m; i++){ 6 dis[v[i]] = min(dis[v[i]], dis[u[i]]+w[i]); 7 } 8 } 9 return 0; 10} 如果在n-1次松弛之后，还有可以进行松弛的边，那么就存在负环（负权回路）：\n1int bellman(int s, int n, int m) 2{ 3 dis[s] = 0; 4 for(int k=1; k\u0026lt;n; k++){ 5 for(int i=1; i\u0026lt;=m; i++){ 6 if(dis[u[i]]+w[i] \u0026lt; dis[v[i]]){ 7 dis[v[i]] = dis[u[i]]+w[i]; 8 pre[v[i]] = u[i]; 9 } 10 } 11 } 12 for(int i=1; i\u0026lt;=m; i++){ 13 if(dis[u[i]]+w[i] \u0026lt; dis[v[i]]){ 14 return -1; 15 } 16 } 17 return 0; 18} SPFA SPFA是Bellman-Ford算法的队列优化，核心思想，只有那些在前一遍松弛中改变了距离估计值的点，才可能引起它们的邻接点的距离估计值的改变。为什么队列为空就不改变了呢？就是因为要到下一点必须经过它的前一个邻接点。\n设立一个先进先出的队列q用来保存待优化的结点，优化时每次取出队首结点u，并且用u点当前的最短路径估计值对离开u点所指向的结点v进行松弛操作，如果v点的最短路径估计值有所调整，且v点不在当前的队列中，就将v点放入队尾。这样不断从队列中取出结点来进行松弛操作，直至队列空为止。\n核心代码如下：\n1int spfa(int s, int n) 2{ 3 dis[s] = 0; vis[s] = 1; q.push(s); 4 while(!q.empty()) 5 { 6 int u = q.front(); q.pop(); vis[u] = 0; 7 for(int i=H[u]; ~i; i=e[i].next){ 8 int v = e[i].to, w = e[i].w; 9 if(dis[u]+w \u0026lt; dis[v]){ 10 dis[v] = dis[u]+w; 11 if(!vis[v]) q.push(v), vis[v] = 1; 12 } 13 } 14 } 15 return 0; 16} 其它优化 除了队列优化（SPFA）之外，Bellman-Ford 还有其他形式的优化，这些优化在部分图上效果明显，但在某些特殊图上，最坏复杂度可能达到指数级。\n堆优化：将队列换成堆，与 Dijkstra 的区别是允许一个点多次入队。在有负权边的图可能被卡成指数级复杂度。 栈优化：将队列换成栈（即将原来的 BFS 过程变成 DFS），在寻找负环时可能具有更高效率，但最坏时间复杂度仍然为指数级。 LLL 优化：将普通队列换成双端队列，每次将入队结点距离和队内距离平均值比较，如果更大则插入至队尾，否则插入队首。 SLF 优化：将普通队列换成双端队列，每次将入队结点距离和队首比较，如果更大则插入至队尾，否则插入队首。 更多优化以及针对这些优化的 Hack 方法，可以看 fstqwq 在知乎上的回答 。\n模板 Bellman-Ford算法：\n1const int inf = 0x3f3f3f3f; 2const int mxn = 1e3 + 5; 3 4int u[mxn], v[mxn], w[mxn]; 5int dis[mxn], pre[mxn]; 6 7void bellman_init(int n) 8{ 9 for(int i=1; i\u0026lt;=n; i++){ 10 dis[i] = inf; 11 pre[i] = 0; 12 } 13} 14 15int bellman(int s, int n, int m) 16{ 17 int k=0, f=1; dis[s] = 0; 18 while(f) 19 { 20 if(++k \u0026gt; n) return -1; 21 f = 0; 22 for(int i=1; i\u0026lt;=m; i++){ 23 if(dis[u[i]]+w[i] \u0026lt; dis[v[i]]){ 24 dis[v[i]] = dis[u[i]]+w[i]; 25 pre[v[i]] = u[i]; 26 f = 1; 27 } 28 } 29 } 30 return 0; 31} 32 33int main() 34{ 35 int n, m; 36 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 37 38 for(int i=1; i\u0026lt;=m; i++) 39 { 40 scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;u[i], \u0026amp;v[i], \u0026amp;w[i]); 41 } 42 43 bellman_init(n); 44 if(bellman(1, n, m) == -1) 45 { 46 printf(\u0026#34;包含负权回路\\n\u0026#34;); 47 } 48 else 49 { 50 for(int i=1; i\u0026lt;=n; i++) 51 printf(\u0026#34;%d \u0026#34;, dis[i]); 52 printf(\u0026#34;\\n\u0026#34;); 53 54 for(int i=1; i\u0026lt;=n; i++) 55 printf(\u0026#34;%d \u0026#34;, pre[i]); 56 printf(\u0026#34;\\n\u0026#34;); 57 } 58 59 return 0; 60} 61 62/* 63Sample Input: 64 654 5 661 2 2 671 3 4 682 4 1 693 2 1 703 4 8 71 72 73Sample Output: 74 750 2 4 3 760 1 1 2 77 78*/ SPFA：\n1const int inf = 0x3f3f3f3f; 2const int mxn = 1e3 + 5; 3 4struct E { 5 int to, next, w; 6} e[mxn]; 7 8int H[mxn], tot; 9 10void add(int from, int to, int w) { 11 e[tot] = {to, H[from], w}; 12 H[from] = tot++; 13} 14 15void graph_init(int n) 16{ 17 for(int i=1; i\u0026lt;=n; i++) 18 H[i] = -1; 19 tot = 0; 20} 21 22int dis[mxn], pre[mxn], num[mxn]; 23bool vis[mxn]; 24queue\u0026lt;int\u0026gt; q; 25 26void spfa_init(int n) 27{ 28 for(int i=1; i\u0026lt;=n; i++){ 29 dis[i] = inf; 30 num[i] = pre[i] = 0; 31 } 32} 33 34int spfa(int s, int n) 35{ 36 dis[s] = 0; q.push(s); 37 num[s] = vis[s] = 1; 38 while(!q.empty()) 39 { 40 int u = q.front(); q.pop(); vis[u] = 0; 41 for(int i=H[u]; ~i; i=e[i].next){ 42 int v = e[i].to, w = e[i].w; 43 if(dis[u]+w \u0026lt; dis[v]){ 44 dis[v] = dis[u]+w; 45 pre[v] = u; 46 if(!vis[v]){ 47 q.push(v), vis[v] = 1; 48 if(++num[v] \u0026gt; n) return -1; 49 } 50 } 51 } 52 } 53 return 0; 54} 55 56int main() 57{ 58 int n, m; 59 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 60 graph_init(n); 61 62 for(int i=1; i\u0026lt;=m; i++) 63 { 64 int u, v, w; 65 scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;u, \u0026amp;v, \u0026amp;w); 66 add(u, v, w); 67 } 68 69 spfa_init(n); 70 if(spfa(1, n) == -1) 71 { 72 printf(\u0026#34;包含负权回路\\n\u0026#34;); 73 } 74 else 75 { 76 for(int i=1; i\u0026lt;=n; i++) 77 printf(\u0026#34;%d \u0026#34;, dis[i]); 78 printf(\u0026#34;\\n\u0026#34;); 79 80 for(int i=1; i\u0026lt;=n; i++) 81 printf(\u0026#34;%d \u0026#34;, pre[i]); 82 printf(\u0026#34;\\n\u0026#34;); 83 } 84 85 return 0; 86} 87 88 89/* 90Sample Input: 91 924 5 931 2 2 941 3 4 952 4 1 963 2 1 973 4 8 98 99 100Sample Output: 101 1020 2 4 3 1030 1 1 2 104 105*/ ","permalink":"https://blog.lordash.de/posts/algorithm/bellman-ford/","summary":"简介 Bellman-Ford算法是求解单源最短路的算法之一，适用于可包含负边权的有向和无向图，可以判断是否包含负环（注意，如果是包含负权回路","title":"Bellman-Ford"},{"content":"简介 Dijkstra算法是求解单源最短路的算法之一，核心思想是贪心，只适用于边权为正的无向和有向图。原复杂度$O(n^{2})$，优化后时间复杂度能到$O(mlog_{m})$。\nDijkstra算法 首先我们来看这个贪心性质：\n从起点u到终点v的最短路径，一定是从起点u到这条最短路径上经过的点w的最短路径。\n可以用反证法证明，假设$dis(u, w)$是起点u到终点v最短路径上的起点u到途经点w的距离。若存在不是最短路径上的$dis\u0026rsquo;(u, w) \u0026lt; dis(u, w)$，那么可以得出$dis\u0026rsquo;(u, w)+dis(w, v) \u0026lt; dis(u, w)+dis(w, v)$，即存在从起点u到终点v的更短的路径，与假设矛盾。\n可以根据这个性质得到贪心思路，但是这个性质基于一个前提：\n对于起点u的最短邻接边uw，从u到w不可能存在比$dis(u, w)$更短的路径。因为uw已经是最短的了，从其它路径走的话必然经过比uw更长的路径。\n而这也是Dijkstra不能处理负边权的原因，如果有负边权则无法满足前提。可以看下图自行理解：\n那么，依据这个贪心性质得到思路，我们可以从现知的最短路径开始，去更新起点到其它点的距离，再更新已知的最短路，重复这个过程，遍历完所有的点之后，就能得到起点到其它点的最短路径长度。详细过程如下：\n将起点加入已经确定最短路的集合S，其它点则属于未确定的集合V-S=T。 更新到起点的最短距离dis[i]。 选取未访问的最小的dis ，标记并加入已经确定最短路的集合S，此时的dis 就是x到起点的最短距离。 再依据$ dis[y]=min(dis[y], dis +{边权值}w [y]) $，更新集合T中与x相邻的点y到起点的最短距离dis[y]。这个操作叫做松弛操作（relax），更新过后当前的不等式约束$ dis[y] $相对于$ dis+w [y] $已经不是最“紧”的约束了，下一次更新dis[y]时就不需要检查这个约束了，即原约束被“松弛”了。 重复3，4步骤直到目标点加入集合，此时目标点对应的dis[v]就是最短路径长度。 邻接矩阵存图，核心代码如下：\n1void dijkstra(int s, int n) 2{ 3 dis[s] = 0; 4 for(int i=1; i\u0026lt;=n; i++) 5 { 6 int x = 0; 7 for(int j=1; j\u0026lt;=n; j++) 8 if(!vis[j] \u0026amp;\u0026amp; (x==0 || dis[j]\u0026lt;dis[x])) x = j; 9 10 vis[x] = 1; 11 for(int j=1; j\u0026lt;=n; j++) 12 dis[j] = min(dis[j], dis[x]+g[x][j]); 13 } 14} 优化 时间复杂度分析，只分析集合操作，n次delete-min，m次decrease-key。\n如果用暴力：$O(n^{2}+m)$。 如果用堆：$O(mlog_{n})$。 如果用priority_queue：$O(mlog_{m})$。 如果用线段树（ZKW线段树）：$O(mlog_{n}+n)=O(mlog_{n})$。 如果用Fibonacci堆：$O(nlog_{n}+m)$。 如果使用priority_queue，无法删除某一个旧的结点，只能插入一个权值更小的相同编号结点，这样操作导致堆中元素是$O(m)$的。\n下面给出使用邻接表及priority_queue的优化版本，即优化了存图方式以及寻找未访问的最小dis结点过程。代码如下：\n1void dijkstra(int s, int n) 2{ 3 q.push({dis[s]=0, s}); 4 while(!q.empty()){ 5 int u = q.top().second; q.pop(); 6 if(vis[u]) continue; 7 vis[u] = 1; 8 for(int i=H[u]; ~i; i=e[i].next){ 9 int v=e[i].to, w=e[i].w; 10 if(!vis[v] \u0026amp;\u0026amp; dis[u]+w \u0026lt; dis[v]){ 11 dis[v] = dis[u]+w; 12 pre[v] = u; 13 q.push({dis[v], v}); 14 } 15 } 16 } 17} 模板 原始版本：\n1const int inf = 0x3f3f3f3f; 2const int mxn = 1e3 + 5; 3 4int g[mxn][mxn]; 5 6void graph_init(int n) 7{ 8 for(int i=1; i\u0026lt;=n; i++){ 9 for(int j=1; j\u0026lt;=n; j++) 10 g[i][j] = inf; 11 g[i][i] = 0; 12 } 13} 14 15int dis[mxn], pre[mxn]; 16bool vis[mxn]; 17 18void dijkstra_init(int n) 19{ 20 for(int i=1; i\u0026lt;=n; i++){ 21 vis[i] = pre[i] = 0; 22 dis[i] = inf; 23 } 24} 25 26void dijkstra(int s, int n) 27{ 28 dis[s] = 0; 29 for(int i=1; i\u0026lt;=n; i++) 30 { 31 int x = 0; 32 for(int j=1; j\u0026lt;=n; j++) 33 if(!vis[j] \u0026amp;\u0026amp; (x==0 || dis[j]\u0026lt;dis[x])) x = j; 34 35 vis[x] = 1; 36 for(int j=1; j\u0026lt;=n; j++){ 37 if(!vis[j] \u0026amp;\u0026amp; dis[x]+g[x][j] \u0026lt; dis[j]){ 38 dis[j] = dis[x]+g[x][j]; 39 pre[j] = x; 40 } 41 } 42 } 43} 44 45int main() 46{ 47 int n, m; 48 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 49 graph_init(n); 50 51 for(int i=0; i\u0026lt;m; i++) 52 { 53 int u, v, w; 54 scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;u, \u0026amp;v, \u0026amp;w); 55 g[u][v] = w; 56 } 57 dijkstra_init(n); 58 dijkstra(1, n); 59 60 for(int i=1; i\u0026lt;=n; i++) 61 printf(\u0026#34;%d \u0026#34;, dis[i]); 62 printf(\u0026#34;\\n\u0026#34;); 63 64 for(int i=n; i; i=pre[i]) 65 printf(\u0026#34;%d \u0026#34;, i); 66 printf(\u0026#34;\\n\u0026#34;); 67 68 return 0; 69} 70 71/* 72Sample Input: 73 744 5 751 2 2 761 3 4 772 4 1 783 2 1 793 4 8 80 81Sample Output: 82 830 2 4 3 844 2 1 85 86*/ 优化版本：\n1const int inf = 0x3f3f3f3f; 2const int mxn = 1e3 + 5; 3 4struct E { 5 int to, next, w; 6} e[mxn]; 7 8int H[mxn], tot; 9 10void add(int from, int to, int w) { 11 e[tot] = {to, H[from], w}; 12 H[from] = tot++; 13} 14 15void graph_init(int n) 16{ 17 for(int i=1; i\u0026lt;=n; i++) 18 H[i] = -1; 19 tot = 0; 20} 21 22int dis[mxn], pre[mxn]; 23bool vis[mxn]; 24priority_queue\u0026lt;pair\u0026lt;int, int\u0026gt;, vector\u0026lt;pair\u0026lt;int, int\u0026gt; \u0026gt;, greater\u0026lt;pair\u0026lt;int, int\u0026gt; \u0026gt; \u0026gt; q; 25 26void dijkstra_init(int n) 27{ 28 for(int i=1; i\u0026lt;=n; i++){ 29 vis[i] = pre[i] = 0; 30 dis[i] = inf; 31 } 32} 33 34void dijkstra(int s, int n) 35{ 36 q.push({dis[s]=0, s}); 37 while(!q.empty()){ 38 int u = q.top().second; q.pop(); 39 if(vis[u]) continue; 40 vis[u] = 1; 41 for(int i=H[u]; ~i; i=e[i].next){ 42 int v=e[i].to, w=e[i].w; 43 if(!vis[v] \u0026amp;\u0026amp; dis[u]+w \u0026lt; dis[v]){ 44 dis[v] = dis[u]+w; 45 pre[v] = u; 46 q.push({dis[v], v}); 47 } 48 } 49 } 50} 51 52int main() 53{ 54 int n, m; 55 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 56 graph_init(n); 57 58 for(int i=0; i\u0026lt;m; i++) 59 { 60 int u, v, w; 61 scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;u, \u0026amp;v, \u0026amp;w); 62 add(u, v, w); 63 } 64 dijkstra_init(n); 65 dijkstra(1, n); 66 67 for(int i=1; i\u0026lt;=n; i++) 68 printf(\u0026#34;%d \u0026#34;, dis[i]); 69 printf(\u0026#34;\\n\u0026#34;); 70 71 for(int i=n; i; i=pre[i]) 72 printf(\u0026#34;%d \u0026#34;, i); 73 printf(\u0026#34;\\n\u0026#34;); 74 75 return 0; 76} 77 78/* 79Sample Input: 80 814 5 821 2 2 831 3 4 842 4 1 853 2 1 863 4 8 87 88Sample Output: 89 900 2 4 3 914 2 1 92 93*/ ","permalink":"https://blog.lordash.de/posts/algorithm/dijkstra/","summary":"简介 Dijkstra算法是求解单源最短路的算法之一，核心思想是贪心，只适用于边权为正的无向和有向图。原复杂度$O(n^{2})$，优化后时间","title":"Dijkstra"},{"content":"A+B for Polynomials(PATA-1002) 题面 This time, you are supposed to find A+B where A and B are two polynomials.\n输入 Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:\nK N1 aN1 N2 aN2 \u0026hellip; NK aNK\nwhere K is the number of nonzero terms in the polynomial, Ni and aNi (i=1,2,⋯,K) are the exponents and coefficients, respectively. It is given that 1≤K≤10，0≤NK\u0026lt;⋯\u0026lt;N2\u0026lt;N1≤1000.\n输出 For each test case you should output the sum of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.\n样例输入 12 1 2.4 0 3.2 22 2 1.5 1 0.5 样例输出 13 2 1.5 1 2.9 0 3.2 提示 无\n思路 代码 1#define Sg(u) ((u)\u0026gt;eps?1:((u)\u0026lt;-eps?-1:0)) 2#define Abs(u) (Sg(u)\u0026gt;=0?(u):-(u)) 3#define Ze(u) (!Sg(u)) 4#define Eq(u,v) (Ze((u)-(v))) 5const double eps = 1e-6; 6double a[1005]; 7 8int main() 9{ 10 int an; scanf(\u0026#34;%d\u0026#34;, \u0026amp;an); 11 for(int i=0; i\u0026lt;an; i++){ 12 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 13 scanf(\u0026#34;%lf\u0026#34;, \u0026amp;a[n]); 14 } 15 16 int bn; scanf(\u0026#34;%d\u0026#34;, \u0026amp;bn); 17 for(int i=0; i\u0026lt;bn; i++){ 18 int n; double x; 19 scanf(\u0026#34;%d %lf\u0026#34;, \u0026amp;n, \u0026amp;x); 20 a[n] += x; 21 } 22 23 int ans = 0; 24 for(int i=1000; i\u0026gt;=0; i--){ 25 if(Sg(a[i])) 26 ans++; 27 } 28 printf(\u0026#34;%d\u0026#34;, ans); 29 30 for(int i=1000; i\u0026gt;=0; i--){ 31 if(Sg(a[i])) 32 printf(\u0026#34; %d %.1lf\u0026#34;, i, a[i]); 33 } 34 printf(\u0026#34;\\n\u0026#34;); 35 36 return 0; 37} ","permalink":"https://blog.lordash.de/posts/solution/pata-1002-a+b-for-polynomials/","summary":"A+B for Polynomials(PATA-1002) 题面 This time, you are supposed to find A+B where A and B are two polynomials. 输入 Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: K N1 aN1 N2 aN2 \u0026hellip; NK aNK where K is the number of nonzero terms in the polynomial, Ni and aNi (i=1,","title":"PATA-1002 A+B for Polynomials"},{"content":"A+B Format(PATA-1001) 题面 Calculate a+b and output the sum in standard format \u0026ndash; that is, the digits must be separated into groups of three by commas (unless there are less than four digits).\n输入 Each input file contains one test case. Each case contains a pair of integers a and b where −10^6≤a,b≤10^6. The numbers are separated by a space.\n输出 For each test case, you should output the sum of a and b in one line. The sum must be written in the standard format.\n样例输入 1-1000000 9 样例输出 1-999,991 提示 无\n思路 代码 1int main() 2{ 3 int a, b; scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;a, \u0026amp;b); 4 char s[20]; sprintf(s, \u0026#34;%d\u0026#34;, a+b); 5 int len=strlen(s), f=(a+b\u0026lt;0), st, num; 6 if(f){ 7 st = (len-2)%3+1; 8 num = (len-2)/3; 9 }else{ 10 st = (len-1)%3; 11 num = (len-1)/3; 12 } 13 for(int i=0; i\u0026lt;len; i++){ 14 printf(\u0026#34;%c\u0026#34;, s[i]); 15 if(num \u0026amp;\u0026amp; i==st){ 16 printf(\u0026#34;,\u0026#34;); 17 num--, st+=3; 18 } 19 } 20 return 0; 21} ","permalink":"https://blog.lordash.de/posts/solution/pata-1001-a+b-format/","summary":"A+B Format(PATA-1001) 题面 Calculate a+b and output the sum in standard format \u0026ndash; that is, the digits must be separated into groups of three by commas (unless there are less than four digits). 输入 Each input file contains one test case. Each case contains a pair of integers a and b where −10^6≤a,b≤10^6. The","title":"PATA-1001 A+B Format"},{"content":"Theme Section(HDU-4763) 题面 It\u0026rsquo;s time for music! A lot of popular musicians are invited to join us in the music festival. Each of them will play one of their representative songs. To make the programs more interesting and challenging, the hosts are going to add some constraints to the rhythm of the songs, i.e., each song is required to have a \u0026rsquo;theme section\u0026rsquo;. The theme section shall be played at the beginning, the middle, and the end of each song. More specifically, given a theme section E, the song will be in the format of \u0026lsquo;EAEBE\u0026rsquo;, where section A and section B could have arbitrary number of notes. Note that there are 26 types of notes, denoted by lower case letters \u0026lsquo;a\u0026rsquo; - \u0026lsquo;z\u0026rsquo;.\nTo get well prepared for the festival, the hosts want to know the maximum possible length of the theme section of each song. Can you help us?\n输入 The integer N in the first line denotes the total number of songs in the festival. Each of the following N lines consists of one string, indicating the notes of the i-th (1 \u0026lt;= i \u0026lt;= N) song. The length of the string will not exceed 10^6.\n输出 There will be N lines in the output, where the i-th line denotes the maximum possible length of the theme section of the i-th song.\n样例输入 15 2xy 3abc 4aaa 5aaaaba 6aaxoaaaaa 样例输出 10 20 31 41 52 提示 无\n思路 标记第一个E的结尾，枚举第二个E，满足条件的求个max即可。数据有点水。\n代码 1char t[mxn]; 2int nxt[mxn], vis[mxn]; 3 4void getnxt(char* t, int m) 5{ 6 int i = 0, j = -1; nxt[0] = -1; 7 while (i \u0026lt; m) 8 { 9 if (j == -1 || t[i] == t[j]) { 10 i++, j++; 11 // if (t[i] == t[j]) 12 // nxt[i] = nxt[j]; // next数组优化 13 // else 14 nxt[i] = j; 15 } else 16 j = nxt[j]; 17 } 18} 19 20int main() 21{ 22 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 23 while(T--) 24 { 25 scanf(\u0026#34;%s\u0026#34;, t); 26 int n = strlen(t); 27 for(int i=0; i\u0026lt;n; i++) vis[i] = 0; 28 getnxt(t, n); 29 30 for(int i=n; i\u0026gt;0; i=nxt[i]){ 31 if(3*i\u0026lt;=n) 32 vis[i] = 1; 33 } 34 35 int ans=0; 36 for(int i=n-1; i\u0026gt;1; i--) { 37 for(int j=i; j\u0026gt;0; j=nxt[j]) { 38 if(vis[j] \u0026amp;\u0026amp; 2*j\u0026lt;=i \u0026amp;\u0026amp; i+j\u0026lt;=n) { 39 ans = max(ans, j); 40 break; 41 } 42 } 43 } 44 printf(\u0026#34;%d\\n\u0026#34;, ans); 45 } 46 return 0; 47} ","permalink":"https://blog.lordash.de/posts/solution/hdu-4763-theme-section/","summary":"Theme Section(HDU-4763) 题面 It\u0026rsquo;s time for music! A lot of popular musicians are invited to join us in the music festival. Each of them will play one of their representative songs. To make the programs more interesting and challenging, the hosts are going to add some constraints to the rhythm of the songs, i.e., each song is required to have a \u0026rsquo;theme section\u0026rsquo;. The theme section shall be played","title":"HDU-4763 Theme Section"},{"content":"Wow! Such Doge!(HDU-4847) 题面 Chen, Adrian (November 7, 2013). “Doge Is An Ac- tually Good Internet Meme. Wow.”. Gawker. Retrieved November 22, 2013.\nDoge is an Internet meme that became popular in 2013. The meme typically con- sists of a picture of a Shiba Inu dog ac- companied by multicolored text in Comic Sans MS font in the foreground. The text, representing a kind of internal monologue, is deliberately written in broken English, and usually contains the word “wow” and the phrases “such x”, “much x”, “many x”, “very x” and “so x”. Kabosu, the Shiba Inu featured in the original meme, was first pictured in a 2010 blog post by Atsuko Sato, a Japanese kindergarten teacher. Afterwards, varia- tions of the pictures using overlaid Comic Sans text were posted from a Tumblr blog, Shiba Confessions. However, the use of the intentionally misspelled “doge” dates back to June 2005, when it was mentioned in an episode of Homestar Runners puppet series. In August 2013, images of the meme were spammed on Reddit’s r/MURICA subreddit by 4chan’s random imageboard, /b/. A search of the term doge on Google Trends shows an explosion of popularity occurring in October 2013, and more so in the following month. By November 2013, the meme had become widespread on the Internet. Google later created a Doge Easter egg: when doge meme was entered into the YouTube search bar, all of the site’s text would be displayed in colorful Comic Sans, similar to the kind used by the meme. The meme was ranked #12 on MTV’s list of “50 Things Pop Culture Had Us Giving Thanks For” in 2013. Io9 compared the internal dialog of the Shiba Inu dogs to lolcat-speak. The image most commonly associated with the meme is of a female Shiba Inu named Kabosu, taken from a Japanese blog documenting the dog’s daily activities. The spelling of doge has several variants, leading to debate on its actual pronunciation. On December 13, Doge was named the “top meme” of 2013 by Know Your Meme. In December 2013, the Dogecoin was introduced as a new cryptocurrency, making it the first cryptocurrency to be based on an Internet meme; the viral phenomenon, along with usage of the Comic Sans MS typeface, gave it “the Internet density of a large star” according to Medium writer Quinn Norton. In late December 2013, members of the U.S. Congress produced material in the meme’s style. Huffington Post commented that Doge was “killed” because of the Congress members’ usage of the meme. By early 2014, Doge’s popularity was sustained by internet communities on social media, accompanied by the rapid growth and acceptance of Dogecoin. In April 2014, Doge experienced a second major media resurgence due to revelations of the Dogecoin community’s intent to sponsor Josh Wise in NASCAR and place a picture of the Shiba Inu on his vehicle.\n—— Doge (meme). (2014, May 18). In Wikipedia, The Free Encyclopedia. Retrieved 02:00, May 22, 2014, from http://en.wikipedia.org/w/index.php?title=Doge_(meme)\u0026amp;oldid=609040691\nNow, Doge wants to know how many words “doge” are there in a given article. Would you like to help Doge solve this problem?\n输入 An article that Doge wants to know. The size of the article does not exceed 64KB. The article contains only ASCII characters.\n输出 Please output the number of word “doge” (case-insensitive). Refer to the samples for more details.\n样例输入 1adoge 2cutedo 3yourge 4blownDoge 5lovelyDooge 6Wow! Such Dooooooooooooooge!!! 7D0ge 8dOge DOGE 9dogedoge 样例输出 16 提示 无\n思路 可以用KMP。\n代码 1char s[mxn], t[] = \u0026#34;doge\u0026#34;; 2int nxt[mxn]; 3 4void getnxt(char* t, int m) 5{ 6 int i = 0, j = -1; nxt[0] = -1; 7 while (i \u0026lt; m) 8 { 9 if (j == -1 || t[i] == t[j]) { 10 i++, j++; 11 // if (t[i] == t[j]) 12 // nxt[i] = nxt[j]; // next数组优化 13 // else 14 nxt[i] = j; 15 } else 16 j = nxt[j]; 17 } 18} 19 20int KMP(char* s, char* t, int n, int m) 21{ 22 int i = 0, j = 0, ans = 0; 23 while (i \u0026lt; n) 24 { 25 if (j == -1 || s[i] == t[j]) { 26 i++, j++; 27 if (j \u0026gt;= m) { // 匹配 28 ans++; 29 j = 0; 30 // return i-j; 31 } 32 } else 33 j = nxt[j]; 34 } 35 return ans; 36 // return -1; 37} 38 39int main() 40{ 41 int ans = 0; 42 getnxt(t, 4); 43 while(fgets(s, mxn, stdin)) 44 { 45 int n = strlen(s); 46 for(int i=0; i\u0026lt;n; i++) s[i] = tolower(s[i]); 47 ans += KMP(s, t, n, 4); 48 } 49 printf(\u0026#34;%d\\n\u0026#34;, ans); 50 return 0; 51} ","permalink":"https://blog.lordash.de/posts/solution/hdu-4847-wow-such-doge/","summary":"Wow! Such Doge!(HDU-4847) 题面 Chen, Adrian (November 7, 2013). “Doge Is An Ac- tually Good Internet Meme. Wow.”. Gawker. Retrieved November 22, 2013. Doge is an Internet meme that became popular in 2013. The meme typically con- sists of a picture of a Shiba Inu dog ac- companied by multicolored text in Comic Sans MS font in the foreground. The","title":"HDU-4847 Wow! Such Doge!"},{"content":"最长回文(HDU-3068) 题面 给出一个只由小写英文字符a,b,c\u0026hellip;y,z组成的字符串S,求S中最长回文串的长度. 回文就是正反读都是一样的字符串,如aba, abba等\n输入 输入有多组case,不超过120组,每组输入为一行小写英文字符a,b,c\u0026hellip;y,z组成的字符串S 两组case之间由空行隔开(该空行不用处理) 字符串长度len \u0026lt;= 110000\n输出 每一行一个整数x,对应一组case,表示该组case的字符串中所包含的最长回文长度.\n样例输入 1aaaa 2 3abab 样例输出 14 23 提示 无\n思路 Manacher模板题。\n代码 1char s[mxn], t[mxn]; 2int p[mxn]; 3 4int manacher_init(char *s, char *t, int n) 5{ 6 int j = 2; t[0] = \u0026#39;$\u0026#39;, t[1] = \u0026#39;#\u0026#39;; 7 for (int i=0; i\u0026lt;n; i++) 8 { 9 t[j++] = s[i]; 10 t[j++] = \u0026#39;#\u0026#39;; 11 } 12 t[j] = \u0026#39;\\0\u0026#39;; 13 return j; 14} 15 16int manacher(char *t, int *p, int n) 17{ 18 int id = 0, mx = 0, ans = 0; 19 for (int i=1; i\u0026lt;=n; i++) 20 { 21 p[i] = i\u0026lt;mx ? min(p[2*id-i], mx-i) : 1; 22 23 while (t[i+p[i]] == t[i-p[i]]) p[i]++; // 中心扩展 24 25 if (mx \u0026lt; i+p[i]) 26 mx = i+p[i], id = i; 27 28 ans = max(ans, p[i]); 29 } 30 return ans-1; 31} 32 33int main() 34{ 35 while(~scanf(\u0026#34;%s\u0026#34;, s)) 36 { 37 int n = manacher_init(s, t, strlen(s)); 38 printf(\u0026#34;%d\\n\u0026#34;, manacher(t, p, n)); 39 } 40 41 return 0; 42} ","permalink":"https://blog.lordash.de/posts/solution/hdu-3068-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87/","summary":"最长回文(HDU-3068) 题面 给出一个只由小写英文字符a,b,c\u0026hellip;y,z组成的字符串S,求S中最长回文串的长度. 回文就是正反","title":"HDU-3068 最长回文"},{"content":"Girls\u0026rsquo; research(HDU-3294) 题面 One day, sailormoon girls are so delighted that they intend to research about palindromic strings. Operation contains two steps: First step: girls will write a long string (only contains lower case) on the paper. For example, \u0026ldquo;abcde\u0026rdquo;, but \u0026lsquo;a\u0026rsquo; inside is not the real \u0026lsquo;a\u0026rsquo;, that means if we define the \u0026lsquo;b\u0026rsquo; is the real \u0026lsquo;a\u0026rsquo;, then we can infer that \u0026lsquo;c\u0026rsquo; is the real \u0026lsquo;b\u0026rsquo;, \u0026rsquo;d\u0026rsquo; is the real \u0026lsquo;c\u0026rsquo; ……, \u0026lsquo;a\u0026rsquo; is the real \u0026lsquo;z\u0026rsquo;. According to this, string \u0026ldquo;abcde\u0026rdquo; changes to \u0026ldquo;bcdef\u0026rdquo;. Second step: girls will find out the longest palindromic string in the given string, the length of palindromic string must be equal or more than 2.\n输入 Input contains multiple cases. Each case contains two parts, a character and a string, they are separated by one space, the character representing the real \u0026lsquo;a\u0026rsquo; is and the length of the string will not exceed 200000.All input must be lowercase. If the length of string is len, it is marked from 0 to len-1.\n输出 Please execute the operation following the two steps. If you find one, output the start position and end position of palindromic string in a line, next line output the real palindromic string, or output \u0026ldquo;No solution!\u0026rdquo;. If there are several answers available, please choose the string which first appears.\n样例输入 1b babd 2a abcd 样例输出 10 2 2aza 3No solution! 提示 无\n思路 Manacher，字符置换不影响回文性质，先求出最长回文子串长度和起点，输出的时候替换一下即可。\n代码 1char s[mxn], t[mxn]; 2int p[mxn], l; 3 4int manacher_init(char *s, char *t, int n) 5{ 6 int j = 2; 7 t[0] = -2, t[1] = -1; 8 9 for (int i = 0; i \u0026lt; n; i++) 10 { 11 t[j++] = s[i]; 12 t[j++] = -1; 13 } 14 t[j] = -3; 15 return j; 16} 17 18int manacher(char *t, int *p, int n) 19{ 20 int id = 0, mx = 0, ans = 0; 21 for (int i = 1; i \u0026lt;= n; i++) 22 { 23 p[i] = i\u0026lt;mx ? min(p[2*id-i], mx-i) : 1; 24 25 while (t[i+p[i]] == t[i-p[i]]) p[i]++; 26 27 if (mx \u0026lt; i+p[i]) 28 mx = i+p[i], id = i; 29 30 if(ans \u0026lt; p[i]){ 31 ans = p[i]; 32 l = (i-p[i])/2; 33 } 34 } 35 return ans-1; 36} 37 38int main() 39{ 40 char c; 41 while(~scanf(\u0026#34; %c %s\u0026#34;, \u0026amp;c, s)) 42 { 43 int n = manacher_init(s, t, strlen(s)); 44 int ans = manacher(t, p, n); 45 if(ans\u0026gt;2){ 46 printf(\u0026#34;%d %d\\n\u0026#34;, l, l+ans-1); 47 for(int i=0; i\u0026lt;ans; i++){ 48 printf(\u0026#34;%c\u0026#34;, (s[i+l]-c+26)%26+\u0026#39;a\u0026#39;); 49 } 50 printf(\u0026#34;\\n\u0026#34;); 51 }else{ 52 printf(\u0026#34;No solution!\\n\u0026#34;); 53 } 54 } 55 return 0; 56} ","permalink":"https://blog.lordash.de/posts/solution/hdu-3294-girls-research/","summary":"Girls\u0026rsquo; research(HDU-3294) 题面 One day, sailormoon girls are so delighted that they intend to research about palindromic strings. Operation contains two steps: First step: girls will write a long string (only contains lower case) on the paper. For example, \u0026ldquo;abcde\u0026rdquo;, but \u0026lsquo;a\u0026rsquo; inside is not the real \u0026lsquo;a\u0026rsquo;, that means if we define the \u0026lsquo;b\u0026rsquo; is the real \u0026lsquo;a\u0026rsquo;, then we can infer that \u0026lsquo;c\u0026rsquo; is the real \u0026lsquo;b\u0026rsquo;,","title":"HDU-3294 Girls' research"},{"content":"吉哥系列故事-完美队形II(HDU-4513) 题面 吉哥又想出了一个新的完美队形游戏！ 假设有n个人按顺序站在他的面前，他们的身高分别是h[1], h[2] \u0026hellip; h[n]，吉哥希望从中挑出一些人，让这些人形成一个新的队形，新的队形若满足以下三点要求，则就是新的完美队形：\n1、挑出的人保持原队形的相对顺序不变，且必须都是在原队形中连续的； 2、左右对称，假设有m个人形成新的队形，则第1个人和第m个人身高相同，第2个人和第m-1个人身高相同，依此类推，当然如果m是奇数，中间那个人可以任意； 3、从左到中间那个人，身高需保证不下降，如果用H表示新队形的高度，则H[1] \u0026lt;= H[2] \u0026lt;= H[3] \u0026hellip;. \u0026lt;= H[mid]。\n现在吉哥想知道：最多能选出多少人组成新的完美队形呢？\n输入 输入数据第一行包含一个整数T，表示总共有T组测试数据(T \u0026lt;= 20)； 每组数据首先是一个整数n(1 \u0026lt;= n \u0026lt;= 100000)，表示原先队形的人数，接下来一行输入n个整数，表示原队形从左到右站的人的身高（50 \u0026lt;= h \u0026lt;= 250，不排除特别矮小和高大的）。\n输出 请输出能组成完美队形的最多人数，每组输出占一行。\n样例输入 12 23 351 52 51 44 551 52 52 51 样例输出 13 24 提示 无\n思路 Manacher，中心扩展的时候判断一下条件即可。\n代码 1int s[mxn], t[mxn]; 2int p[mxn]; 3 4int manacher_init(int *s, int *t, int n) 5{ 6 int j = 2; 7 t[0] = -2, t[1] = -1; 8 9 for (int i = 0; i \u0026lt; n; i++) 10 { 11 t[j++] = s[i]; 12 t[j++] = -1; 13 } 14 t[j] = -3; 15 return j; 16} 17 18int manacher(int *t, int *p, int n) 19{ 20 int id = 0, mx = 0, ans = 0; 21 for (int i = 1; i \u0026lt;= n; i++) 22 { 23 p[i] = i\u0026lt;mx ? min(p[2*id-i], mx-i) : 1; 24 25 while (t[i+p[i]] == t[i-p[i]]){ 26 if(t[i+p[i]-2] \u0026lt; t[i+p[i]]) break; 27 p[i]++; 28 } 29 30 if (mx \u0026lt; i+p[i]) 31 mx = i+p[i], id = i; 32 33 ans = max(ans, p[i]); 34 } 35 return ans-1; 36} 37 38int main() 39{ 40 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 41 while(T--) 42 { 43 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 44 for(int i=0; i\u0026lt;n; i++) scanf(\u0026#34;%d\u0026#34;, \u0026amp;s[i]); 45 n = manacher_init(s, t, n); 46 printf(\u0026#34;%d\\n\u0026#34;, manacher(t, p, n)); 47 } 48 return 0; 49} ","permalink":"https://blog.lordash.de/posts/solution/hdu-4513-%E5%90%89%E5%93%A5%E7%B3%BB%E5%88%97%E6%95%85%E4%BA%8B-%E5%AE%8C%E7%BE%8E%E9%98%9F%E5%BD%A2ii/","summary":"吉哥系列故事-完美队形II(HDU-4513) 题面 吉哥又想出了一个新的完美队形游戏！ 假设有n个人按顺序站在他的面前，他们的身高分别是h[1]","title":"HDU-4513 吉哥系列故事-完美队形II"},{"content":"Finding Palindromes(POJ-3376) 题面 A word is called a palindrome if we read from right to left is as same as we read from left to right. For example, \u0026ldquo;dad\u0026rdquo;, \u0026ldquo;eye\u0026rdquo; and \u0026ldquo;racecar\u0026rdquo; are all palindromes, but \u0026ldquo;odd\u0026rdquo;, \u0026ldquo;see\u0026rdquo; and \u0026ldquo;orange\u0026rdquo; are not palindromes.\nGiven n strings, you can generate n × n pairs of them and concatenate the pairs into single words. The task is to count how many of the so generated words are palindromes.\n输入 The first line of input file contains the number of strings n. The following n lines describe each string:\nThe i+1-th line contains the length of the i-th string li, then a single space and a string of li small letters of English alphabet.\nYou can assume that the total length of all strings will not exceed 2,000,000. Two strings in different line may be the same.\n输出 Print out only one integer, the number of palindromes.\n样例输入 13 21 a 32 ab 42 ba 样例输出 15 提示 The 5 palindromes are: aa aba aba abba baab\n思路 把所有正串都加进一棵Trie，然后用每个串的逆串去跑Trie，此时会出现以下情况：\n匹配完成，那么就说明存在一个正串的前缀是这个逆串。如果剩余的逆串回文，那么能形成回文。 匹配失败，Trie未结束，说明不能构成回文。 Trie已经跑到叶子节点，匹配未结束，那么如果正串剩余部分回文，那么能形成回文。 用扩展KMP处理出一个串的每个后缀是不是回文串，方法是用该串和其逆串仅用扩展KMP匹配，如果ex[i]=（从i到末尾的长度），那么说明从i到末尾的后缀是回文的。\n代码 1char s[mxn], t[mxn], rev[mxn]; 2int nxt[mxn], extend[mxn]; 3int tree[mxn][26], exist[mxn], cnt = 0; 4int len[mxn], val[mxn]; 5LL ans = 0; 6 7void getnxt(char* t, int m) 8{ 9 int a, p; nxt[0] = m; 10 for (int i=1, j=-1; i\u0026lt;m; i++, j--) 11 { 12 if (j\u0026lt;0 || i+nxt[i-a] \u0026gt;= p) 13 { 14 if (j\u0026lt;0) p = i, j = 0; 15 while (p\u0026lt;m \u0026amp;\u0026amp; t[p]==t[j]) p++, j++; 16 nxt[i] = j, a = i; 17 } else 18 nxt[i] = nxt[i-a]; 19 } 20} 21 22void exKMP(char* s, char* t, int n, int m) 23{ 24 int a, p; 25 for (int i=0, j=-1; i\u0026lt;n; i++, j--) //j即等于p与i的距离，其作用是判断i是否大于p（如果j\u0026lt;0，则i大于p） 26 { 27 if (j\u0026lt;0 || i+nxt[i-a] \u0026gt;= p) 28 { 29 if (j\u0026lt;0) p = i, j = 0; //如果i大于p 30 while (p\u0026lt;n \u0026amp;\u0026amp; j\u0026lt;m \u0026amp;\u0026amp; s[p]==t[j]) p++, j++; 31 extend[i] = j, a = i; 32 } else 33 extend[i] = nxt[i-a]; 34 } 35} 36 37void insert(char *s, int n) 38{ 39 int p = 0; 40 for (int i=0; i\u0026lt;n; i++) 41 { 42 int c = s[i] - \u0026#39;a\u0026#39;; 43 if (!tree[p][c]) tree[p][c] = ++cnt; 44 p = tree[p][c]; 45 val[p] += (i+1\u0026lt;n \u0026amp;\u0026amp; extend[i+1]==n-i-1) ? 1 : 0; 46 } 47 exist[p]++; 48} 49 50int search(char *s, int n) 51{ 52 int p = 0; 53 for (int i=0; i\u0026lt;n; i++) 54 { 55 int c = s[i] - \u0026#39;a\u0026#39;; 56 if (!tree[p][c]) return 0; 57 p = tree[p][c]; 58 ans += (exist[p] \u0026amp;\u0026amp; (i+1\u0026gt;=n || extend[i+1]==n-i-1)) ? exist[p] : 0; 59 } 60 ans += val[p]; 61 return exist[p]; 62} 63 64int main() 65{ 66 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 67 int st = 0; 68 for(int i=0; i\u0026lt;n; i++){ 69 scanf(\u0026#34;%d %s\u0026#34;, \u0026amp;len[i], s+st); 70 for(int j=0; j\u0026lt;len[i]; j++) 71 rev[j] = s[st+len[i]-j-1]; 72 getnxt(rev, len[i]); 73 exKMP(s+st, rev, len[i], len[i]); 74 insert(s+st, len[i]); 75 st += len[i]; 76 } 77 ans = st = 0; 78 for(int i=0; i\u0026lt;n; i++){ 79 for(int j=0; j\u0026lt;len[i]; j++) 80 rev[j] = s[st+len[i]-j-1]; 81 getnxt(s+st, len[i]); 82 exKMP(rev, s+st, len[i], len[i]); 83 search(rev, len[i]); 84 st += len[i]; 85 } 86 printf(\u0026#34;%lld\\n\u0026#34;, ans); 87 return 0; 88} ","permalink":"https://blog.lordash.de/posts/solution/poj-3376-finding-palindromes/","summary":"Finding Palindromes(POJ-3376) 题面 A word is called a palindrome if we read from right to left is as same as we read from left to right. For example, \u0026ldquo;dad\u0026rdquo;, \u0026ldquo;eye\u0026rdquo; and \u0026ldquo;racecar\u0026rdquo; are all palindromes, but \u0026ldquo;odd\u0026rdquo;, \u0026ldquo;see\u0026rdquo; and \u0026ldquo;orange\u0026rdquo; are not palindromes. Given n strings, you can generate n × n pairs of them and concatenate the pairs into single words. The task is to count how many","title":"POJ-3376 Finding Palindromes"},{"content":"Palindrome(POJ-3974) 题面 Andy the smart computer science student was attending an algorithms class when the professor asked the students a simple question, \u0026ldquo;Can you propose an efficient algorithm to find the length of the largest palindrome in a string?\u0026rdquo;\nA string is said to be a palindrome if it reads the same both forwards and backwards, for example \u0026ldquo;madam\u0026rdquo; is a palindrome while \u0026ldquo;acm\u0026rdquo; is not.\nThe students recognized that this is a classical problem but couldn\u0026rsquo;t come up with a solution better than iterating over all substrings and checking whether they are palindrome or not, obviously this algorithm is not efficient at all, after a while Andy raised his hand and said \u0026ldquo;Okay, I\u0026rsquo;ve a better algorithm\u0026rdquo; and before he starts to explain his idea he stopped for a moment and then said \u0026ldquo;Well, I\u0026rsquo;ve an even better algorithm!\u0026rdquo;.\nIf you think you know Andy\u0026rsquo;s final solution then prove it! Given a string of at most 1000000 characters find and print the length of the largest palindrome inside this string.\n输入 Your program will be tested on at most 30 test cases, each test case is given as a string of at most 1000000 lowercase characters on a line by itself. The input is terminated by a line that starts with the string \u0026ldquo;END\u0026rdquo; (quotes for clarity).\n输出 For each test case in the input print the test case number and the length of the largest palindrome.\n样例输入 1abcbabcbabcba 2abacacbaaaab 3END 样例输出 1Case 1: 13 2Case 2: 6 提示 无\n思路 Manacher模板题。\n代码 1char s[mxn], t[mxn]; 2int p[mxn]; 3 4int manacher_init(char *s, char *t, int n) 5{ 6 int j = 2; t[0] = \u0026#39;$\u0026#39;, t[1] = \u0026#39;#\u0026#39;; 7 for (int i=0; i\u0026lt;n; i++) 8 { 9 t[j++] = s[i]; 10 t[j++] = \u0026#39;#\u0026#39;; 11 } 12 t[j] = \u0026#39;\\0\u0026#39;; 13 return j; 14} 15 16int manacher(char *t, int *p, int n) 17{ 18 int id = 0, mx = 0, ans = 0; 19 for (int i=1; i\u0026lt;=n; i++) 20 { 21 p[i] = i\u0026lt;mx ? min(p[2*id-i], mx-i) : 1; 22 23 while (t[i+p[i]] == t[i-p[i]]) p[i]++; // 中心扩展 24 25 if (mx \u0026lt; i+p[i]) 26 mx = i+p[i], id = i; 27 28 ans = max(ans, p[i]); 29 } 30 return ans-1; 31} 32 33int main() 34{ 35 int cs = 1; 36 while(scanf(\u0026#34;%s\u0026#34;, s)==1 \u0026amp;\u0026amp; strcmp(s, \u0026#34;END\u0026#34;)) 37 { 38 int n = manacher_init(s, t, strlen(s)); 39 printf(\u0026#34;Case %d: %d\\n\u0026#34;, cs++, manacher(t, p, n)); 40 } 41 42 return 0; 43} ","permalink":"https://blog.lordash.de/posts/solution/poj-3974-palindrome/","summary":"Palindrome(POJ-3974) 题面 Andy the smart computer science student was attending an algorithms class when the professor asked the students a simple question, \u0026ldquo;Can you propose an efficient algorithm to find the length of the largest palindrome in a string?\u0026rdquo; A string is said to be a palindrome if it reads the same both forwards and backwards, for example \u0026ldquo;madam\u0026rdquo; is a palindrome while \u0026ldquo;acm\u0026rdquo; is not. The students recognized","title":"POJ-3974 Palindrome"},{"content":"简介 字典树又称单词查找树，Trie树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串）。优点是利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。\nTrie 字典树的结构如下：\n字典树用边来代表字母，而从根结点到树上某一结点的路径就代表了一个字符串。这颗字典树包含的字符串有{\u0026ldquo;in\u0026rdquo;, \u0026ldquo;inn\u0026rdquo;, \u0026ldquo;int\u0026rdquo;, \u0026ldquo;tea\u0026rdquo;, \u0026ldquo;ten\u0026rdquo;, \u0026ldquo;to\u0026rdquo;}。\nTrie的结构非常好懂，我们用$\\delta(u, c)$表示结点u的c字符指向的下一个结点，或着说是结点u代表的字符串后面添加一个字符c形成的字符串的结点。（c的取值范围和字符集大小有关，不一定是0~26）。有时需要标记插入进 trie 的是哪些字符串，每次插入完成时在这个字符串所代表的节点处打上标记即可。\nTrie一般支持两个操作：\n插入操作，就是将一个字符串s加入到集合中。 查询操作，就是查询一个字符串S是不是在集合中。 实现代码如下：\n1void insert(char *s, int n) 2{ 3 int p = 0; 4 for (int i=0; i\u0026lt;n; i++) 5 { 6 int c = s[i] - \u0026#39;a\u0026#39;; 7 if (!tree[p][c]) tree[p][c] = ++cnt; 8 p = tree[p][c]; 9 } 10 exist[p]++; 11} 12 13int search(char *s, int n) 14{ 15 int p = 0; 16 for (int i=0; i\u0026lt;n; i++) 17 { 18 int c = s[i] - \u0026#39;a\u0026#39;; 19 if (!tree[p][c]) return 0; 20 p = tree[p][c]; 21 } 22 return exist[p]; 23} 模板 1char s[mxn]; 2int tree[100000][26], exist[100000], cnt = 0; 3 4void insert(char *s, int n) 5{ 6 int p = 0; 7 for (int i=0; i\u0026lt;n; i++) 8 { 9 int c = s[i] - \u0026#39;a\u0026#39;; 10 if (!tree[p][c]) tree[p][c] = ++cnt; 11 p = tree[p][c]; 12 } 13 exist[p]++; 14} 15 16int search(char *s, int n) 17{ 18 int p = 0; 19 for (int i=0; i\u0026lt;n; i++) 20 { 21 int c = s[i] - \u0026#39;a\u0026#39;; 22 if (!tree[p][c]) return 0; 23 p = tree[p][c]; 24 } 25 return exist[p]; 26} 27 28int main() 29{ 30 int n, m; scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 31 for(int i=0; i\u0026lt;n; i++){ 32 scanf(\u0026#34;%s\u0026#34;, s); 33 insert(s, strlen(s)); 34 } 35 for(int i=0; i\u0026lt;m; i++){ 36 scanf(\u0026#34;%s\u0026#34;, s); 37 printf(\u0026#34;%d\\n\u0026#34;, search(s, strlen(s))); 38 } 39 return 0; 40} ","permalink":"https://blog.lordash.de/posts/algorithm/%E5%AD%97%E5%85%B8%E6%A0%91/","summary":"简介 字典树又称单词查找树，Trie树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串）。优","title":"字典树"},{"content":"Best Reward(HDU-3613) 题面 After an uphill battle, General Li won a great victory. Now the head of state decide to reward him with honor and treasures for his great exploit.\nOne of these treasures is a necklace made up of 26 different kinds of gemstones, and the length of the necklace is n. (That is to say: n gemstones are stringed together to constitute this necklace, and each of these gemstones belongs to only one of the 26 kinds.)\nIn accordance with the classical view, a necklace is valuable if and only if it is a palindrome - the necklace looks the same in either direction. However, the necklace we mentioned above may not a palindrome at the beginning. So the head of state decide to cut the necklace into two part, and then give both of them to General Li.\nAll gemstones of the same kind has the same value (may be positive or negative because of their quality - some kinds are beautiful while some others may looks just like normal stones). A necklace that is palindrom has value equal to the sum of its gemstones\u0026rsquo; value. while a necklace that is not palindrom has value zero.\nNow the problem is: how to cut the given necklace so that the sum of the two necklaces\u0026rsquo;s value is greatest. Output this value.\n输入 The first line of input is a single integer T (1 ≤ T ≤ 10) - the number of test cases. The description of these test cases follows.\nFor each test case, the first line is 26 integers: v1, v2, \u0026hellip;, v26 (-100 ≤ vi ≤ 100, 1 ≤ i ≤ 26), represent the value of gemstones of each kind.\nThe second line of each test case is a string made up of charactor \u0026lsquo;a\u0026rsquo; to \u0026lsquo;z\u0026rsquo;. representing the necklace. Different charactor representing different kinds of gemstones, and the value of \u0026lsquo;a\u0026rsquo; is v1, the value of \u0026lsquo;b\u0026rsquo; is v2, \u0026hellip;, and so on. The length of the string is no more than 500000.\n输出 Output a single Integer: the maximum value General Li can get from the necklace.\n样例输入 12 21 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3aba 41 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 5acacac 样例输出 11 26 提示 无\n思路 将一个字符串分为两部分，若某一子串是回文串，则该子串的价值为各字符的权值和，否则价值为0。求一种分割方法，使得两部分价值和最大。\n首先跑一遍Manacher，对于原串的前缀回文子串，满足中心点i==p[i]，而对于原串的后缀回文子串，满足中心点i+p[i] == 处理过的原串长度 即2*len(原串)+2。i为处理过的字符串数组下标，p数组是最大回文半径。\n所以枚举n+n-1个回文中心，看是否是原串的前缀回文子串，讨论剩下的部分，若剩下部分是回文串，则可能的回文中心r = (处理过的原串长度n + 前缀回文子串的右端点i+p[i]-1) / 2，以此判断后半部分是否为回文串，取最大价值和即可。获取回文子串的价值可以用前缀和优化。\n代码 1char s[mxn], t[mxn]; 2int p[mxn]; 3 4int manacher_init(char *s, char *t, int n) 5{ 6 int j = 2; t[0] = \u0026#39;$\u0026#39;, t[1] = \u0026#39;#\u0026#39;; 7 for (int i=0; i\u0026lt;n; i++) 8 { 9 t[j++] = s[i]; 10 t[j++] = \u0026#39;#\u0026#39;; 11 } 12 t[j] = \u0026#39;\\0\u0026#39;; 13 return j; 14} 15 16int manacher(char *t, int *p, int n) 17{ 18 int id = 0, mx = 0, ans = 0; 19 for (int i=1; i\u0026lt;=n; i++) 20 { 21 p[i] = mx\u0026gt;i ? min(p[2*id-i], mx-i) : 1; 22 23 while (t[i+p[i]] == t[i-p[i]]) p[i]++; 24 25 if (mx \u0026lt; i+p[i]) 26 mx = i+p[i], id = i; 27 28 ans = max(ans, p[i]); 29 } 30 return ans-1; 31} 32 33int a[30]; 34int sum[mxn]; 35 36int main() 37{ 38 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 39 while(T--) 40 { 41 for(int i=0; i\u0026lt;26; i++) 42 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); 43 scanf(\u0026#34;%s\u0026#34;, s); 44 int n = manacher_init(s, t, strlen(s)); 45 manacher(t, p, n); 46 47 /* 前缀和 */ 48 sum[0] = sum[1] = 0; 49 for(int i=2; i\u0026lt;n; i++){ 50 sum[i] = i\u0026amp;1 ? sum[i-1] : sum[i-2] + a[t[i]-\u0026#39;a\u0026#39;]; 51 } 52 53 int ans = 0; 54 for(int i=2; i\u0026lt;n; i++) // 枚举前半部分回文中心 55 { 56 int a=0, b=0; 57 if(i==p[i]){ // 如果前半部分是回文串 58 a = sum[i+p[i]-1]; 59 } 60 61 int r = (n + i+p[i]-1)/2; // 获得后半部分回文中心 62 if(r == n-1) // 前半部分为原串，没有后半部分 63 continue; 64 65 if(r+p[r] == n){ // 如果后半部分是回文串 66 b = sum[n-2] - sum[i+p[i]-1]; 67 } 68 ans = max(ans, a+b); 69 } 70 printf(\u0026#34;%d\\n\u0026#34;, ans); 71 } 72 73 return 0; 74} ","permalink":"https://blog.lordash.de/posts/solution/hdu-3613-best-reward/","summary":"Best Reward(HDU-3613) 题面 After an uphill battle, General Li won a great victory. Now the head of state decide to reward him with honor and treasures for his great exploit. One of these treasures is a necklace made up of 26 different kinds of gemstones, and the length of the necklace is n. (That is to say: n gemstones are stringed together to constitute this necklace, and each of","title":"HDU-3613 Best Reward"},{"content":"Teacher YYF(POJ-3746) 题面 As we all know, grammar is very important when learning English. Now, YYF become a teacher of a primary school. The students are good at memory so they can tell the meaning and the function (noun, verb …) of the words in the textbook. But, they cannot use these words properly.\nIn YYF’s mind, writing sentences is a good way to learn grammar. So he tells the student to write 20 sentences a day, using the word learned in the class. As YYF has a lot of student, he will receive many sentences from his student. What a horrible work to check all the sentences. You are one of YYF’s friends, so he asks you for help. You task is to write a program to check the sentences.\nTo make the work simple, YYF chooses a part of the grammar: All the words can be grouped into seven divisions (noun, pronoun, adjective, adverb, preposition, article, and verb). A verb can be transitive or intransitive. So we use \u0026ldquo;n.\u0026rdquo;, \u0026ldquo;pron.\u0026rdquo;, \u0026ldquo;adj.\u0026rdquo;, \u0026ldquo;adv.\u0026rdquo;, \u0026ldquo;prep.\u0026rdquo;, \u0026ldquo;art.\u0026rdquo;, \u0026ldquo;vt.\u0026rdquo; and \u0026ldquo;vi.\u0026rdquo; to be short of noun, pronoun, adjective, adverb, preposition, article, transitive verb and intransitive verb. If a word is marked as \u0026ldquo;v.\u0026rdquo;, it can be used as either transitive verb or intransitive verb.\nHere comes the sentence structure:\nSubject + Intransitive Verb Subject + Transitive Verb + Object Noun and pronoun can be used as Subject or Object. When using a noun, an article should be placed ahead of it. A noun can be modified by an adjective and a verb can be modified by an adverb. When an adjective is used to modify a noun, it should be put between article and noun. When an adverb is used to modify a verb, it should be put ahead of the verb. A prepositional phrase can be put ahead of Subject, between Subject and Verb, behind Intransitive Verb, between Verb and Object, or behind Object. A prepositional phrase is made up of a preposition and a noun/pronoun. In one sentence, at most one prepositional phrase is allowed. Any two parts of the sentence cannot intersect. For example, \u0026ldquo;He is a good student\u0026rdquo; is OK, but \u0026ldquo;He a good is student\u0026rdquo; is not. Every word in the dictionary will have only one function. The words are not case sensitive and Subject-Verb Agreement does not matter. That’s all the rules. Now, it\u0026rsquo;s your time to show.\n输入 The input contains only one case. The first line specifies two number N and M (1 ≤ N, M ≤ 5000). The next N lines will be the words and the functions. Every line contains a word and its function, separated by a space. The next M lines will be the sentences \u0026ndash; one sentence per line. Each sentences contains at most 20 words. Every word in the sentences will appear in the dictionary.\n输出 The output contains M lines. For each line, output \u0026ldquo;YES\u0026rdquo; if the sentence is OK, and output \u0026ldquo;NO\u0026rdquo; if not.\n样例输入 110 6 2he pron. 3see vt. 4a art. 5baby n. 6at prep. 7the art. 8airport n. 9happy adj. 10guess v. 11immediately adv. 12He guess. 13He see baby. 14Happy he see a baby. 15He immediately see a baby. 16He see a baby immediately. 17At the airport, he see a happy baby. 样例输出 1YES 2NO 3NO 4YES 5NO 6YES 提示 Please read the Problem Description carefully. Do not use your own English knowledge to construct rules.\n思路 不太符合专题内容，估计是题目拉错没删，【题解】HDU-3746 Cyclic Nacklace。网上找的用stl的实现，很灵活。\n代码 1map\u0026lt;string,string\u0026gt; mp; 2map\u0026lt;string,bool\u0026gt; ste; 3map\u0026lt;string,char\u0026gt; str, fun; 4 5void init() 6{ 7 fun[\u0026#34;n.\u0026#34;]=\u0026#39;0\u0026#39;; 8 fun[\u0026#34;pron.\u0026#34;]=\u0026#39;1\u0026#39;; 9 fun[\u0026#34;adj.\u0026#34;]=\u0026#39;2\u0026#39;; 10 fun[\u0026#34;adv.\u0026#34;]=\u0026#39;3\u0026#39;; 11 fun[\u0026#34;prep.\u0026#34;]=\u0026#39;4\u0026#39;; 12 fun[\u0026#34;art.\u0026#34;]=\u0026#39;5\u0026#39;; 13 fun[\u0026#34;vt.\u0026#34;]=\u0026#39;6\u0026#39;; 14 fun[\u0026#34;vi.\u0026#34;]=\u0026#39;7\u0026#39;; 15 fun[\u0026#34;v.\u0026#34;]=\u0026#39;8\u0026#39;; 16 17 str[\u0026#34;450\u0026#34;]=\u0026#39;A\u0026#39;; // 介词短语 18 str[\u0026#34;4520\u0026#34;]=\u0026#39;A\u0026#39;; 19 str[\u0026#34;41\u0026#34;]=\u0026#39;A\u0026#39;; 20 str[\u0026#34;1\u0026#34;]=\u0026#39;S\u0026#39;; // 主/宾语 21 str[\u0026#34;50\u0026#34;]=\u0026#39;S\u0026#39;; 22 str[\u0026#34;520\u0026#34;]=\u0026#39;S\u0026#39;; 23 str[\u0026#34;7\u0026#34;]=\u0026#39;I\u0026#39;; // 不及物谓语 24 str[\u0026#34;37\u0026#34;]=\u0026#39;I\u0026#39;; 25 str[\u0026#34;6\u0026#34;]=\u0026#39;T\u0026#39;; // 及物谓语 26 str[\u0026#34;36\u0026#34;]=\u0026#39;T\u0026#39;; 27 str[\u0026#34;8\u0026#34;]=\u0026#39;V\u0026#39;; // 通用谓语 28 str[\u0026#34;38\u0026#34;]=\u0026#39;V\u0026#39;; 29 // 句子可能的总体结构 30 ste[\u0026#34;SI\u0026#34;]=1; 31 ste[\u0026#34;STS\u0026#34;]=1; 32 ste[\u0026#34;SV\u0026#34;]=1; 33 ste[\u0026#34;SVS\u0026#34;]=1; 34 ste[\u0026#34;ASI\u0026#34;]=1; 35 ste[\u0026#34;ASTS\u0026#34;]=1; 36 ste[\u0026#34;ASV\u0026#34;]=1; 37 ste[\u0026#34;ASVS\u0026#34;]=1; 38 ste[\u0026#34;SAI\u0026#34;]=1; 39 ste[\u0026#34;SATS\u0026#34;]=1; 40 ste[\u0026#34;SAV\u0026#34;]=1; 41 ste[\u0026#34;SAVS\u0026#34;]=1; 42 ste[\u0026#34;SIA\u0026#34;]=1; 43 ste[\u0026#34;STAS\u0026#34;]=1; 44 ste[\u0026#34;SVA\u0026#34;]=1; 45 ste[\u0026#34;SVAS\u0026#34;]=1; 46 ste[\u0026#34;STSA\u0026#34;]=1; 47 ste[\u0026#34;SVSA\u0026#34;]=1; 48} 49 50bool check(string s){ 51 string res=\u0026#34;\u0026#34;, c=\u0026#34;\u0026#34;; 52 for(int i=0; i\u0026lt;s.size(); i++){ 53 c += s[i]; 54 if(str[c] \u0026gt; 0){ 55 res += str[c]; 56 c = \u0026#34;\u0026#34;; 57 } 58 } 59 res += c; 60 return ste[res]; 61} 62 63string work(string s){ 64 stringstream ss(s); 65 string st, ans; 66 while(ss \u0026gt;\u0026gt; st){ 67 int len=st.size(), flag=0; 68 st[0] = tolower(st[0]); 69 if(st[len-1] == \u0026#39;.\u0026#39;){ 70 flag = 1; 71 st.erase(--st.end()); 72 } 73 if(st[len-1] == \u0026#39;,\u0026#39;) 74 st.erase(--st.end()); 75 ans += fun[mp[st]]; 76 if(flag \u0026amp;\u0026amp; !check(ans)) 77 return \u0026#34;NO\u0026#34;; 78 } 79 return \u0026#34;YES\u0026#34;; 80} 81 82int main() 83{ 84 init(); int n, m; 85 while(cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m) 86 { 87 mp.clear(); 88 string s, s1, s2; 89 for(int i=0; i\u0026lt;n; i++){ 90 cin \u0026gt;\u0026gt; s1 \u0026gt;\u0026gt; s2; 91 mp[s1] = s2; 92 } 93 cin.get(); 94 for(int i=0; i\u0026lt;m; i++){ 95 getline(cin, s); 96 cout \u0026lt;\u0026lt; work(s) \u0026lt;\u0026lt; endl; 97 } 98 } 99} ","permalink":"https://blog.lordash.de/posts/solution/poj-3746-teacher-yyf/","summary":"Teacher YYF(POJ-3746) 题面 As we all know, grammar is very important when learning English. Now, YYF become a teacher of a primary school. The students are good at memory so they can tell the meaning and the function (noun, verb …) of the words in the textbook. But, they cannot use these words properly. In YYF’s mind, writing sentences is a good way to","title":"POJ-3746 Teacher YYF"},{"content":"Period II(FZU-1901) 题面 For each prefix with length P of a given string S,if\nS[i]=S[i+P] for i in [0..SIZE(S)-p-1],\nthen the prefix is a “period” of S. We want to all the periodic prefixs.\n输入 Input contains multiple cases.\nThe first line contains an integer T representing the number of cases. Then following T cases.\nEach test case contains a string S (1 \u0026lt;= SIZE(S) \u0026lt;= 1000000),represents the title.S consists of lowercase ,uppercase letter.\n输出 For each test case, first output one line containing \u0026ldquo;Case #x: y\u0026rdquo;, where x is the case number (starting from 1) and y is the number of periodic prefixs.Then output the lengths of the periodic prefixs in ascending order.\n样例输入 14 2ooo 3acmacmacmacmacma 4fzufzufzuf 5stostootssto 样例输出 1Case #1: 3 21 2 3 3Case #2: 6 43 6 9 12 15 16 5Case #3: 4 63 6 9 10 7Case #4: 2 89 12 提示 无\n思路 类似【题解】POJ-2752 Seek the Name, Seek the Fame。对于字符串的所有前缀，若存在循环节，输出符合条件的前缀个数与这个前缀字符串的长度。注意输出格式，行尾不得有多余空格。\n代码 1char t[mxn]; 2int nxt[mxn], ans[mxn]; 3 4void getnxt(char* t, int m) 5{ 6 int i = 0, j = -1; nxt[0] = -1; 7 while (i \u0026lt; m) 8 { 9 if (j == -1 || t[i] == t[j]) { 10 i++, j++; 11 // if (t[i] == t[j]) 12 // nxt[i] = nxt[j]; // next数组优化 13 // else 14 nxt[i] = j; 15 } else 16 j = nxt[j]; 17 } 18} 19 20int main() 21{ 22 int T, cs=1; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 23 while(T--) 24 { 25 scanf(\u0026#34;%s\u0026#34;, t); 26 int tl = strlen(t); 27 getnxt(t, tl); 28 29 int num = 0; 30 for(int i=tl; i\u0026gt;0; i=nxt[i]){ 31 ans[num++] = tl-nxt[i]; 32 } 33 printf(\u0026#34;Case #%d: %d\\n\u0026#34;, cs++, num); 34 for(int i=0; i\u0026lt;num; i++){ 35 if(i) printf(\u0026#34; \u0026#34;); 36 printf(\u0026#34;%d\u0026#34;, ans[i]); 37 } 38 printf(\u0026#34;\\n\u0026#34;); 39 } 40 return 0; 41} ","permalink":"https://blog.lordash.de/posts/solution/fzu-1901-period-ii/","summary":"Period II(FZU-1901) 题面 For each prefix with length P of a given string S,if S[i]=S[i+P] for i in [0..SIZE(S)-p-1], then the prefix is a “period” of S. We want to all the periodic prefixs. 输入 Input contains multiple cases. The first line contains an integer T representing the number of cases. Then following T cases. Each test case contains a string","title":"FZU-1901 Period II"},{"content":"Game of CS(LightOJ-1355) 题面 Jolly and Emily are two bees studying in Computer Science. Unlike other bees they are fond of playing two-player games. They used to play Tic-tac-toe, Chess etc. But now since they are in CS they invented a new game that definitely requires some knowledge of computer science.\nInitially they draw a random rooted tree (a connected graph with no cycles) in a paper which consists of n nodes, where the nodes are numbered from 0 to n-1 and 0 is the root, and the edges are weighted. Initially all the edges are unmarked. And an edge weigh w, has w identical units.\nJolly has a green marker and Emily has a red marker. Emily starts the game first and they alternate turns.\nIn each turn, a player can color one unit of an edge of the tree if that edge has some (at least one) uncolored units and the edge can be traversed from the root using only free edges. An edge is said to be free if the edge is not fully colored (may be uncolored or partially colored).\nIf it\u0026rsquo;s Emily\u0026rsquo;s turn, she finds such an edge and colors one unit of it using the red marker.\nIf it\u0026rsquo;s Jolly\u0026rsquo;s turn, he finds such an edge and colors one unit of it with the green marker.\nThe player, who can\u0026rsquo;t find any edges to color, loses the game.\nFor example, Fig 1 shows the initial tree they have drawn. The tree contains four nodes and the weights of the edge (0, 1), (1, 2) and (0, 3) are 1, 1 and 2 respectively. Emily starts the game. She can color any edge she wants; she colors one unit of edge (0 1) with her red marker (Fig 2). Since the weight of edge (0 1) is 1 so, this edge is fully colored.\nFig 1 Fig 2 Fig 3 Fig 4 Now it\u0026rsquo;s Jolly\u0026rsquo;s turn. He can only color one unit of edge (0 3). He can\u0026rsquo;t color edge (1 2) since if he wants to traverse it from the root (0), he needs to use (0, 1) which is fully colored already. So, he colors one unit of edge (0 3) with his green marker (Fig 3). And now Emily has only one option and she colors the other unit of (0 3) with the red marker (Fig 4). So, both units of edge (0 3) are colored. Now it\u0026rsquo;s Jolly\u0026rsquo;s turn but he has no move left. Thus Emily wins. But if Emily would have colored edge (1 2) instead of edge (0 1), then Jolly would win. So, for this tree Emily will surely win if both of them play optimally.\n输入 Input starts with an integer T ( ≤ 500), denoting the number of test cases.\nEach case starts with a line containing an integer n (2 ≤ n ≤ 1000). Each of the next n-1 lines contains two integers u v w (0 ≤ u, v \u0026lt; n, u ≠ v, 1 ≤ w ≤ 109) denoting that there is an edge between u and v and their weight is w. You can assume that the given tree is valid.\n输出 For each case, print the case number and the name of the winner. See the samples for details.\n样例输入 1 4 2 4 3 0 1 1 4 1 2 1 5 0 3 2 6 5 7 0 1 1 8 1 2 2 9 0 3 3 10 0 4 7 11 3 12 0 1 1 13 0 2 1 14 4 15 0 1 1 16 1 2 1 17 1 3 1 样例输出 1Case 1: Emily 2Case 2: Emily 3Case 3: Jolly 4Case 4: Emily 提示 无\n思路 给定图，以0为根节点，每条边有一个长度，两个人轮流操作，每次为一条边上色，上一个单位长度，当一条边的颜色被涂满，则算作是减掉整段子树。判断先手是否必胜。\nSG定理，对于当前节点u，每次考虑字节点v，u-v边的长度为l 当l为1时：sg(u) ^= (sg(v) + 1) 当l为奇数时： 需要判断sg(v)奇偶性，奇数-1，偶数+1； 当l为偶数时：sg(u) ^= sg(v)\n代码 1vector\u0026lt;int\u0026gt; g[mxm]; 2int W[mxm][mxm]; 3 4int getSg(int u, int p){ 5 int nim = 0; 6 for(int i=0; i\u0026lt;g[u].size(); i++){ 7 int v = g[u][i]; 8 if(v != p){ 9 int t = getSg(v, u); 10 if(W[u][v] == 1) 11 nim ^= t+1; 12 else if(W[u][v] \u0026amp; 1) 13 nim ^= t + (t\u0026amp;1 ? -1 : 1); 14 else 15 nim ^= t; 16 } 17 } 18 return nim; 19} 20 21int main() 22{ 23 int T, cs=1; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 24 while(T--) 25 { 26 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 27 for(int i=0; i\u0026lt;n; i++) g[i].clear(); 28 29 for(int i=1; i\u0026lt;n; i++){ 30 int u, v, w; 31 scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;u, \u0026amp;v, \u0026amp;w); 32 g[u].push_back(v); 33 g[v].push_back(u); 34 W[u][v] = W[v][u] = w; 35 } 36 printf(\u0026#34;Case %d: \u0026#34;, cs++); 37 if(getSg(0, -1)) 38 printf(\u0026#34;Emily\\n\u0026#34;); 39 else 40 printf(\u0026#34;Jolly\\n\u0026#34;); 41 } 42 return 0; 43} ","permalink":"https://blog.lordash.de/posts/solution/lightoj-1355-game-of-cs/","summary":"Game of CS(LightOJ-1355) 题面 Jolly and Emily are two bees studying in Computer Science. Unlike other bees they are fond of playing two-player games. They used to play Tic-tac-toe, Chess etc. But now since they are in CS they invented a new game that definitely requires some knowledge of computer science. Initially they draw a random rooted tree (a connected graph with no cycles) in a paper which consists","title":"LightOJ-1355 Game of CS"},{"content":"How many(HDU-2609) 题面 Give you n ( n \u0026lt; 10000) necklaces ,the length of necklace will not large than 100,tell me How many kinds of necklaces total have.(if two necklaces can equal by rotating ,we say the two necklaces are some). For example 0110 express a necklace, you can rotate it. 0110 -\u0026gt; 1100 -\u0026gt; 1001 -\u0026gt; 0011-\u0026gt; 0110.\n输入 The input contains multiple test cases. Each test case include: first one integers n. (2\u0026lt;=n\u0026lt;=10000) Next n lines follow. Each line has a equal length character string. (string only include \u0026lsquo;0\u0026rsquo;,\u0026lsquo;1\u0026rsquo;).\n输出 For each test case output a integer , how many different necklaces.\n样例输入 14 20110 31100 41001 50011 64 71010 80101 91000 100001 样例输出 11 22 提示 无\n思路 先用最小表示法，求出最小字典序，然后map去重。\n代码 1string s; 2 3int getmin(int n) 4{ 5 int i=0, j=1, k=0; 6 while(i\u0026lt;n \u0026amp;\u0026amp; j\u0026lt;n \u0026amp;\u0026amp; k\u0026lt;n) 7 { 8 if(s[(i+k)%n] == s[(j+k)%n]){ 9 k++; 10 }else{ 11 if(s[(i+k)%n] \u0026gt; s[(j+k)%n]) 12 i+=k+1; 13 else 14 j+=k+1; 15 k = 0; 16 if(i == j) i++; 17 } 18 } 19 return min(i, j); 20} 21 22int main() 23{ 24 int n; 25 while(~scanf(\u0026#34;%d\u0026#34;, \u0026amp;n)) 26 { 27 map\u0026lt;string, int\u0026gt; mp; 28 int ans = 0; 29 for(int i=0; i\u0026lt;n; i++) 30 { 31 cin \u0026gt;\u0026gt; s; 32 string ss = \u0026#34;\u0026#34;; 33 int st = getmin(s.length()); 34 for(int i=st; i\u0026lt;s.length(); i++) ss += s[i]; 35 for(int i=0; i\u0026lt;st; i++) ss += s[i]; 36 if(mp[ss] == 0){ 37 mp[ss] = 1; 38 ans++; 39 } 40 } 41 printf(\u0026#34;%d\\n\u0026#34;, ans); 42 } 43 return 0; 44} ","permalink":"https://blog.lordash.de/posts/solution/hdu-2609-how-many/","summary":"How many(HDU-2609) 题面 Give you n ( n \u0026lt; 10000) necklaces ,the length of necklace will not large than 100,tell me How many kinds of necklaces total have.(if two necklaces can equal by rotating ,we say the two necklaces are some). For example 0110 express a necklace, you can rotate it. 0110 -\u0026gt; 1100 -\u0026gt; 1001 -\u0026gt; 0011-\u0026gt; 0110. 输入 The input contains multiple test cases. Each test","title":"HDU-2609 How many"},{"content":"String Problem(HDU-3374) 题面 Give you a string with length N, you can generate N strings by left shifts. For example let consider the string “SKYLONG”, we can generate seven strings: String Rank SKYLONG 1 KYLONGS 2 YLONGSK 3 LONGSKY 4 ONGSKYL 5 NGSKYLO 6 GSKYLON 7 and lexicographically first of them is GSKYLON, lexicographically last is YLONGSK, both of them appear only once. Your task is easy, calculate the lexicographically fisrt string’s Rank (if there are multiple answers, choose the smallest one), its times, lexicographically last string’s Rank (if there are multiple answers, choose the smallest one), and its times also.\n输入 Each line contains one line the string S with length N (N \u0026lt;= 1000000) formed by lower case letters.\n输出 Output four integers separated by one space, lexicographically fisrt string’s Rank (if there are multiple answers, choose the smallest one), the string’s times in the N generated strings, lexicographically last string’s Rank (if there are multiple answers, choose the smallest one), and its times also.\n样例输入 1abcder 2aaaaaa 3ababab 样例输出 11 1 6 1 21 6 1 6 31 3 2 3 提示 无\n思路 先用最小表示法，求出最大最小字典序的子串，然后跑KMP。\n代码 1char s[mxn]; 2int nxt[mxn]; 3 4void getnxt(char* t, int m) 5{ 6 int i = 0, j = -1; nxt[0] = -1; 7 while (i \u0026lt; m) 8 { 9 if (j == -1 || t[i] == t[j]) { 10 i++, j++; 11 // if (t[i] == t[j]) 12 // nxt[i] = nxt[j]; // next数组优化 13 // else 14 nxt[i] = j; 15 } else 16 j = nxt[j]; 17 } 18} 19 20int KMP(char* s, char* t, int n, int m) 21{ 22 int i = 0, j = 0, ans = 0; 23 while (i \u0026lt; n) 24 { 25 if (j == -1 || s[i] == t[j]) { 26 i++, j++; 27 if (j \u0026gt;= m) { // 匹配 28 ans++; 29 j = nxt[j]; 30 // return i-j; 31 } 32 } else 33 j = nxt[j]; 34 } 35 return ans; 36 // return -1; 37} 38 39int getmin(char* s, int n, int cd) // cd 0:最小 1:最大 40{ 41 int i=0, j=1, k=0; 42 while(i\u0026lt;n \u0026amp;\u0026amp; j\u0026lt;n \u0026amp;\u0026amp; k\u0026lt;n) 43 { 44 if(s[(i+k)%n] == s[(j+k)%n]){ 45 k++; 46 }else{ 47 if((s[(i+k)%n] \u0026gt; s[(j+k)%n]) ^ cd) 48 i+=k+1; 49 else 50 j+=k+1; 51 k = 0; 52 if(i == j) i++; 53 } 54 } 55 return min(i, j); 56} 57 58int main() 59{ 60 while(~scanf(\u0026#34;%s\u0026#34;, s)) 61 { 62 int sl = strlen(s); 63 int id1 = getmin(s, sl, 0); // 最小表示 64 int id2 = getmin(s, sl, 1); // 最大表示 65 66 for(int i=0; i\u0026lt;sl; i++) s[i+sl] = s[i]; 67 s[sl+sl] = \u0026#39;\\0\u0026#39;; 68 69 getnxt(s+id1, sl); 70 int ans1 = KMP(s, s+id1, sl+sl-1, sl); 71 72 getnxt(s+id2, sl); 73 int ans2 = KMP(s, s+id2, sl+sl-1, sl); 74 75 printf(\u0026#34;%d %d %d %d\\n\u0026#34;, id1+1, ans1, id2+1, ans2); 76 } 77 return 0; 78} ","permalink":"https://blog.lordash.de/posts/solution/hdu-3374-string-problem/","summary":"String Problem(HDU-3374) 题面 Give you a string with length N, you can generate N strings by left shifts. For example let consider the string “SKYLONG”, we can generate seven strings: String Rank SKYLONG 1 KYLONGS 2 YLONGSK 3 LONGSKY 4 ONGSKYL 5 NGSKYLO 6 GSKYLON 7 and lexicographically first of them is GSKYLON, lexicographically last is YLONGSK, both of them","title":"HDU-3374 String Problem"},{"content":"简介 最小表示法，求所有与某个字符串循环同构的字符串中，字典序最小的那个。比如说一个字符串lordash，它长度为7，也就是说最多有七种循环同构的方法。\nlordash、ordashl、rdashlo、dashlor、ashlord、shlorda、hlordas。\n这几个串在原串上的开始位置分别是0,1,2,3,4,5,6。字典序最小的同构即是以4为起点的那个。\n朴素算法 给出一个朴素的算法，我们每次比较i和j开始的循环同构，把当前比较到的位置记作k，每次遇到不一样的字符时便把大的跳过，最后剩下的就是最优解。最坏时间复杂度$ O(|S|^{2}) $。\n实现代码如下：\n1int simple(char* s, int n) 2{ 3 int i=0, j=1, k=0; 4 while(i\u0026lt;n \u0026amp;\u0026amp; j\u0026lt;n \u0026amp;\u0026amp; k\u0026lt;n) 5 { 6 if(s[(i+k)%n] == s[(j+k)%n]){ 7 k++; 8 }else{ 9 if(s[(i+k)%n] \u0026gt; s[(j+k)%n]) 10 i++; 11 else 12 j++; 13 k = 0; 14 if(i == j) i++; 15 } 16 } 17 return min(i, j); 18} 最小表示法O(|S|) 如果比较起始位置$i$和起始位置$j$发现$S[i,i+1,\\ldots,i+k-1]=S[j,j+1,\\ldots,j+k-1]$且$S[i+k] \\lt S[j+k]$，则起始位置$j,j+1,\\ldots,j+k$都不合法。对于每个数字$0 \\le l \\le k$都有起始位置$i+l$比起始位置$j+l$优，因为$S[i+l,i+l+1, \\ldots,i+k-1]=S[j+l,j+l+1,\\ldots,j+k-1]$且$S[i+k] \\lt S[j+k]$ 。\n代码如下：\n1int getmin(char* s, int n) 2{ 3 int i=0, j=1, k=0; 4 while(i\u0026lt;n \u0026amp;\u0026amp; j\u0026lt;n \u0026amp;\u0026amp; k\u0026lt;n) 5 { 6 if(s[(i+k)%n] == s[(j+k)%n]){ 7 k++; 8 }else{ 9 if(s[(i+k)%n] \u0026gt; s[(j+k)%n]) 10 i+=k+1; 11 else 12 j+=k+1; 13 k = 0; 14 if(i == j) i++; 15 } 16 } 17 return min(i, j); 18} 模板 1char s[mxn]; 2 3int simple(char* s, int n) 4{ 5 int i=0, j=1, k=0; 6 while(i\u0026lt;n \u0026amp;\u0026amp; j\u0026lt;n \u0026amp;\u0026amp; k\u0026lt;n) 7 { 8 if(s[(i+k)%n] == s[(j+k)%n]){ 9 k++; 10 }else{ 11 if(s[(i+k)%n] \u0026gt; s[(j+k)%n]) 12 i++; 13 else 14 j++; 15 k = 0; 16 if(i == j) i++; 17 } 18 } 19 return min(i, j); 20} 21 22int getmin(char* s, int n) 23{ 24 int i=0, j=1, k=0; 25 while(i\u0026lt;n \u0026amp;\u0026amp; j\u0026lt;n \u0026amp;\u0026amp; k\u0026lt;n) 26 { 27 if(s[(i+k)%n] == s[(j+k)%n]){ 28 k++; 29 }else{ 30 if(s[(i+k)%n] \u0026gt; s[(j+k)%n]) 31 i+=k+1; 32 else 33 j+=k+1; 34 k = 0; 35 if(i == j) i++; 36 } 37 } 38 return min(i, j); 39} 40 41int main() 42{ 43 scanf(\u0026#34;%s\u0026#34;, s); 44 int n = strlen(s); 45 printf(\u0026#34;%d\\n\u0026#34;, simple(s, n)); 46 printf(\u0026#34;%d\\n\u0026#34;, getmin(s, n)); 47 return 0; 48} ","permalink":"https://blog.lordash.de/posts/algorithm/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/","summary":"简介 最小表示法，求所有与某个字符串循环同构的字符串中，字典序最小的那个。比如说一个字符串lordash，它长度为7，也就是说最多有七种循环同","title":"最小表示法"},{"content":"Corporate Identity(HDU-2328) 题面 Beside other services, ACM helps companies to clearly state their “corporate identity”, which includes company logo but also other signs, like trademarks. One of such companies is Internet Building Masters (IBM), which has recently asked ACM for a help with their new identity. IBM do not want to change their existing logos and trademarks completely, because their customers are used to the old ones. Therefore, ACM will only change existing trademarks instead of creating new ones.\nAfter several other proposals, it was decided to take all existing trademarks and find the longest common sequence of letters that is contained in all of them. This sequence will be graphically emphasized to form a new logo. Then, the old trademarks may still be used while showing the new identity.\nYour task is to find such a sequence.\n输入 The input contains several tasks. Each task begins with a line containing a positive integer N, the number of trademarks (2 ≤ N ≤ 4000). The number is followed by N lines, each containing one trademark. Trademarks will be composed only from lowercase letters, the length of each trademark will be at least 1 and at most 200 characters.\nAfter the last trademark, the next task begins. The last task is followed by a line containing zero.\n输出 For each task, output a single line containing the longest string contained as a substring in all trademarks. If there are several strings of the same length, print the one that is lexicographically smallest. If there is no such non-empty string, output the words “IDENTITY LOST” instead.\n样例输入 13 2aabbaabb 3abbababb 4bbbbbabb 52 6xyz 7abc 80 样例输出 1abb 2IDENTITY LOST 提示 无\n思路 同【题解】POJ-3080 Blue Jeans，枚举子串，暴力KMP即可。\n代码 1char s[mxn][mxm], t[mxm], ans[mxm]; 2int nxt[mxm]; 3 4void getnxt(char* t, int m) 5{ 6 int i = 0, j = -1; nxt[0] = -1; 7 while (i \u0026lt; m) 8 { 9 if (j == -1 || t[i] == t[j]) { 10 i++, j++; 11 // if (t[i] == t[j]) 12 // nxt[i] = nxt[j]; // next数组优化 13 // else 14 nxt[i] = j; 15 } else 16 j = nxt[j]; 17 } 18} 19 20int KMP(char* s, char* t, int n, int m) 21{ 22 int i = 0, j = 0, ans = 0; 23 while (i \u0026lt; n) 24 { 25 if (j == -1 || s[i] == t[j]) { 26 i++, j++; 27 if (j \u0026gt;= m) { // 匹配 28 // ans++; 29 // j = nxt[j]; 30 return i-j; 31 } 32 } else 33 j = nxt[j]; 34 } 35 // return ans; 36 return -1; 37} 38 39int main() 40{ 41 int n; 42 while(~scanf(\u0026#34;%d\u0026#34;, \u0026amp;n) \u0026amp;\u0026amp; n) 43 { 44 for(int i=0; i\u0026lt;n; i++) scanf(\u0026#34;%s\u0026#34;, s[i]); 45 int sl = strlen(s[0]), f=0; 46 47 for(int i=0; i\u0026lt;sl; i++) // 枚举模式串起点 48 { 49 int tl = 0, k; 50 for(int j=i; j\u0026lt;sl; j++) // 枚举模式串长度 51 { 52 t[tl++] = s[0][j]; 53 t[tl] = \u0026#39;\\0\u0026#39;; 54 getnxt(t, tl); 55 for(k=0; k\u0026lt;n; k++) // 枚举所有文本串 56 if(KMP(s[k], t, sl, tl) == -1) 57 break; 58 if(k\u0026gt;=n) // 所有串公共子串 59 { 60 if(!f || tl\u0026gt;strlen(ans)){ // 长度最长 61 strcpy(ans, t); f=1; 62 }else if(tl==strlen(ans) \u0026amp;\u0026amp; strcmp(t, ans)\u0026lt;0){ // 字典序最小 63 strcpy(ans, t); 64 } 65 } 66 } 67 } 68 if (!f) 69 printf(\u0026#34;IDENTITY LOST\\n\u0026#34;); 70 else 71 printf(\u0026#34;%s\\n\u0026#34;, ans); 72 } 73 return 0; 74} ","permalink":"https://blog.lordash.de/posts/solution/hdu-2328-corporate-identity/","summary":"Corporate Identity(HDU-2328) 题面 Beside other services, ACM helps companies to clearly state their “corporate identity”, which includes company logo but also other signs, like trademarks. One of such companies is Internet Building Masters (IBM), which has recently asked ACM for a help with their new identity. IBM do not want to","title":"HDU-2328 Corporate Identity"},{"content":"Substrings(HDU-1238) 题面 You are given a number of case-sensitive strings of alphabetic characters, find the largest string X, such that either X, or its inverse can be found as a substring of any of the given strings.\n输入 The first line of the input file contains a single integer t (1 \u0026lt;= t \u0026lt;= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains a single integer n (1 \u0026lt;= n \u0026lt;= 100), the number of given strings, followed by n lines, each representing one string of minimum length 1 and maximum length 100. There is no extra white space before and after a string.\n输出 There should be one line per test case containing the length of the largest string found.\n样例输入 12 23 3ABCD 4BCDFF 5BRCD 62 7rose 8orchid 样例输出 12 22 提示 无\n思路 枚举子串，暴力KMP即可。\n代码 1char s[105][mxn], t[mxn], t2[mxn]; 2int nxt[mxn], nxt2[mxn], len[mxn]; 3 4void getnxt(char* t, int m) 5{ 6 int i = 0, j = -1; nxt[0] = -1; 7 while (i \u0026lt; m) 8 { 9 if (j == -1 || t[i] == t[j]) { 10 i++, j++; 11 // if (t[i] == t[j]) 12 // nxt[i] = nxt[j]; // next数组优化 13 // else 14 nxt[i] = j; 15 } else 16 j = nxt[j]; 17 } 18} 19 20int KMP(char* s, char* t, int n, int m) 21{ 22 int i = 0, j = 0, ans = 0; 23 while (i \u0026lt; n) 24 { 25 if (j == -1 || s[i] == t[j]) { 26 i++, j++; 27 if (j \u0026gt;= m) { // 匹配 28 // ans++; 29 // j = nxt[j]; 30 return i-j; 31 } 32 } else 33 j = nxt[j]; 34 } 35 // return ans; 36 return -1; 37} 38 39int main() 40{ 41 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 42 while(T--) 43 { 44 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 45 for(int i=0; i\u0026lt;n; i++){ 46 scanf(\u0026#34;%s\u0026#34;, s[i]); 47 len[i] = strlen(s[i]); 48 } 49 int ans=0; 50 for(int i=0; i\u0026lt;len[0]; i++) // 枚举模式串起点 51 { 52 int tl = 0, k; 53 for(int j=i; j\u0026lt;len[0]; j++) // 枚举模式串长度 54 { 55 t[tl++] = s[0][j]; 56 for(int x=0; x\u0026lt;tl; x++) t2[x] = t[tl-x-1]; 57 t[tl] = t2[tl] = \u0026#39;\\0\u0026#39;; 58 getnxt(t, tl); 59 getnxt(t2, tl); 60 for(k=0; k\u0026lt;n; k++) // 枚举所有文本串 61 if(KMP(s[k], t, len[k], tl) == -1 \u0026amp;\u0026amp; KMP(s[k], t2, len[k], tl) == -1) 62 break; 63 if(k\u0026gt;=n) // 满足条件 64 ans = max(ans, tl); 65 } 66 } 67 printf(\u0026#34;%d\\n\u0026#34;, ans); 68 } 69 return 0; 70} ","permalink":"https://blog.lordash.de/posts/solution/hdu-1238-substrings/","summary":"Substrings(HDU-1238) 题面 You are given a number of case-sensitive strings of alphabetic characters, find the largest string X, such that either X, or its inverse can be found as a substring of any of the given strings. 输入 The first line of the input file contains a single integer t (1 \u0026lt;= t \u0026lt;= 10), the number of test cases, followed by the input data for each test","title":"HDU-1238 Substrings"},{"content":"Clairewd’s message(HDU-4300) 题面 Clairewd is a member of FBI. After several years concealing in BUPT, she intercepted some important messages and she was preparing for sending it to ykwd. They had agreed that each letter of these messages would be transfered to another one according to a conversion table. Unfortunately, GFW(someone\u0026rsquo;s name, not what you just think about) has detected their action. He also got their conversion table by some unknown methods before. Clairewd was so clever and vigilant that when she realized that somebody was monitoring their action, she just stopped transmitting messages. But GFW knows that Clairewd would always firstly send the ciphertext and then plaintext(Note that they won\u0026rsquo;t overlap each other). But he doesn\u0026rsquo;t know how to separate the text because he has no idea about the whole message. However, he thinks that recovering the shortest possible text is not a hard task for you. Now GFW will give you the intercepted text and the conversion table. You should help him work out this problem.\n输入 The first line contains only one integer T, which is the number of test cases. Each test case contains two lines. The first line of each test case is the conversion table S. S[i] is the ith latin letter\u0026rsquo;s cryptographic letter. The second line is the intercepted text which has n letters that you should recover. It is possible that the text is complete.\nRange of test data: T\u0026lt;= 100 ; n\u0026lt;= 100000;\n输出 For each test case, output one line contains the shorest possible complete text.\n样例输入 12 2abcdefghijklmnopqrstuvwxyz 3abcdab 4qwertyuiopasdfghjklzxcvbnm 5qwertabcde 样例输出 1abcdabcd 2qwertabcde 提示 无\n思路 给你一个a-z的对照表，以及一个 密文+不完整明文 的字符串。求最短的 密文+完整明文。先解密前半部分，再求一个最大公共前缀后缀。注意考虑前后缀重叠的情况，即next[len]\u0026gt;len/2。\n代码 1char s[mxn], t[mxn], p[mxn]; 2int nxt[mxn]; 3 4void getnxt(char* t, int m) 5{ 6 int i = 0, j = -1; nxt[0] = -1; 7 while (i \u0026lt; m) 8 { 9 if (j == -1 || t[i] == t[j]) { 10 i++, j++; 11 // if (t[i] == t[j]) 12 // nxt[i] = nxt[j]; // next数组优化 13 // else 14 nxt[i] = j; 15 } else 16 j = nxt[j]; 17 } 18} 19 20int main() 21{ 22 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 23 while(T--) 24 { 25 for(int i=0; i\u0026lt;26; i++){ 26 char c; scanf(\u0026#34; %c\u0026#34;, \u0026amp;c); 27 p[c-\u0026#39;a\u0026#39;] = \u0026#39;a\u0026#39;+i; 28 } 29 30 scanf(\u0026#34;%s\u0026#34;, s); 31 int n = strlen(s); 32 33 int m = (n+1)/2; 34 for(int i=0; i\u0026lt;m; i++){ 35 t[i] = p[s[i]-\u0026#39;a\u0026#39;]; 36 t[i+m] = s[i+m]; 37 } 38 getnxt(t, n); 39 40 m = nxt[n]; 41 if(m \u0026gt; n/2) 42 m = n/2; 43 m = n-m; 44 45 for(int i=0; i\u0026lt;m; i++){ 46 printf(\u0026#34;%c\u0026#34;, s[i]); 47 } 48 for(int i=0; i\u0026lt;m; i++){ 49 printf(\u0026#34;%c\u0026#34;, p[s[i]-\u0026#39;a\u0026#39;]); 50 } 51 printf(\u0026#34;\\n\u0026#34;); 52 } 53 return 0; 54} ","permalink":"https://blog.lordash.de/posts/solution/hdu-4300-clairewds-message/","summary":"Clairewd’s message(HDU-4300) 题面 Clairewd is a member of FBI. After several years concealing in BUPT, she intercepted some important messages and she was preparing for sending it to ykwd. They had agreed that each letter of these messages would be transfered to another one according to a conversion table. Unfortunately, GFW(someone\u0026rsquo;s name, not what you just think about) has detected","title":"HDU-4300 Clairewd’s message"},{"content":"Count the string(HDU-3336) 题面 It is well known that AekdyCoin is good at string problems as well as number theory problems. When given a string s, we can write down all the non-empty prefixes of this string. For example: s: \u0026ldquo;abab\u0026rdquo; The prefixes are: \u0026ldquo;a\u0026rdquo;, \u0026ldquo;ab\u0026rdquo;, \u0026ldquo;aba\u0026rdquo;, \u0026ldquo;abab\u0026rdquo; For each prefix, we can count the times it matches in s. So we can see that prefix \u0026ldquo;a\u0026rdquo; matches twice, \u0026ldquo;ab\u0026rdquo; matches twice too, \u0026ldquo;aba\u0026rdquo; matches once, and \u0026ldquo;abab\u0026rdquo; matches once. Now you are asked to calculate the sum of the match times for all the prefixes. For \u0026ldquo;abab\u0026rdquo;, it is 2 + 2 + 1 + 1 = 6. The answer may be very large, so output the answer mod 10007.\n输入 The first line is a single integer T, indicating the number of test cases. For each case, the first line is an integer n (1 \u0026lt;= n \u0026lt;= 200000), which is the length of string s. A line follows giving the string s. The characters in the strings are all lower-case letters.\n输出 For each case, output only one number: the sum of the match times for all the prefixes of s mod 10007.\n样例输入 11 24 3abab 样例输出 16 提示 无\n思路 求next数组，每个相等的前后缀都会对它的回溯+1贡献。\n代码 1char t[mxn]; 2int nxt[mxn], ans[mxn]; 3 4void getnxt(char* t, int m) 5{ 6 int i = 0, j = -1; nxt[0] = -1; 7 while (i \u0026lt; m) 8 { 9 if (j == -1 || t[i] == t[j]) { 10 i++, j++; 11 // if (t[i] == t[j]) 12 // nxt[i] = nxt[j]; // next数组优化 13 // else 14 nxt[i] = j; 15 } else 16 j = nxt[j]; 17 } 18} 19 20int main() 21{ 22 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 23 while(T--) 24 { 25 int m, mod = 10007; 26 scanf(\u0026#34;%d %s\u0026#34;, \u0026amp;m, t); 27 getnxt(t, m); 28 memset(ans, 0 ,sizeof(ans)); 29 int sum = 0; 30 for(int i=1; i\u0026lt;=m; i++){ 31 ans[i] = ans[nxt[i]] + 1; 32 sum = (sum + ans[i]) % mod; 33 } 34 printf(\u0026#34;%d\\n\u0026#34;, sum); 35 } 36 return 0; 37} ","permalink":"https://blog.lordash.de/posts/solution/hdu-3336-count-the-string/","summary":"Count the string(HDU-3336) 题面 It is well known that AekdyCoin is good at string problems as well as number theory problems. When given a string s, we can write down all the non-empty prefixes of this string. For example: s: \u0026ldquo;abab\u0026rdquo; The prefixes are: \u0026ldquo;a\u0026rdquo;, \u0026ldquo;ab\u0026rdquo;, \u0026ldquo;aba\u0026rdquo;, \u0026ldquo;abab\u0026rdquo; For each prefix, we can count the times it matches in s. So we can see that prefix \u0026ldquo;a\u0026rdquo; matches twice,","title":"HDU-3336 Count the string"},{"content":"Simpsons’ Hidden Talents(HDU-2594) 题面 Homer: Marge, I just figured out a way to discover some of the talents we weren’t aware we had. Marge: Yeah, what is it? Homer: Take me for example. I want to find out if I have a talent in politics, OK? Marge: OK. Homer: So I take some politician’s name, say Clinton, and try to find the length of the longest prefix in Clinton’s name that is a suffix in my name. That’s how close I am to being a politician like Clinton Marge: Why on earth choose the longest prefix that is a suffix??? Homer: Well, our talents are deeply hidden within ourselves, Marge. Marge: So how close are you? Homer: 0! Marge: I’m not surprised. Homer: But you know, you must have some real math talent hidden deep in you. Marge: How come? Homer: Riemann and Marjorie gives 3!!! Marge: Who the heck is Riemann? Homer: Never mind. Write a program that, when given strings s1 and s2, finds the longest prefix of s1 that is a suffix of s2.\n输入 Input consists of two lines. The first line contains s1 and the second line contains s2. You may assume all letters are in lowercase.\n输出 Output consists of a single line that contains the longest string that is a prefix of s1 and a suffix of s2, followed by the length of that prefix. If the longest such string is the empty string, then the output should be 0. The lengths of s1 and s2 will be at most 50000.\n样例输入 1clinton 2homer 3riemann 4marjorie 样例输出 10 2rie 3 提示 无\n思路 求最长的相等的S的前缀与T的后缀。将S和T拼接起来，求next数组即可，注意答案与原长求min。\n代码 1char s[mxn], t[mxn]; 2int nxt[mxn]; 3 4void getnxt(char* t, int m) 5{ 6 int i = 0, j = -1; nxt[0] = -1; 7 while (i \u0026lt; m) 8 { 9 if (j == -1 || t[i] == t[j]) { 10 i++, j++; 11 // if (t[i] == t[j]) 12 // nxt[i] = nxt[j]; // next数组优化 13 // else 14 nxt[i] = j; 15 } else 16 j = nxt[j]; 17 } 18} 19 20int main() 21{ 22 while(~scanf(\u0026#34;%s %s\u0026#34;, s, t)) 23 { 24 int n = strlen(s), m = strlen(t); 25 strcpy(s+n, t); 26 getnxt(s, n+m); 27 int ans = min(nxt[n+m], min(n, m)); 28 if(ans) 29 printf(\u0026#34;%s \u0026#34;, s+n+m-ans); 30 printf(\u0026#34;%d\\n\u0026#34;, ans); 31 } 32 return 0; 33} ","permalink":"https://blog.lordash.de/posts/solution/hdu-2594-simpsons-hidden-talents/","summary":"Simpsons’ Hidden Talents(HDU-2594) 题面 Homer: Marge, I just figured out a way to discover some of the talents we weren’t aware we had. Marge: Yeah, what is it? Homer: Take me for example. I want to find out if I have a talent in politics, OK? Marge: OK. Homer: So I take some po","title":"HDU-2594 Simpsons’ Hidden Talents"},{"content":"Blue Jeans (POJ-3080) 题面 The Genographic Project is a research partnership between IBM and The National Geographic Society that is analyzing DNA from hundreds of thousands of contributors to map how the Earth was populated.\nAs an IBM researcher, you have been tasked with writing a program that will find commonalities amongst given snippets of DNA that can be correlated with individual survey information to identify new genetic markers.\nA DNA base sequence is noted by listing the nitrogen bases in the order in which they are found in the molecule. There are four bases: adenine (A), thymine (T), guanine (G), and cytosine (C). A 6-base DNA sequence could be represented as TAGACC.\nGiven a set of DNA base sequences, determine the longest series of bases that occurs in all of the sequences.\n输入 Input to this problem will begin with a line containing a single integer n indicating the number of datasets. Each dataset consists of the following components:\nA single positive integer m (2 \u0026lt;= m \u0026lt;= 10) indicating the number of base sequences in this dataset. m lines each containing a single base sequence consisting of 60 bases. 输出 For each dataset in the input, output the longest base subsequence common to all of the given base sequences. If the longest common subsequence is less than three bases in length, display the string \u0026ldquo;no significant commonalities\u0026rdquo; instead. If multiple subsequences of the same longest length exist, output only the subsequence that comes first in alphabetical order.\n样例输入 13 22 3GATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATA 4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 53 6GATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATA 7GATACTAGATACTAGATACTAGATACTAAAGGAAAGGGAAAAGGGGAAAAAGGGGGAAAA 8GATACCAGATACCAGATACCAGATACCAAAGGAAAGGGAAAAGGGGAAAAAGGGGGAAAA 93 10CATCATCATCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC 11ACATCATCATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 12AACATCATCATTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT 样例输出 1no significant commonalities 2AGATAC 3CATCATCAT 提示 无\n思路 最多10个串，每个串最长60，n^3暴力即可。\n代码 1char s[15][mxn], t[mxn], ans[mxn]; 2int nxt[mxn]; 3 4void getnxt(char* t, int m) 5{ 6 int i = 0, j = -1; nxt[0] = -1; 7 while (i \u0026lt; m) 8 { 9 if (j == -1 || t[i] == t[j]) { 10 i++, j++; 11 // if (t[i] == t[j]) 12 // nxt[i] = nxt[j]; // next数组优化 13 // else 14 nxt[i] = j; 15 } else 16 j = nxt[j]; 17 } 18} 19 20int KMP(char* s, char* t, int n, int m) 21{ 22 int i = 0, j = 0, ans = 0; 23 while (i \u0026lt; n) 24 { 25 if (j == -1 || s[i] == t[j]) { 26 i++, j++; 27 if (j \u0026gt;= m) { // 匹配 28 // ans++; 29 // j = nxt[j]; 30 return i-j; 31 } 32 } else 33 j = nxt[j]; 34 } 35 // return ans; 36 return -1; 37} 38 39int main() 40{ 41 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 42 while(T--) 43 { 44 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 45 for(int i=0; i\u0026lt;n; i++) scanf(\u0026#34;%s\u0026#34;, s[i]); 46 int sl = strlen(s[0]), f=0; 47 48 for(int i=0; i\u0026lt;sl; i++) // 枚举模式串起点 49 { 50 int tl = 0, k; 51 for(int j=i; j\u0026lt;sl; j++) // 枚举模式串长度 52 { 53 t[tl++] = s[0][j]; 54 t[tl] = \u0026#39;\\0\u0026#39;; 55 getnxt(t, tl); 56 for(k=0; k\u0026lt;n; k++) // 枚举所有文本串 57 if(KMP(s[k], t, sl, tl) == -1) 58 break; 59 if(k\u0026gt;=n) // 所有串公共子串 60 { 61 if(!f || tl\u0026gt;strlen(ans)){ // 长度最长 62 strcpy(ans, t); f=1; 63 }else if(tl==strlen(ans) \u0026amp;\u0026amp; strcmp(t, ans)\u0026lt;0){ // 字典序最小 64 strcpy(ans, t); 65 } 66 } 67 } 68 } 69 if (!f || strlen(ans)\u0026lt;3) 70 printf(\u0026#34;no significant commonalities\\n\u0026#34;); 71 else 72 printf(\u0026#34;%s\\n\u0026#34;, ans); 73 } 74 return 0; 75} ","permalink":"https://blog.lordash.de/posts/solution/poj-3080-blue-jeans/","summary":"Blue Jeans (POJ-3080) 题面 The Genographic Project is a research partnership between IBM and The National Geographic Society that is analyzing DNA from hundreds of thousands of contributors to map how the Earth was populated. As an IBM researcher, you have been tasked with writing a program that will find commonalities amongst given snippets of DNA that can be correlated with individual survey information to identify new genetic markers.","title":"POJ-3080 Blue Jeans"},{"content":"Power Strings (POJ-2406) 题面 Given two strings a and b we define ab to be their concatenation. For example, if a = \u0026ldquo;abc\u0026rdquo; and b = \u0026ldquo;def\u0026rdquo; then ab = \u0026ldquo;abcdef\u0026rdquo;. If we think of concatenation as multiplication, exponentiation by a non-negative integer is defined in the normal way: a^0 = \u0026quot;\u0026quot; (the empty string) and a^(n+1) = a*(a^n).\n输入 Each test case is a line of input representing s, a string of printable characters. The length of s will be at least 1 and will not exceed 1 million characters. A line containing a period follows the last test case.\n输出 For each s you should print the largest n such that s = a^n for some string a.\n样例输入 1abcd 2aaaa 3ababab 4. 样例输出 11 24 33 提示 This problem has huge input, use scanf instead of cin to avoid time limit exceed.\n思路 KMP求最小循环节。输出最小循环周期。POJ提交时注意C++和G++的区别。\n代码 1char t[mxn]; 2int nxt[mxn]; 3 4void getnxt(char* t, int m) 5{ 6 int i = 0, j = -1; nxt[0] = -1; 7 while (i \u0026lt; m) 8 { 9 if (j == -1 || t[i] == t[j]) { 10 i++, j++; 11 // if (t[i] == t[j]) 12 // nxt[i] = nxt[j]; // next数组优化 13 // else 14 nxt[i] = j; 15 } else 16 j = nxt[j]; 17 } 18} 19 20int main() 21{ 22 while(scanf(\u0026#34;%s\u0026#34;, t) \u0026amp;\u0026amp; strcmp(t, \u0026#34;.\u0026#34;)) 23 { 24 int m = strlen(t); 25 getnxt(t, m); 26 27 int L = m-nxt[m]; // 最小循环节=原串长度-末位失配，L=len-next[len] 28 printf(\u0026#34;%d\\n\u0026#34;, m%L ? 1 : m/L); // 循环周期T=len/L 29 } 30 return 0; 31} ","permalink":"https://blog.lordash.de/posts/solution/poj-2406-power-strings/","summary":"Power Strings (POJ-2406) 题面 Given two strings a and b we define ab to be their concatenation. For example, if a = \u0026ldquo;abc\u0026rdquo; and b = \u0026ldquo;def\u0026rdquo; then ab = \u0026ldquo;abcdef\u0026rdquo;. If we think of concatenation as multiplication, exponentiation by a non-negative integer is defined in the normal way: a^0 = \u0026quot;\u0026quot; (the empty string) and a^(n+1) = a*(a^n). 输入 Each test case is a line of input","title":"POJ-2406 Power Strings"},{"content":"Period (HDU-1358) 题面 For each prefix of a given string S with N characters (each character has an ASCII code between 97 and 126, inclusive), we want to know whether the prefix is a periodic string. That is, for each i (2 \u0026lt;= i \u0026lt;= N) we want to know the largest K \u0026gt; 1 (if there is one) such that the prefix of S with length i can be written as AK , that is A concatenated K times, for some string A. Of course, we also want to know the period K.\n输入 The input file consists of several test cases. Each test case consists of two lines. The first one contains N (2 \u0026lt;= N \u0026lt;= 1 000 000) – the size of the string S. The second line contains the string S. The input file ends with a line, having the number zero on it.\n输出 For each test case, output “Test case #” and the consecutive test case number on a single line; then, for each prefix with length i that has a period K \u0026gt; 1, output the prefix size i and the period K separated by a single space; the prefix sizes must be in increasing order. Print a blank line after each test case.\n样例输入 13 2aaa 312 4aabaabaabaab 50 样例输出 1Test case #1 22 2 33 3 4 5Test case #2 62 2 76 2 89 3 912 4 提示 无\n思路 KMP求最小循环节。输出所有可以由循环构成的前缀。\n代码 1char t[mxn]; 2int nxt[mxn]; 3 4void getnxt(char* t, int m) 5{ 6 int i = 0, j = -1; nxt[0] = -1; 7 while (i \u0026lt; m) 8 { 9 if (j == -1 || t[i] == t[j]) { 10 i++, j++; 11 // if (t[i] == t[j]) 12 // nxt[i] = nxt[j]; // next数组优化 13 // else 14 nxt[i] = j; 15 } else 16 j = nxt[j]; 17 } 18} 19 20int main() 21{ 22 int cs=0, m; 23 while(~scanf(\u0026#34;%d\u0026#34;, \u0026amp;m) \u0026amp;\u0026amp; m) 24 { 25 scanf(\u0026#34;%s\u0026#34;, t); 26 getnxt(t, m); 27 printf(\u0026#34;Test case #%d\\n\u0026#34;, ++cs); 28 29 for(int i=0; i\u0026lt;=m; i++){ 30 if(nxt[i]\u0026gt;0){ 31 int L = i-nxt[i]; // 最小循环节=原串长度-末位失配，L=len-next[len] 32 if(i%L == 0) 33 printf(\u0026#34;%d %d\\n\u0026#34;, i, i/L); // 循环周期T=len/L 34 } 35 } 36 printf(\u0026#34;\\n\u0026#34;); 37 } 38 return 0; 39} ","permalink":"https://blog.lordash.de/posts/solution/hdu-1358-period/","summary":"Period (HDU-1358) 题面 For each prefix of a given string S with N characters (each character has an ASCII code between 97 and 126, inclusive), we want to know whether the prefix is a periodic string. That is, for each i (2 \u0026lt;= i \u0026lt;= N) we want to know the largest K \u0026gt; 1 (if there is one) such that the prefix of S with length i can","title":"HDU-1358 Period"},{"content":"Cyclic Nacklace (HDU-3746) 题面 CC always becomes very depressed at the end of this month, he has checked his credit card yesterday, without any surprise, there are only 99.9 yuan left. he is too distressed and thinking about how to tide over the last days. Being inspired by the entrepreneurial spirit of \u0026ldquo;HDU CakeMan\u0026rdquo;, he wants to sell some little things to make money. Of course, this is not an easy task.\nAs Christmas is around the corner, Boys are busy in choosing christmas presents to send to their girlfriends. It is believed that chain bracelet is a good choice. However, Things are not always so simple, as is known to everyone, girl\u0026rsquo;s fond of the colorful decoration to make bracelet appears vivid and lively, meanwhile they want to display their mature side as college students. after CC understands the girls demands, he intends to sell the chain bracelet called CharmBracelet. The CharmBracelet is made up with colorful pearls to show girls\u0026rsquo; lively, and the most important thing is that it must be connected by a cyclic chain which means the color of pearls are cyclic connected from the left to right. And the cyclic count must be more than one. If you connect the leftmost pearl and the rightmost pearl of such chain, you can make a CharmBracelet. Just like the pictrue below, this CharmBracelet\u0026rsquo;s cycle is 9 and its cyclic count is 2: Now CC has brought in some ordinary bracelet chains, he wants to buy minimum number of pearls to make CharmBracelets so that he can save more money. but when remaking the bracelet, he can only add color pearls to the left end and right end of the chain, that is to say, adding to the middle is forbidden. CC is satisfied with his ideas and ask you for help.\n输入 The first line of the input is a single integer T ( 0 \u0026lt; T \u0026lt;= 100 ) which means the number of test cases. Each test case contains only one line describe the original ordinary chain to be remade. Each character in the string stands for one pearl and there are 26 kinds of pearls being described by \u0026lsquo;a\u0026rsquo; ~\u0026lsquo;z\u0026rsquo; characters. The length of the string Len: ( 3 \u0026lt;= Len \u0026lt;= 100000 ).\n输出 For each case, you are required to output the minimum count of pearls added to make a CharmBracelet.\n样例输入 13 2aaa 3abca 4abcde 样例输出 10 22 35 提示 无\n思路 KMP求最小循环节。\n最小循环节=原串长度-末位失配，L=len-next[len]。 如果len可以被len-next[len]整除，则表明字符串S可以完全由循环节循环组成，循环周期T=len/L。 需要补的个数是循环个数L-len%L = L-(len-L)%L = L-next[len]%L。 代码 1char t[mxn]; 2int nxt[mxn]; 3 4void getnxt(char* t, int m) 5{ 6 int i = 0, j = -1; nxt[0] = -1; 7 while (i \u0026lt; m) 8 { 9 if (j == -1 || t[i] == t[j]) { 10 i++, j++; 11 // if (t[i] == t[j]) 12 // nxt[i] = nxt[j]; // next数组优化 13 // else 14 nxt[i] = j; 15 } else 16 j = nxt[j]; 17 } 18} 19 20int main() 21{ 22 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 23 while(T--) 24 { 25 scanf(\u0026#34;%s\u0026#34;, t); 26 int m = strlen(t); 27 getnxt(t, m); 28 if(nxt[m] == 0){ 29 printf(\u0026#34;%d\\n\u0026#34;, m); 30 }else{ 31 int L = m - nxt[m]; // 最小循环节=原串长度-末位失配，L=len-next[len] 32 printf(\u0026#34;%d\\n\u0026#34;, m%L ? L-m%L : 0); // 需要补的个数是循环个数L-len%L = L-(len-L)%L = L-next[len]%L 33 } 34 } 35 return 0; 36} ","permalink":"https://blog.lordash.de/posts/solution/hdu-3746-cyclic-nacklace/","summary":"Cyclic Nacklace (HDU-3746) 题面 CC always becomes very depressed at the end of this month, he has checked his credit card yesterday, without any surprise, there are only 99.9 yuan left. he is too distressed and thinking about how to tide over the last days. Being inspired by the entrepreneurial spirit of \u0026ldquo;HDU CakeMan\u0026rdquo;, he wants to sell some little things to make money. Of course, this is not","title":"HDU-3746 Cyclic Nacklace"},{"content":"剪花布条 (HDU-2087) 题面 一块花布条，里面有些图案，另有一块直接可用的小饰条，里面也有一些图案。对于给定的花布条和小饰条，计算一下能从花布条中尽可能剪出几块小饰条来呢？\n输入 输入中含有一些数据，分别是成对出现的花布条和小饰条，其布条都是用可见ASCII字符表示的，可见的ASCII字符有多少个，布条的花纹也有多少种花样。花纹条和小饰条不会超过1000个字符长。如果遇见#字符，则不再进行工作。\n输出 输出能从花纹布中剪出的最多小饰条个数，如果一块都没有，那就老老实实输出0，每个结果之间应换行。\n样例输入 1abcde a3 2aaaaaa aa 3# 样例输出 10 23 提示 无\n思路 KMP模板题，注意匹配成功之后j=0而不是继续接着上一个的。\n代码 1char s[mxn], t[mxn]; 2int nxt[mxn]; 3 4void getnxt(char* t, int m) 5{ 6 int i = 0, j = -1; nxt[0] = -1; 7 while (i \u0026lt; m) 8 { 9 if (j == -1 || t[i] == t[j]) { 10 i++, j++; 11 // if (t[i] == t[j]) 12 // nxt[i] = nxt[j]; // next数组优化 13 // else 14 nxt[i] = j; 15 } else 16 j = nxt[j]; 17 } 18} 19 20int KMP(char* s, char* t, int n, int m) 21{ 22 int i = 0, j = 0, ans = 0; 23 while (i \u0026lt; n) 24 { 25 if (j == -1 || s[i] == t[j]) { 26 i++, j++; 27 if (j \u0026gt;= m) { // 匹配 28 ans++; 29 j = 0; 30 // return i-j; 31 } 32 } else 33 j = nxt[j]; 34 } 35 return ans; 36 // return -1; 37} 38 39int main() 40{ 41 while(scanf(\u0026#34;%s\u0026#34;, s)==1 \u0026amp;\u0026amp; strcmp(s, \u0026#34;#\u0026#34;)) 42 { 43 scanf(\u0026#34;%s\u0026#34;, t); 44 int tl = strlen(t), sl = strlen(s); 45 getnxt(t, tl); 46 printf(\u0026#34;%d\\n\u0026#34;, KMP(s, t, sl, tl)); 47 } 48 return 0; 49} ","permalink":"https://blog.lordash.de/posts/solution/hdu-2087-%E5%89%AA%E8%8A%B1%E5%B8%83%E6%9D%A1/","summary":"剪花布条 (HDU-2087) 题面 一块花布条，里面有些图案，另有一块直接可用的小饰条，里面也有一些图案。对于给定的花布条和小饰条，计算一下能从花布条中尽可能剪出","title":"HDU-2087 剪花布条"},{"content":"Number Sequence (HDU-1711) 题面 Given two sequences of numbers : a[1], a[2], \u0026hellip;\u0026hellip; , a[N], and b[1], b[2], \u0026hellip;\u0026hellip; , b[M] (1 \u0026lt;= M \u0026lt;= 10000, 1 \u0026lt;= N \u0026lt;= 1000000). Your task is to find a number K which make a[K] = b[1], a[K + 1] = b[2], \u0026hellip;\u0026hellip; , a[K + M - 1] = b[M]. If there are more than one K exist, output the smallest one.\n输入 The first line of input is a number T which indicate the number of cases. Each case contains three lines. The first line is two numbers N and M (1 \u0026lt;= M \u0026lt;= 10000, 1 \u0026lt;= N \u0026lt;= 1000000). The second line contains N integers which indicate a[1], a[2], \u0026hellip;\u0026hellip; , a[N]. The third line contains M integers which indicate b[1], b[2], \u0026hellip;\u0026hellip; , b[M]. All integers are in the range of [-1000000, 1000000].\n输出 For each test case, you should output one line which only contain K described above. If no such K exists, output -1 instead.\n样例输入 12 213 5 31 2 1 2 3 1 2 3 1 3 2 1 2 41 2 3 1 3 513 5 61 2 1 2 3 1 2 3 1 3 2 1 2 71 2 3 2 1 样例输出 16 2-1 提示 无\n思路 KMP模板题\n代码 1int s[mxn], t[mxn]; 2int nxt[mxn]; 3 4void getnxt(int* t, int m) 5{ 6 int i = 0, j = -1; nxt[0] = -1; 7 while (i \u0026lt; m) 8 { 9 if (j == -1 || t[i] == t[j]) { 10 i++, j++; 11 // if (t[i] == t[j]) 12 // nxt[i] = nxt[j]; // next数组优化 13 // else 14 nxt[i] = j; 15 } else 16 j = nxt[j]; 17 } 18} 19 20int KMP(int* s, int* t, int n, int m) 21{ 22 int i = 0, j = 0, ans = 0; 23 while (i \u0026lt; n) 24 { 25 if (j == -1 || s[i] == t[j]) { 26 i++, j++; 27 if (j \u0026gt;= m) { // 匹配 28 // ans++; 29 // j = nxt[j]; 30 return i-j; 31 } 32 } else 33 j = nxt[j]; 34 } 35 // return ans; 36 return -1; 37} 38 39int main() 40{ 41 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 42 while(T--) 43 { 44 int n, m; 45 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 46 for(int i=0; i\u0026lt;n; i++) scanf(\u0026#34;%d\u0026#34;, \u0026amp;s[i]); 47 for(int i=0; i\u0026lt;m; i++) scanf(\u0026#34;%d\u0026#34;, \u0026amp;t[i]); 48 getnxt(t, m); 49 int ans = KMP(s, t, n, m); 50 printf(\u0026#34;%d\\n\u0026#34;, ans == -1 ? -1 : ans+1); 51 } 52 return 0; 53} ","permalink":"https://blog.lordash.de/posts/solution/hdu-1711-number-sequence/","summary":"Number Sequence (HDU-1711) 题面 Given two sequences of numbers : a[1], a[2], \u0026hellip;\u0026hellip; , a[N], and b[1], b[2], \u0026hellip;\u0026hellip; , b[M] (1 \u0026lt;= M \u0026lt;= 10000, 1 \u0026lt;= N \u0026lt;= 1000000). Your task is to find a number K which make a[K] = b[1], a[K + 1] = b[2], \u0026hellip;\u0026hellip; , a[K + M - 1] = b[M]. If there are more than one K exist, output the smallest","title":"HDU-1711 Number Sequence"},{"content":"简介 Manacher‘s Algorithm是用来查找一个字符串的最长回文子串的线性方法，由一个叫Manacher的人在1975年发明的。中文谐音“马拉车”算法。时间复杂度O(|S|)。\n朴素算法 给出一个朴素的中心扩展算法，寻找最长回文子串，枚举所有奇偶回文中心点（n+n-1个），然后向两端扩展，判断左右字符是否相等即可。时间复杂度$ O(|S|^{2}) $。\n实现代码如下：\n1int expand(char* s, int n, int l, int r) 2{ 3 while(l\u0026gt;=0 \u0026amp;\u0026amp; r\u0026lt;=n \u0026amp;\u0026amp; s[l]==s[r]) 4 l--, r++; 5 return r-l-1; 6} 7 8int simple(char* s) 9{ 10 int n = strlen(s), len = 0; 11 int start = 0, end = 0; 12 13 for(int i=0; i\u0026lt;n; i++) 14 { 15 int t = max(expand(s, n, i, i), expand(s, n, i, i+1)); 16 if(t \u0026gt; len){ 17 len = t; 18 start = i - (len - 1) / 2; 19 end = i + len / 2; 20 } 21 } 22 for(int i=start; i\u0026lt;=end; i++){ 23 printf(\u0026#34;%c\u0026#34;, s[i]); 24 } 25 printf(\u0026#34;\\n\u0026#34;); 26 return len; 27} 预处理 首先我们处理一下长度的奇偶，在每个字符间插入'#'，并且为使得扩展到边界能自动结束，在首尾分别插入'^'和'$'（不会在原串中出现的字符）。这样字符串的长度就被处理为奇数了。\n预处理代码如下：\n1int manacher_init(char *s, char *t, int n) 2{ 3 int j = 2; t[0] = \u0026#39;$\u0026#39;, t[1] = \u0026#39;#\u0026#39;; 4 for (int i=0; i\u0026lt;n; i++) 5 { 6 t[j++] = s[i]; 7 t[j++] = \u0026#39;#\u0026#39;; 8 } 9 t[j] = \u0026#39;\\0\u0026#39;; 10 return j; 11} Manacher算法 idx 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 T $ # a # b # a # b # a # a # b # c # \\0 r 1 2 1 4 1 6 1 4 1 2 5 2 1 2 1 2 1 p 0 1 0 3 0 5 0 3 0 1 4 1 0 1 0 1 0 观察可得，最长回文子串p[i] = 最长回文半径r[i] - 1，p[i]所代表的子串在原串的起点为(i-p[i])/2。\n那么p[i]怎么求呢，令mx为当前已求出的最右的回文子串右边界，令id为这个回文子串的中心点，讨论以下3种情况：\n(1) 当i$\u0026lt;$mx时，令j=2*id-1，即i关于id的对称点，如果i+p[j]$\u0026lt;$mx，那么由回文串的性质可知p[i]=p[j]。\n(2) 当i$\u0026lt;$mx时，令j=2*id-1，即i关于id的对称点，如果i+p[j]$\u0026gt;=$mx，那么可以确定的是p[i]=mx-i，然后超出部分就需要中心拓展比较了。\n(3) 当i\u0026gt;=mx时，无法根据已知条件判断，只能中心拓展比较了。\n按照以上思路，遍历一下即可，注意更新id和mx。此写法得出的p[i]是最长半径数组，并非最长回文子串长度，ans需要减1，若有需要，修改中心扩展代码即可。代码如下：\n1int manacher(char *t, int *p, int n) 2{ 3 int id = 0, mx = 0, ans = 0; 4 for (int i=1; i\u0026lt;=n; i++) 5 { 6 p[i] = i\u0026lt;mx ? min(p[2*id-i], mx-i) : 1; 7 8 while (t[i+p[i]] == t[i-p[i]]) p[i]++; // 中心扩展 9 10 if (mx \u0026lt; i+p[i]) 11 mx = i+p[i], id = i; 12 13 ans = max(ans, p[i]); 14 } 15 return ans-1; 16} 模板 1char s[mxn], t[mxn]; 2int p[mxn]; 3 4int manacher_init(char *s, char *t, int n) 5{ 6 int j = 2; t[0] = \u0026#39;$\u0026#39;, t[1] = \u0026#39;#\u0026#39;; 7 for (int i=0; i\u0026lt;n; i++) 8 { 9 t[j++] = s[i]; 10 t[j++] = \u0026#39;#\u0026#39;; 11 } 12 t[j] = \u0026#39;\\0\u0026#39;; 13 return j; 14} 15 16int manacher(char *t, int *p, int n) 17{ 18 int id = 0, mx = 0, ans = 0; 19 for (int i=1; i\u0026lt;=n; i++) 20 { 21 p[i] = i\u0026lt;mx ? min(p[2*id-i], mx-i) : 1; 22 23 while (t[i+p[i]] == t[i-p[i]]) p[i]++; // 中心扩展 24 25 if (mx \u0026lt; i+p[i]) 26 mx = i+p[i], id = i; 27 28 ans = max(ans, p[i]); 29 } 30 return ans-1; 31} 32 33int expand(char* s, int n, int l, int r) 34{ 35 while(l\u0026gt;=0 \u0026amp;\u0026amp; r\u0026lt;=n \u0026amp;\u0026amp; s[l]==s[r]) 36 l--, r++; 37 return r-l-1; 38} 39 40int simple(char* s) 41{ 42 int n = strlen(s), len = 0; 43 int start = 0, end = 0; 44 45 for(int i=0; i\u0026lt;n; i++) 46 { 47 int t = max(expand(s, n, i, i), expand(s, n, i, i+1)); 48 if(t \u0026gt; len){ 49 len = t; 50 start = i - (len - 1) / 2; 51 end = i + len / 2; 52 } 53 } 54 // for(int i=start; i\u0026lt;=end; i++){ 55 // printf(\u0026#34;%c\u0026#34;, s[i]); 56 // } 57 // printf(\u0026#34;\\n\u0026#34;); 58 return len; 59} 60 61int main() 62{ 63 scanf(\u0026#34;%s\u0026#34;, s); 64 int n = manacher_init(s, t, strlen(s)); 65 printf(\u0026#34;%d\\n\u0026#34;, simple(s)); 66 printf(\u0026#34;%d\\n\u0026#34;, manacher(t, p, n)); 67 for(int i=0; i\u0026lt;n; i++){ 68 printf(\u0026#34;%d \u0026#34;, p[i]); 69 } 70 printf(\u0026#34;\\n\u0026#34;); 71 return 0; 72} ","permalink":"https://blog.lordash.de/posts/algorithm/manacher/","summary":"简介 Manacher‘s Algorithm是用来查找一个字符串的最长回文子串的线性方法，由一个叫Manacher的人在1975年发明的。中文","title":"Manacher"},{"content":"简介 给定长度为n的文本串S和长度为m的模式串T，定义extend[i]为S[i…n-1]与T[0…m-1]的最长公共前缀长度，求extend[i]。当extend[x]==m时，则可知文本串S中包含模式串T，并且首位置为x，而这正是KMP算法处理的模式匹配问题。相较于KMP算法，扩展KMP算法能找到文本串S中所有模式串T的匹配，更一般地，可以知道文本串S中以每个字符开始的后缀与模式串T的最长公共前缀长度，时间复杂度O(n+m)。\n扩展KMP 假设遍历到i时，已经求出extend[0…i-1]的值。我们记录下遍历过程中匹配成功的字符的最远位置为p，并且这次匹配的起始位置为a。换句话说，计算到x时，匹配成功的最远位置是x+extend[x]-1，p就是x=0…i-1得到的最大值，a就是对应的x。\n设辅助数组next[i]表示T[i…m-1]和T[0…m-1]的最长公共前缀长度（注意这里与KMP算法中的next数组含义不同）。令len=next[i-a]，讨论以下两种情况：\n(1) i + len-1 \u0026lt; p\n由next数组定义可知 T[0…len-1] == T[i-a…i-a+len-1]，并且由extend数组定义可知 S[a…p] == T[0…p-a]，得到 S[i…i+len-1] == T[i-a…i-a+len-1] ，所以 S[i…i+len-1] == T[0…len-1]。并且 S[i+len-1…p] != T[len-1…i-a]，不然违背了next数组最长公共前缀长度的定义。于是，无需任何比较就可以得出extend[i] = len。\n(2) i + len-1 \u0026gt;= p\n我们可以看到，匹配最远的位置只到p，对于p之后的匹配结果是未知的，所以我们需要继续匹配S[p…n-1]和T[p-i…m-1]。匹配完之后，还需要更新a和p。\n以上就是扩展KMP的主要思想，遍历即可，下面给出字符串下标从0开始的一种exKMP的实现，注意为了实现方便，代码中的p是上面分析的p+1，所以判断的时候是i+next[i-a]。而且同时用了变量j跟踪p在文本串S与模式串T中的对应位置，注意遍历文本串S时，i在递增，j需要递减。\n1void exKMP(char* s, char* t, int n, int m) 2{ 3 int a, p; 4 for (int i=0, j=-1; i\u0026lt;n; i++, j--) //j即等于p与i的距离，其作用是判断i是否大于p（如果j\u0026lt;0，则i大于p） 5 { 6 if (j\u0026lt;0 || i+nxt[i-a] \u0026gt;= p) 7 { 8 if (j\u0026lt;0) p = i, j = 0; //如果i大于p 9 while (p\u0026lt;n \u0026amp;\u0026amp; j\u0026lt;m \u0026amp;\u0026amp; s[p]==t[j]) p++, j++; 10 extend[i] = j, a = i; 11 } else 12 extend[i] = nxt[i-a]; 13 } 14} next数组 根据next数组定义，next[i]表示T[i…n]和T[0…n]的最长公共前缀的长度，其实就相当于模式串T与自身的匹配，不过这里next数组是从1开始的，next[0]匹配的肯定是整个串的长度m。有兴趣的可以试试写到一个函数中去，下面模板中给出分离的实现。再次强调C++中next是关键字（迭代器的一个函数），可以换个名字避免 CE。\n模板 1char s[mxn], t[mxn]; 2int nxt[mxn], extend[mxn]; 3 4void getnxt(char* t, int m) 5{ 6 int a, p; nxt[0] = m; 7 for (int i=1, j=-1; i\u0026lt;m; i++, j--) 8 { 9 if (j\u0026lt;0 || i+nxt[i-a] \u0026gt;= p) 10 { 11 if (j\u0026lt;0) p = i, j = 0; 12 while (p\u0026lt;m \u0026amp;\u0026amp; t[p]==t[j]) p++, j++; 13 nxt[i] = j, a = i; 14 } else 15 nxt[i] = nxt[i-a]; 16 } 17} 18 19void exKMP(char* s, char* t, int n, int m) 20{ 21 int a, p; 22 for (int i=0, j=-1; i\u0026lt;n; i++, j--) //j即等于p与i的距离，其作用是判断i是否大于p（如果j\u0026lt;0，则i大于p） 23 { 24 if (j\u0026lt;0 || i+nxt[i-a] \u0026gt;= p) 25 { 26 if (j\u0026lt;0) p = i, j = 0; //如果i大于p 27 while (p\u0026lt;n \u0026amp;\u0026amp; j\u0026lt;m \u0026amp;\u0026amp; s[p]==t[j]) p++, j++; 28 extend[i] = j, a = i; 29 } else 30 extend[i] = nxt[i-a]; 31 } 32} 33 34 35int main() 36{ 37 scanf(\u0026#34;%s%s\u0026#34;, s, t); 38 getnxt(t, strlen(t)); 39 exKMP(s, t, strlen(s), strlen(t)); 40 41 for(int i=0; i\u0026lt;strlen(t); i++) 42 printf(\u0026#34;%d \u0026#34;, nxt[i]); 43 printf(\u0026#34;\\n\u0026#34;); 44 45 for(int i=0; i\u0026lt;strlen(s); i++) 46 printf(\u0026#34;%d \u0026#34;, extend[i]); 47 printf(\u0026#34;\\n\u0026#34;); 48 49 return 0; 50} ","permalink":"https://blog.lordash.de/posts/algorithm/%E6%89%A9%E5%B1%95kmp/","summary":"简介 给定长度为n的文本串S和长度为m的模式串T，定义extend[i]为S[i…n-1]与T[0…m-1]的最长公共前缀长度，求extend","title":"扩展KMP"},{"content":"简介 Knuth-Morris-Pratt字符串查找算法，简称为“KMP算法”，常用于在一个文本串S内查找一个模式串T的出现位置。这个算法由Donald Knuth、Vaughan Pratt、James H. Morris三人于1977年联合发表，故取这3人的姓氏命名此算法。时间复杂度O(|S|+|T|)。\n朴素算法 给出一个最为常见的朴素字符串模式匹配算法，枚举文本串S的每一位，作为起点与模式串T进行匹配。时间复杂度O(|S|*|T|)。\n1int simple(char* s, char* t, int n, int m) 2{ 3 int i = 0, j = 0; 4 while (i \u0026lt; n) 5 { 6 if (s[i] == t[j]) { 7 i++, j++; 8 if (j \u0026gt;= m) { // 匹配成功 9 return i-j; 10 } 11 } else { 12 i = i-j + 1; 13 j = 0; 14 } 15 } 16 return -1; 17} 朴素算法的运行过程如下：\n注意到，如下图，枚举以S[1]为起点，匹配到最后一个字符，S[4]!=T[3]，失配之后朴素做法是指针回退，以S[2]为起点开始下一轮匹配，即i=i-j+1, j=0。\n毫无疑问，随着文本串S的长度增加，每一次回退重新匹配会花费大量的时间。那么有没有办法优化呢？\nnext数组 通过分析模式串T可以得到next数组，也可以当作fail数组理解。对于模式串T=\u0026quot;abac\u0026quot;，当匹配到'c'时失配了，那么说明前面的\u0026quot;aba\u0026quot;已经匹配成功，\u0026quot;aba\u0026quot;**最长的相等前缀后缀(不包括本身)**是'a'，那么失配'c'后，我们可以跳过s[3]='a'（文本串S\u0026quot;aba\u0026quot;的后缀）与T[0]='a'（模式串T\u0026quot;aba\u0026quot;的前缀），直接匹配S[4]='b'与T[0]='b'。\n为什么是最长的、相等的、不包括本身的前缀后缀呢？看下图自行理解。\n由下表可以看出最长相等前缀后缀整体右移，首位加上-1，即是next数组。\n模式串 a b a c 最长相等前缀后缀 0 0 1 0 next数组 -1 0 0 1 next数组优化 对于失配时S[4]='c'与T[3]='b'不相等，由T[1]='b'与T[3]='b'相等，得出T[1]='b'与S[4]='c'也不相等，我们可以跳过这一步匹配。\n注意C++中next是关键字（迭代器的一个函数），以及字符串下标从0开始和从1开始的代码稍有不同，注意必须求到next[|T|]，求字符串匹配数量以及最小循环节都需要用到。下面给出的是字符串下标从0开始的next数组的一种求法：\n1int nxt[mxn]; 2 3void getnxt(char* t, int m) 4{ 5 int i = 0, j = -1; nxt[0] = -1; 6 while (i \u0026lt; m) 7 { 8 if (j == -1 || t[i] == t[j]) { 9 i++, j++; 10 // if (t[i] == t[j]) 11 // nxt[i] = nxt[j]; // next数组优化 12 // else 13 nxt[i] = j; 14 } else 15 j = nxt[j]; 16 } 17} KMP算法 有了next数组，下面给出KMP算法代码，与朴素算法类似，但是i不用回退了，可以看出求next数组的过程也是一个模式串T与自身匹配的过程。\n1int KMP(char* s, char* t, int n, int m) 2{ 3 int i = 0, j = 0, ans = 0; 4 while (i \u0026lt; n) 5 { 6 if (j == -1 || s[i] == t[j]) { 7 i++, j++; 8 if (j \u0026gt;= m) { // 匹配成功 9 return i-j; 10 } 11 } else 12 j = nxt[j]; 13 } 14 return -1; 15} KMP算法的运行过程如下：\n最小循环节 参考 KMP模板，最小循环节。\n定理：\n假设S的长度为len，则S存在最小循环节，循环节的长度L为len-next[len]，子串为S[0…len-next[len]-1]。 （1）如果len可以被len-next[len]整除，则表明字符串S可以完全由循环节循环组成，循环周期T=len/L。 （2）如果不能，说明还需要再添加几个字母才能补全。需要补的个数是循环个数L-len%L=L-(len-L)%L=L-next[len]%L，L=len-next[len]。\nindex 0 1 2 3 4 5 6 7 char a b c d a b c next -1 0 0 0 0 1 2 3 为方便说明，先设字符串的长度为len，循环子串的长度为L\n例1 s0s1s2s3s4s5，next[6]=3 即s0s1s2=s3s4s5 很明显可知：循环子串为s0s1s2，L=len-next[6]=3，且能被len整除。\n例2 s0s1s2s3s4s5s6s7，next[8]=6 此时len-next[8]=2，即L=2 由s0s1s2s3s4s5=s2s3s4s5s6s7 可知s0s1=s2s3，s2s3=s4s5，s4s5=s6s7 显然s0s1为循环子串\n例3 s0s1s2s3s4s5s6，next[7]=4 此时len-next[7]=3，即L=3 由s0s1s2s3=s3s4s5s6 可知s0s1=s3s4，s2s3=s5s6 从而可知s0s1s2=s3s4s5，s0=s3=s6 即如果再添加3-4%3=2个字母（s1s2），那么得到的字符串就可以由s0s1s2循环3次组成\n对于一个字符串，如abcd abcd abcd，由长度为4的字符串abcd重复3次得到，那么必然有原字符串的前八位等于后八位。也就是说，对于某个下标从0开始的字符串S，长度为len，由长度为L的字符串s重复R次得到，当R≥2时必然有S[0…len-L-1]=S[L…len-1]。\n那么对于KMP算法来说，就有next[len]=len-L。此时L肯定已经是最小的了（因为next的值是前缀和后缀相等的最大长度，即len-L是最大的，那么在len已经确定的情况下，L是最小的）\n模板 1char s[mxn], t[mxn]; 2int nxt[mxn]; 3 4void getnxt(char* t, int m) 5{ 6 int i = 0, j = -1; nxt[0] = -1; 7 while (i \u0026lt; m) 8 { 9 if (j == -1 || t[i] == t[j]) { 10 i++, j++; 11 // if (t[i] == t[j]) 12 // nxt[i] = nxt[j]; // next数组优化 13 // else 14 nxt[i] = j; 15 } else 16 j = nxt[j]; 17 } 18} 19 20int KMP(char* s, char* t, int n, int m) 21{ 22 int i = 0, j = 0, ans = 0; 23 while (i \u0026lt; n) 24 { 25 if (j == -1 || s[i] == t[j]) { 26 i++, j++; 27 if (j \u0026gt;= m) { 28 // ans++; 29 // j = nxt[j]; 30 return i-j; 31 } 32 } else 33 j = nxt[j]; 34 } 35 // return ans; 36 return -1; 37} 38 39int main() 40{ 41 scanf(\u0026#34;%s %s\u0026#34;, s, t); 42 getnxt(t, strlen(t)); 43 for(int i=0; i\u0026lt;strlen(t); i++){ 44 printf(\u0026#34;%d \u0026#34;, nxt[i]); 45 } 46 printf(\u0026#34;\\n\u0026#34;); 47 printf(\u0026#34;%d\\n\u0026#34;, simple(s, t, strlen(s), strlen(t))); 48 printf(\u0026#34;%d\\n\u0026#34;, KMP(s, t, strlen(s), strlen(t))); 49 return 0; 50} ","permalink":"https://blog.lordash.de/posts/algorithm/kmp/","summary":"简介 Knuth-Morris-Pratt字符串查找算法，简称为“KMP算法”，常用于在一个文本串S内查找一个模式串T的出现位置。这个算法由D","title":"KMP"},{"content":"Paint Chain(HDU-3980) 题面 Aekdycoin and abcdxyzk are playing a game. They get a circle chain with some beads. Initially none of the beads is painted. They take turns to paint the chain. In Each turn one player must paint a unpainted beads. Whoever is unable to paint in his turn lose the game. Aekdycoin will take the first move.\nNow, they thought this game is too simple, and they want to change some rules. In each turn one player must select a certain number of consecutive unpainted beads to paint. The other rules is The same as the original. Who will win under the rules ?You may assume that both of them are so clever.\n输入 First line contains T, the number of test cases. Following T line contain 2 integer N, M, indicate the chain has N beads, and each turn one player must paint M consecutive beads. (1 \u0026lt;= N, M \u0026lt;= 1000)\n输出 For each case, print \u0026ldquo;Case #idx: \u0026quot; first where idx is the case number start from 1, and the name of the winner.\n样例输入 12 23 1 34 2 样例输出 1Case #1: aekdycoin 2Case #2: abcdxyzk 提示 无\n思路 Anti-Nim博弈，可以参见【题解】POJ-3480 John。\n代码 1using namespace std; 2int SG[1005]; 3 4int getSg(int n, int m){ 5 if(n\u0026lt;m) return SG[n]=0; 6 if(SG[n]!=-1) return SG[n]; 7 bool S[1005]={0}; 8 9 for(int i=0; i\u0026lt;=n-m; i++) 10 S[getSg(i, m) ^ getSg(n-m-i, m)] = 1; 11 12 int mex = 0; 13 while(S[mex]) mex++; 14 return SG[n]=mex; 15} 16 17int main() 18{ 19 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 20 for(int cs=1; cs\u0026lt;=T; cs++) 21 { 22 memset(SG, -1, sizeof(SG)); 23 int n, m; 24 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 25 printf(\u0026#34;Case #%d: \u0026#34;, cs); 26 if(n\u0026lt;m || getSg(n-m, m)){ 27 printf(\u0026#34;abcdxyzk\\n\u0026#34;); 28 }else{ 29 printf(\u0026#34;aekdycoin\\n\u0026#34;); 30 } 31 } 32 return 0; 33} ","permalink":"https://blog.lordash.de/posts/solution/hdu-3980-paint-chain/","summary":"Paint Chain(HDU-3980) 题面 Aekdycoin and abcdxyzk are playing a game. They get a circle chain with some beads. Initially none of the beads is painted. They take turns to paint the chain. In Each turn one player must paint a unpainted beads. Whoever is unable to paint in his turn lose the game. Aekdycoin will take the first move. Now, they thought this game is too simple, and they","title":"HDU-3980 Paint Chain"},{"content":"Be the Winner(HDU-2509) 题面 Let\u0026rsquo;s consider m apples divided into n groups. Each group contains no more than 100 apples, arranged in a line. You can take any number of consecutive apples at one time. For example \u0026ldquo;@@@\u0026rdquo; can be turned into \u0026ldquo;@@\u0026rdquo; or \u0026ldquo;@\u0026rdquo; or \u0026ldquo;@ @\u0026quot;(two piles). two people get apples one after another and the one who takes the last is the loser. Fra wants to know in which situations he can win by playing strategies (that is, no matter what action the rival takes, fra will win).\n输入 You will be given several cases. Each test case begins with a single number n (1 \u0026lt;= n \u0026lt;= 100), followed by a line with n numbers, the number of apples in each pile. There is a blank line between cases.\n输出 If a winning strategies can be found, print a single line with \u0026ldquo;Yes\u0026rdquo;, otherwise print \u0026ldquo;No\u0026rdquo;.\n样例输入 12 22 2 31 43 样例输出 1No 2Yes 提示 无\n思路 Anti-Nim博弈，可以参见【题解】POJ-3480 John。\n代码 1using namespace std; 2 3int main() 4{ 5 int n; 6 for(~scanf(\u0026#34;%d\u0026#34;, \u0026amp;n)) 7 { 8 int nim=0, anti=0; 9 for(int i=0; i\u0026lt;n; i++){ 10 int x; scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 11 if(x\u0026gt;1) anti = 1; 12 nim ^=x; 13 } 14 if((!nim\u0026amp;\u0026amp;!anti) || (nim\u0026amp;\u0026amp;anti)){ 15 printf(\u0026#34;Yes\\n\u0026#34;); 16 }else{ 17 printf(\u0026#34;No\\n\u0026#34;); 18 } 19 } 20 return 0; 21} ","permalink":"https://blog.lordash.de/posts/solution/hdu-2509-be-the-winner/","summary":"Be the Winner(HDU-2509) 题面 Let\u0026rsquo;s consider m apples divided into n groups. Each group contains no more than 100 apples, arranged in a line. You can take any number of consecutive apples at one time. For example \u0026ldquo;@@@\u0026rdquo; can be turned into \u0026ldquo;@@\u0026rdquo; or \u0026ldquo;@\u0026rdquo; or \u0026ldquo;@ @\u0026quot;(two piles). two people get apples one after another and the one who takes the last is the loser. Fra wants to","title":"HDU-2509 Be the Winner"},{"content":"Partitioning Game(LightOJ-1199) 题面 Alice and Bob are playing a strange game. The rules of the game are:\nInitially there are n piles. A pile is formed by some cells. Alice starts the game and they alternate turns. In each tern a player can pick any pile and divide it into two unequal piles. If a player cannot do so, he/she loses the game. Now you are given the number of cells in each of the piles, you have to find the winner of the game if both of them play optimally.\n输入 Input starts with an integer T (≤ 1000), denoting the number of test cases.\nEach case starts with a line containing an integer n (1 ≤ n ≤ 100). The next line contains n integers, where the ith integer denotes the number of cells in the ith pile. You can assume that the number of cells in each pile is between 1 and 10000.\n输出 For each case, print the case number and \u0026lsquo;Alice\u0026rsquo; or \u0026lsquo;Bob\u0026rsquo; depending on the winner of the game.\n样例输入 13 21 34 43 51 2 3 61 77 样例输出 1Case 1: Bob 2Case 2: Alice 3Case 3: Bob 提示 无\n思路 SG函数打表。\n代码 1using namespace std; 2int SG[10005]; 3 4void getSg(int n) { 5 for(int i=1; i\u0026lt;=n; i++){ 6 bool S[10005]={0}; 7 for(int j=1; j+j\u0026lt;i; j++) 8 S[SG[j] ^ SG[i-j]] = 1; 9 int mex = 0; 10 while(S[mex]) mex++; 11 SG[i] = mex; 12 } 13} 14 15int main() 16{ 17 getSg(10005); 18 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 19 for(int cs=1; cs\u0026lt;=T; cs++) 20 { 21 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 22 23 int nim = 0; 24 for(int i=0; i\u0026lt;n; i++){ 25 int x; scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 26 nim ^= SG[x]; 27 } 28 printf(\u0026#34;Case %d: \u0026#34;, cs); 29 if(nim){ 30 printf(\u0026#34;Alice\\n\u0026#34;); 31 }else{ 32 printf(\u0026#34;Bob\\n\u0026#34;); 33 } 34 } 35 return 0; 36} ","permalink":"https://blog.lordash.de/posts/solution/lightoj-1199-partitioning-game/","summary":"Partitioning Game(LightOJ-1199) 题面 Alice and Bob are playing a strange game. The rules of the game are: Initially there are n piles. A pile is formed by some cells. Alice starts the game and they alternate turns. In each tern a player can pick any pile and divide it into two unequal piles. If a player cannot do so, he/she loses the game. Now you are given the number","title":"LightOJ-1199 Partitioning Game"},{"content":"Crazy Calendar(LightOJ-1393) 题面 2011 was a crazy year. Many people all over the world proposed on 11-11-11, married on 11-11-11, some even went through surgery only to have 11-11-11 as their child\u0026rsquo;s birth date. How crazy people can be! Don\u0026rsquo;t they see there is a \u0026ldquo;20\u0026rdquo; hidden? Then what to do? A very elegant solution came from ARR, a very famous and funny character - why do we need to follow Christian (or some calls it Gregorian) calendar? Why don\u0026rsquo;t we start our own calendar on the day of marriage? And those who like to celebrate their marriage ceremony too frequent, why don\u0026rsquo;t they declare only 1 day per year. In that fashion they can celebrate their anniversary every day. And may be one minute a year or a second or \u0026hellip; Uh.. getting complex. Let\u0026rsquo;s back to the title. From now, we start to have a new calendar system, \u0026ldquo;Kisu Pari Na\u0026rdquo;. And we hope to update this calendar on every national contest.\nThe purpose of this calendar is - we all will try our best to learn something new in every year. For this first year let\u0026rsquo;s learn some combinatory. It reminds me of my first year in college. I faced this problem but could not solve this then. But see how easy it is:\n(1, 1) (1, 2) (1, 3) (1, 4) (2, 1) (2, 2) (2, 3) (2, 4) (3, 1) (3, 2) (3, 3) (3, 4) Say you start from upper left cell and want to go to lower right cell. The only restriction is you can only move downward or rightward. How many ways are there? How to solve it? Not that difficult. You have to go two times Down and three times Right (whichever way you try) to reach the goal from the starting cell, right? So the answer is number of ways you can arrange two D (represents Down) and three R (represent Right). 2 same characters and 3 same characters, total 5 characters. So it is:\n$ \\frac{5!}{2!3!} $ Or = $ \\frac{(D+R)!}{D!R!} $ D+RCR. Easy isn\u0026rsquo;t it?\nOk enough with learning. Now back to problem, given a grid and at each cell there are some coins. Inky and Pinky are playing a game getting inspiration from the above problem. At each turn, a player chooses a non empty cell and then removes one or more coins from that cell and put them to the cell exactly right of it or exactly beneath it. A player can\u0026rsquo;t divide the coins and put one part to right and others to down. Note that, for the cells at the right column the player can\u0026rsquo;t move it to more right, and same for the bottom-most row. So a player can\u0026rsquo;t move coins from the lower right cell. The game will finish when no moves are available and the player who moved last will win. Now inky being very modest asked Pinky to move first. Can you say if Pinky will win if both play perfectly?\n输入 Input starts with an integer T (≤ 100), denoting the number of test cases.\nEach case starts with a line containing two integers R C (1 ≤ R * C ≤ 50000), where R denotes the number of rows and C denotes the number of columns of the grid respectively. Each of the next R lines contains C space separated integers denoting the grid. These integers lie in the range [0, 109].\n输出 For every test case, output case number followed by \u0026ldquo;win\u0026rdquo; if Pinky can win or \u0026ldquo;lose\u0026rdquo;.\n样例输入 11 22 2 31 1 41 1 样例输出 1Case 1: lose 提示 Dataset is huge, use faster I/O methods.\n思路 可以发现曼哈顿距离为偶数的，先手必胜；为奇数的，Nim一下。\n代码 1using namespace std; 2 3int main() 4{ 5 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 6 for(int cs=1; cs\u0026lt;=T; cs++) 7 { 8 int n, m; 9 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 10 11 int nim=0; 12 for(int i=0; i\u0026lt;n; i++){ 13 for(int j=0; j\u0026lt;m; j++){ 14 int x; scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 15 if((n-i+m-j) \u0026amp; 1) 16 nim ^= x; 17 } 18 } 19 printf(\u0026#34;Case %d: \u0026#34;, cs); 20 if(nim){ 21 printf(\u0026#34;win\\n\u0026#34;); 22 }else{ 23 printf(\u0026#34;lose\\n\u0026#34;); 24 } 25 } 26 return 0; 27} ","permalink":"https://blog.lordash.de/posts/solution/lightoj-1393-crazy-calendar/","summary":"Crazy Calendar(LightOJ-1393) 题面 2011 was a crazy year. Many people all over the world proposed on 11-11-11, married on 11-11-11, some even went through surgery only to have 11-11-11 as their child\u0026rsquo;s birth date. How crazy people can be! Don\u0026rsquo;t they see there is a \u0026ldquo;20\u0026rdquo; hidden? Then what to do? A very elegant solution came from ARR, a very famous and funny character - why do we need","title":"LightOJ-1393 Crazy Calendar"},{"content":"Misere Nim(LightOJ-1253) 题面 Alice and Bob are playing game of Misère Nim. Misère Nim is a game playing on k piles of stones, each pile containing one or more stones. The players alternate turns and in each turn a player can select one of the piles and can remove as many stones from that pile unless the pile is empty. In each turn a player must remove at least one stone from any pile. Alice starts first. The player who removes the last stone loses the game.\n输入 Input starts with an integer T (≤ 200), denoting the number of test cases.\nEach case starts with a line containing an integer k (1 ≤ k ≤ 100). The next line contains k space separated integers denoting the number of stones in each pile. The number of stones in a pile lies in the range [1, 109].\n输出 For each case, print the case number and \u0026lsquo;Alice\u0026rsquo; if Alice wins otherwise print \u0026lsquo;Bob\u0026rsquo;.\n样例输入 13 24 32 3 4 5 45 51 1 2 4 10 61 71 样例输出 1Case 1: Bob 2Case 2: Alice 3Case 3: Bob 提示 无\n思路 Anti-Nim博弈，可以参见【题解】POJ-3480 John。\n代码 1using namespace std; 2 3int main() 4{ 5 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 6 for(int cs=1; cs\u0026lt;=T; cs++) 7 { 8 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 9 10 int nim=0, anti=0; 11 for(int i=0; i\u0026lt;n; i++){ 12 int x; scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 13 if(x\u0026gt;1) anti = 1; 14 nim ^=x; 15 } 16 printf(\u0026#34;Case %d: \u0026#34;, cs); 17 if((!nim\u0026amp;\u0026amp;!anti) || (nim\u0026amp;\u0026amp;anti)){ 18 printf(\u0026#34;Alice\\n\u0026#34;); 19 }else{ 20 printf(\u0026#34;Bob\\n\u0026#34;); 21 } 22 } 23 return 0; 24} ","permalink":"https://blog.lordash.de/posts/solution/lightoj-1253-misere-nim/","summary":"Misere Nim(LightOJ-1253) 题面 Alice and Bob are playing game of Misère Nim. Misère Nim is a game playing on k piles of stones, each pile containing one or more stones. The players alternate turns and in each turn a player can select one of the piles and can remove as many stones from that pile unless the pile is","title":"LightOJ-1253 Misere Nim"},{"content":"Matrix Game(LightOJ-1247) 题面 Given an m x n matrix, where m denotes the number of rows and n denotes the number of columns and in each cell a pile of stones is given. For example, let there be a 2 x 3 matrix, and the piles are\n2 3 8\n5 2 7\nThat means that in cell(1, 1) there is a pile with 2 stones, in cell(1, 2) there is a pile with 3 stones and so on.\nNow Alice and Bob are playing a strange game in this matrix. Alice starts first and they alternate turns. In each turn a player selects a row, and can draw any number of stones from any number of cells in that row. But he/she must draw at least one stone. For example, if Alice chooses the 2nd row in the given matrix, she can pick 2 stones from cell(2, 1), 0 stones from cell (2, 2), 7 stones from cell(2, 3). Or she can pick 5 stones from cell(2, 1), 1 stone from cell(2, 2), 4 stones from cell(2, 3). There are many other ways but she must pick at least one stone from all piles. The player who can\u0026rsquo;t take any stones loses.\nNow if both play optimally who will win?\n输入 Input starts with an integer T (≤ 100), denoting the number of test cases.\nEach case starts with a line containing two integers: m and n (1 ≤ m, n ≤ 50). Each of the next m lines contains n space separated integers that form the matrix. All the integers will be between 0 and 10^9 (inclusive).\n输出 For each case, print the case number and \u0026lsquo;Alice\u0026rsquo; if Alice wins, or \u0026lsquo;Bob\u0026rsquo; otherwise.\n样例输入 12 22 3 32 3 8 45 2 7 52 3 61 2 3 73 2 1 样例输出 1Case 1: Alice 2Case 2: Bob 提示 无\n思路 Nim博弈，每行任意取，以每行总和为石子堆数做一个NIm博弈即可。\n代码 1using namespace std; 2 3int main() 4{ 5 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 6 for(int cs=1; cs\u0026lt;=T; cs++) 7 { 8 int n, m; 9 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 10 11 int nim = 0; 12 for(int i=0; i\u0026lt;n; i++){ 13 int sum = 0; 14 for(int j=0; j\u0026lt;m; j++){ 15 int x; scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 16 sum += x; 17 } 18 nim ^= sum; 19 } 20 printf(\u0026#34;Case %d: \u0026#34;, cs); 21 if(nim){ 22 printf(\u0026#34;Alice\\n\u0026#34;); 23 }else{ 24 printf(\u0026#34;Bob\\n\u0026#34;); 25 } 26 27 } 28 return 0; 29} ","permalink":"https://blog.lordash.de/posts/solution/lightoj-1247-matrix-game/","summary":"Matrix Game(LightOJ-1247) 题面 Given an m x n matrix, where m denotes the number of rows and n denotes the number of columns and in each cell a pile of stones is given. For example, let there be a 2 x 3 matrix, and the piles are 2 3 8 5 2 7 That means that in cell(1, 1) there is a pile with 2 stones, in cell(1, 2)","title":"LightOJ-1247 Matrix Game"},{"content":"Left Right(LightOJ-1192) 题面 Two players, Alice and Bob are playing a strange game in a 1 x n board. The cells are numbered from 0 to n-1, where the left most cell is marked as cell 0. Each cell can contain at most one piece.\nThere are two kinds of pieces, gray and white. Alice moves all the gray pieces, and bob moves all the white ones. The pieces alternate, that is, leftmost piece is gray, next is white, next to that is gray, then it\u0026rsquo;s white again, and so on. There will always be equal number of black and gray pieces. Alice can only move pieces to the right. Bob can only move pieces to the left.\nIn each move, a player selects one piece and moves that piece, either to its left (Bob) or to its right (Alice), any number of cells (at least 1) but, it can neither jump over other pieces, nor it can move outside of the board. The players alternate their turns.\nFor example, if Alice decides to move the left most gray piece, these two moves are available to her.\nIllustration Fig 1: Initial Position Fig 2: Alice moving the gray piece one cell to the right Fig 3: Alice moving the gray piece two cells to the right Alice moves first. The game ends, when someone is unable to make any move, and loses the game. You can assume that, both of them play optimally (that is, if it is possible to apply a strategy that will ensure someone\u0026rsquo;s win, he/she will always use that strategy). Now you are given a configuration of a board, you have to find the winner.\n输入 Input starts with an integer T (≤ 200), denoting the number of test cases.\nEach case starts with a line containing an integer k (1 ≤ k ≤ 100) denoting the number of gray pieces in the board. The next line contains 2k distinct integers (in ascending order) denoting the position of the pieces. The first integer denotes a gray piece, the second integer denotes a white piece, the next integer denotes a gray piece and so on. All the integers will lie in the range [0, 10^9].\nAssume that n is sufficiently large to contain all the pieces. And at least one move is remaining.\n输出 For each case, print the case number and Alice or Bob depending on the winner of the game.\n样例输入 12 22 30 3 7 9 42 51 3 7 9 样例输出 1Case 1: Alice 2Case 2: Bob 提示 无\n思路 Nim博弈，以间距为石子堆数做一个Nim博弈即可。\n代码 1using namespace std; 2 3int main() 4{ 5 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 6 for(int cs=1; cs\u0026lt;=T; cs++) 7 { 8 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 9 10 int nim = 0; 11 for(int i=0; i\u0026lt;n; i++){ 12 int a, b; 13 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;a, \u0026amp;b); 14 nim ^= b-a-1; 15 } 16 17 printf(\u0026#34;Case %d: \u0026#34;, cs); 18 if(nim){ 19 printf(\u0026#34;Alice\\n\u0026#34;); 20 }else{ 21 printf(\u0026#34;Bob\\n\u0026#34;); 22 } 23 24 } 25 return 0; 26} ","permalink":"https://blog.lordash.de/posts/solution/lightoj-1192-left-right-/","summary":"Left Right(LightOJ-1192) 题面 Two players, Alice and Bob are playing a strange game in a 1 x n board. The cells are numbered from 0 to n-1, where the left most cell is marked as cell 0. Each cell can contain at most one piece. There are two kinds of pieces, gray and white. Alice moves all the gray pieces, and bob moves all the white ones. The pieces","title":"LightOJ-1192 Left Right"},{"content":"Incredible Chess(LightOJ-1186) 题面 You are given an n x n chess board. Only pawn is used in the \u0026lsquo;Incredible Chess\u0026rsquo; and they can move forward or backward. In each column there are two pawns, one white and one black. White pawns are placed in the lower part of the board and the black pawns are placed in the upper part of the board.\nThe game is played by two players. Initially a board configuration is given. One player uses white pieces while the other uses black. In each move, a player can move a pawn of his piece, which can go forward or backward any positive integer steps, but it cannot jump over any piece. White gives the first move.\nThe game ends when there is no move for a player and he will lose the game. Now you are given the initial configuration of the board. You have to write a program to determine who will be the winner.\n输入 Input starts with an integer T (≤ 200), denoting the number of test cases.\nEach case starts with an integer n (3 ≤ n ≤ 100) denoting the dimension of the board. The next line will contain n integers, W0, W1, \u0026hellip;, Wn-1 giving the position of the white pieces. The next line will also contain n integers, B0, B1, \u0026hellip; Bn-1 giving the position of the black pieces. Wi means the row position of the white piece of ith column. And Bi means the row position of the black piece of ith column. You can assume that (0 ≤ Wi \u0026lt; Bi \u0026lt; n) for (0 ≤ i \u0026lt; n) and at least one move is remaining.\n输出 For each case, print the case number and \u0026lsquo;white wins\u0026rsquo; or \u0026lsquo;black wins\u0026rsquo; depending on the result.\n样例输入 12 26 31 3 2 2 0 1 45 5 5 3 1 2 57 61 3 2 2 0 4 0 73 4 4 3 1 5 6 样例输出 1Case 1: black wins 2Case 2: white wins 提示 无\n思路 Nim博弈，以黑白棋子间距为石子堆数做一个NIm博弈即可。\n代码 1using namespace std; 2const int mxn = 1000; 3int a[mxn]; 4 5int main() 6{ 7 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 8 for(int cs=1; cs\u0026lt;=T; cs++) 9 { 10 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 11 for(int i=0; i\u0026lt;n; i++) 12 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); 13 14 int nim = 0; 15 for(int i=0; i\u0026lt;n; i++) { 16 int x; scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 17 nim ^= x-a[i]-1; 18 } 19 printf(\u0026#34;Case %d: \u0026#34;, cs); 20 if(nim){ 21 printf(\u0026#34;white wins\\n\u0026#34;); 22 }else{ 23 printf(\u0026#34;black wins\\n\u0026#34;); 24 } 25 26 } 27 return 0; 28} ","permalink":"https://blog.lordash.de/posts/solution/lightoj-1186-incredible-chess/","summary":"Incredible Chess(LightOJ-1186) 题面 You are given an n x n chess board. Only pawn is used in the \u0026lsquo;Incredible Chess\u0026rsquo; and they can move forward or backward. In each column there are two pawns, one white and one black. White pawns are placed in the lower part of the board and the black pawns are placed in the upper part of the board. The game is played by two","title":"LightOJ-1186 Incredible Chess"},{"content":"Stone Game II (HDU-4388) 题面 Stone Game II comes. It needs two players to play this game. There are some piles of stones on the desk at the beginning. Two players move the stones in turn. At each step of the game the player should do the following operations. First, choose a pile of stones. (We assume that the number of stones in this pile is n) Second, take some stones from this pile. Assume the number of stones left in this pile is k. The player must ensure that 0 \u0026lt; k \u0026lt; n and (k XOR n) \u0026lt; n, otherwise he loses. At last, add a new pile of size (k XOR n). Now the player can add a pile of size ((2*k) XOR n) instead of (k XOR n) (However, there is only one opportunity for each player in each game). The first player who can\u0026rsquo;t do these operations loses. Suppose two players will do their best in the game, you are asked to write a program to determine who will win the game.\n输入 The first line contains the number T of test cases (T\u0026lt;=150). The first line of each test cases contains an integer number n (n\u0026lt;=50), denoting the number of piles. The following n integers describe the number of stones in each pile at the beginning of the game. You can assume that all the number of stones in each pile will not exceed 100,000.\n输出 For each test case, print the case number and the answer. if the first player will win the game print \u0026ldquo;Yes\u0026rdquo;(quotes for clarity) in a single line, otherwise print \u0026ldquo;No\u0026rdquo;(quotes for clarity).\n样例输入 13 22 31 2 43 51 2 3 64 71 2 3 3 样例输出 1Case 1: No 2Case 2: Yes 3Case 3: No 提示 无\n思路 对于每一堆，分解到2的幂就无法再次分解了，所以我们统计一下二进制下1的数量，cnt-1为奇数时先手胜，反之。\n代码 1using namespace std; 2 3int bitcount(int x){ 4 int ans=0; 5 while(x){ 6 x \u0026amp;= x-1; 7 ans++; 8 } 9 return ans; 10} 11 12int main() 13{ 14 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 15 for(int cs=1; cs\u0026lt;=T; cs++) 16 { 17 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 18 19 int nim = 0; 20 for(int i=0; i\u0026lt;n; i++){ 21 int x; scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 22 nim ^= (bitcount(x)-1) \u0026amp; 1; 23 } 24 printf(\u0026#34;Case %d: \u0026#34;, cs); 25 if(nim){ 26 printf(\u0026#34;Yes\\n\u0026#34;); 27 }else{ 28 printf(\u0026#34;No\\n\u0026#34;); 29 } 30 } 31 return 0; 32} ","permalink":"https://blog.lordash.de/posts/solution/hdu-4388-stone-game-ii/","summary":"Stone Game II (HDU-4388) 题面 Stone Game II comes. It needs two players to play this game. There are some piles of stones on the desk at the beginning. Two players move the stones in turn. At each step of the game the player should do the following operations. First, choose a pile of stones. (We assume that the number of stones in this pile is n) Second, take","title":"HDU-4388 Stone Game II"},{"content":"悼念512汶川大地震遇难同胞——选拔志愿者(HDU-2188) 题面 对于四川同胞遭受的灾难，全国人民纷纷伸出援助之手，几乎每个省市都派出了大量的救援人员，这其中包括抢险救灾的武警部队，治疗和防疫的医护人员，以及进行心理疏导的心理学专家。根据要求，我校也有一个奔赴灾区救灾的名额，由于广大师生报名踊跃，学校不得不进行选拔来决定最后的人选。经过多轮的考核，形势逐渐明朗，最后的名额将在“林队”和“徐队”之间产生。但是很巧合，2个人的简历几乎一模一样，这让主持选拔的8600很是为难。无奈，他决定通过捐款来决定两人谁能入选。 选拔规则如下： 1、最初的捐款箱是空的； 2、两人轮流捐款，每次捐款额必须为正整数，并且每人每次捐款最多不超过m元(1\u0026lt;=m\u0026lt;=10)。 3、最先使得总捐款额达到或者超过n元（0\u0026lt;n\u0026lt;10000）的一方为胜者，则其可以亲赴灾区服务。 我们知道，两人都很想入选志愿者名单，并且都是非常聪明的人，假设林队先捐，请你判断谁能入选最后的名单？\n输入 输入数据首先包含一个正整数C，表示包含C组测试用例，然后是C行数据，每行包含两个正整数n，m，n和m的含义参见上面提到的规则。\n输出 对于每组测试数据，如果林队能入选，请输出字符串\u0026quot;Grass\u0026quot;， 如果徐队能入选，请输出字符串\u0026quot;Rabbit\u0026quot;，每个实例的输出占一行。\n样例输入 12 28 10 311 10 样例输出 1Grass 2Rabbit 提示 无\n思路 Bash博弈。\n代码 1using namespace std; 2 3int main() 4{ 5 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 6 while(T--) 7 { 8 int n, m; 9 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 10 11 if(n%(m+1)==0){ 12 printf(\u0026#34;Rabbit\\n\u0026#34;); 13 }else{ 14 printf(\u0026#34;Grass\\n\u0026#34;); 15 } 16 } 17 return 0; 18} ","permalink":"https://blog.lordash.de/posts/solution/hdu-2188-%E6%82%BC%E5%BF%B5512/","summary":"悼念512汶川大地震遇难同胞——选拔志愿者(HDU-2188) 题面 对于四川同胞遭受的灾难，全国人民纷纷伸出援助之手，几乎每个省市都派出了大量","title":"HDU-2188 悼念512"},{"content":"邂逅明下(HDU-2897) 题面 当日遇到月，于是有了明。当我遇到了你，便成了侣。 那天，日月相会，我见到了你。而且，大地失去了光辉，你我是否成侣？这注定是个凄美的故事。（以上是废话） 小t和所有世俗的人们一样，期待那百年难遇的日食。驻足街头看天，看日月渐渐走近，小t的脖子那个酸呀（他坚持这个姿势已经有半个多小时啦）。他低下仰起的头，环顾四周。忽然发现身边竟站着位漂亮的mm。天渐渐暗下，这mm在这街头竟然如此耀眼，她是天使吗？站着小t身边的天使。 小t对mm惊呼：“缘分呐~~”。mm却毫不含糊：“是啊，500年一遇哦！”（此后省略5000字….） 小t赶紧向mm要联系方式，可mm说：“我和你玩个游戏吧，赢了，我就把我的手机号告诉你。”小t，心想天下哪有题目能难倒我呢，便满口答应下来。mm开始说游戏规则：“我有一堆硬币，一共7枚，从这个硬币堆里取硬币，一次最少取2枚，最多4枚，如果剩下少于2枚就要一次取完。我和你轮流取，直到堆里的硬币取完，最后一次取硬币的算输。我玩过这个游戏好多次了，就让让你，让你先取吧~” 小t掐指一算，不对呀，这是不可能的任务么。小t露出得意的笑：“还是mm优先啦，呵呵~”mm霎时愣住了，想是对小t的反应出乎意料吧。 她却也不生气：“好小子，挺聪明呢，要不这样吧，你把我的邮箱给我，我给你发个文本，每行有三个数字n，p，q，表示一堆硬币一共有n枚，从这个硬币堆里取硬币，一次最少取p枚，最多q枚，如果剩下少于p枚就要一次取完。两人轮流取，直到堆里的硬币取完，最后一次取硬币的算输。对于每一行的三个数字，给出先取的人是否有必胜策略，如果有回答WIN，否则回答LOST。你把对应的答案发给我，如果你能在今天晚上8点以前发给我正确答案，或许我们明天下午可以再见。” 小t二话没说，将自己的邮箱给了mm。当他兴冲冲得赶回家，上网看邮箱，哇！mm的邮件已经到了。他发现文本长达100000行，每行的三个数字都很大，但是都是不超过65536的整数。小t看表已经下午6点了，要想手工算出所有结果，看来是不可能了。你能帮帮他，让他再见到那个mm吗？\n输入 不超过100000行，每行三个正整数n，p，q。\n输出 对应每行输入，按前面介绍的游戏规则，判断先取者是否有必胜策略。输出WIN或者LOST。\n样例输入 17 2 4 26 2 4 样例输出 1LOST 2WIN 提示 无\n思路 Bash博弈变形，Bash博弈可以参考【专题】Bash博弈。\n若当前石子共有n =（p+q）* r个，则先手必胜，必胜策略为：先手第一次取q个，以后每次若后手取K个，先手取（p+q-k）个，如此下去最后必剩下p个给后手，所以先手必胜。\n若n =（p+q）* r + left个（1\u0026lt; left \u0026lt;= p）后手必胜，必胜策略为：每次取石子活动中，若先手取k个，则后手取（p+q-k）个，那么最后剩下left个给先手，此时left \u0026lt;= p，所以先手只能一次取完，后手胜。\n若n =（p+q）* r + left个（p \u0026lt; left \u0026lt;= q），则先手必胜，必胜策略为：先手第一次取t（1\u0026lt;left – t \u0026lt;= p）个，以后每次后手取k个，则先手取（p+q-k）个，那么最后留下1\u0026lt; left – t \u0026lt;=p给后手，则先手胜。\n代码 1using namespace std; 2 3int main() 4{ 5 int n, p, q; 6 while(~scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;n, \u0026amp;p, \u0026amp;q)) 7 { 8 int s = n % (p+q); 9 if(s!=0 \u0026amp;\u0026amp; s\u0026lt;=p){ 10 printf(\u0026#34;LOST\\n\u0026#34;); 11 }else{ 12 printf(\u0026#34;WIN\\n\u0026#34;); 13 } 14 } 15 return 0; 16} ","permalink":"https://blog.lordash.de/posts/solution/hdu-2897-%E9%82%82%E9%80%85%E6%98%8E%E4%B8%8B/","summary":"邂逅明下(HDU-2897) 题面 当日遇到月，于是有了明。当我遇到了你，便成了侣。 那天，日月相会，我见到了你。而且，大地失去了光辉，你我是否成","title":"HDU-2897 邂逅明下"},{"content":"取石子游戏(HDU-2516) 题面 1堆石子有n个,两人轮流取.先取者第1次可以取任意多个，但不能全部取完.以后每次取的石子数不能超过上次取子数的2倍。取完者胜.先取者负输出\u0026quot;Second win\u0026quot;.先取者胜输出\u0026quot;First win\u0026quot;.\n输入 输入有多组.每组第1行是2\u0026lt;=n\u0026lt;2^31. n=0退出.\n输出 先取者负输出\u0026quot;Second win\u0026quot;. 先取者胜输出\u0026quot;First win\u0026quot;. 参看Sample Output.\n样例输入 12 213 310000 40 样例输出 1Second win 2Second win 3First win 提示 无\n思路 单堆Fibonacci博弈，不用求SG函数。\n代码 1using namespace std; 2int f[50]; 3 4void fib(){ 5 f[1] = f[2] = 1; 6 for(int i=3; i\u0026lt;47; i++){ 7 f[i] = f[i-1] + f[i-2]; 8 } 9} 10 11int main() 12{ 13 fib(); 14 int n; 15 while(~scanf(\u0026#34;%d\u0026#34;, \u0026amp;n) \u0026amp;\u0026amp; n) 16 { 17 int flag = 1; 18 for(int i=1; i\u0026lt;47; i++){ 19 if(f[i]==n){ 20 printf(\u0026#34;Second win\\n\u0026#34;); 21 flag = 0; 22 break; 23 } 24 } 25 if(flag){ 26 printf(\u0026#34;First win\\n\u0026#34;); 27 } 28 } 29 return 0; 30} ","permalink":"https://blog.lordash.de/posts/solution/hdu-2516-%E5%8F%96%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8F/","summary":"取石子游戏(HDU-2516) 题面 1堆石子有n个,两人轮流取.先取者第1次可以取任意多个，但不能全部取完.以后每次取的石子数不能超过上次取子","title":"HDU-2516 取石子游戏"},{"content":"A simple stone game(HDU-2486) 题面 After he has learned how to play Nim game, Mike begins to try another stone game which seems much easier.\nThe game goes like this: Two players start the game with a pile of n stones. They take stones from the pile in turn and every time they take at least one stone. The one who goes first can take at most n-1 stones for his first move. From then on a player can take at most k times as many stones as his opponent has taken last time. For example, if one player take m stones in his turn, then the other player can take at most k * m stones next time. The player who takes the last stone wins the game. Suppose that those two players always take the best moves and never make mistakes, your job is to find out who will definitely win the game.\n输入 The first line contains a integer t, indicating that there are t test cases following.(t\u0026lt;=20). Each test case is a line consisting of two integer n and k.(2\u0026lt;=n\u0026lt;=10^8,1\u0026lt;=k\u0026lt;=10^5).\n输出 For each test case, output one line starting with “Case N: ”, N is the case number. And then, if the first player can ensure a winning, print the minimum number of stones he should take in his first turn. Otherwise, print \u0026ldquo;lose\u0026rdquo;. Please note that there is a blank following the colon.\n样例输入 15 216 1 311 1 432 2 534 2 619 3 样例输出 1Case 1: lose 2Case 2: 1 3Case 3: 3 4Case 4: lose 5Case 5: 4 提示 When k = 1, the first player will definitely lose if the initial amount of stones is in the set {2, 4, 8, 16, 32, \u0026hellip;}. Let\u0026rsquo;s call this kind of set “first-player-lose set”.\nWhen k = 2, the first-player-lose set is {2, 3, 5, 8, 13, 21, 34, 57 \u0026hellip;} , which happens to be the Fibonacci sequence starting from 2.\n思路 K倍动态减法博弈，参照斐波那契博弈和齐肯多夫定理的证明过程，将 $ f_{i} = f_{i-1} + f_{i-2} $ 替换为 $ f_{i} = f_{i-1} + f_{k} \\mid { K \\times f{k-1} \\lt f_{i-1} \\le K \\times f_{k}} $ ，也就是将齐肯多夫定理表述中的 若干不连续的项 替换为 若干两两之比大于K项。预处理出类似斐波那契博弈中的斐波那契序列，面对局势为序列项的，先手必败。\n注意时间复杂度为 $ O(Tlog_{\\frac{k+1}{k}}N) \\approx 2 \\times 10^{8} $，卡常。\n详细参考《从“k倍动态减法游戏”出发探究一类组合游戏问题》、[POJ3922]Now解题报告。\n代码 1using namespace std; 2int f[1000005] = {1}; 3 4int main() 5{ 6 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 7 for(int cs=1; cs\u0026lt;=T; cs++) 8 { 9 int n, k; 10 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;k); 11 12 int i=1, j=0; 13 for(; f[i] \u0026lt;= n; i++){ 14 for(; 1LL * k * f[j] \u0026lt; f[i]; j++); 15 f[i+1] = f[i] + f[j]; 16 } 17 i--; 18 19 printf(\u0026#34;Case %d: \u0026#34;, cs); 20 if(f[i] == n){ 21 printf(\u0026#34;lose\\n\u0026#34;); 22 }else{ 23 while(n != f[i]){ 24 for(n-=f[i]; n\u0026lt;f[i]; i--); 25 } 26 printf(\u0026#34;%d\\n\u0026#34;, n); 27 } 28 } 29 return 0; 30} ","permalink":"https://blog.lordash.de/posts/solution/hdu-2486-a-simple-stone-game/","summary":"A simple stone game(HDU-2486) 题面 After he has learned how to play Nim game, Mike begins to try another stone game which seems much easier. The game goes like this: Two players start the game with a pile of n stones. They take stones from the pile in turn and every time they take at least one stone. The one who goes first can take at most n-1 stones","title":"HDU-2486 A simple stone game"},{"content":"取(2堆)石子游戏(HDU-2177) 题面 有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意的一堆中取走任意多的石子；二是可以在两堆中同时取走相同数量的石子。最后把石子全部取完者为胜者。现在给出初始的两堆石子的数目，如果轮到你先取，假设双方都采取最好的策略，问最后你是胜者还是败者。如果你胜，你第1次怎样取子?\n输入 输入包含若干行，表示若干种石子的初始情况，其中每一行包含两个非负整数a和b，表示两堆石子的数目，a和b都不大于1,000,000，且a\u0026lt;=b。a=b=0退出。\n输出 输出也有若干行，如果最后你是败者，则为0，反之，输出1，并输出使你胜的你第1次取石子后剩下的两堆石子的数量x,y,x\u0026lt;=y。如果在任意的一堆中取走石子能胜同时在两堆中同时取走相同数量的石子也能胜，先输出取走相同数量的石子的情况.\n样例输入 11 2 25 8 34 7 42 2 50 0 样例输出 10 21 34 7 43 5 50 61 70 0 81 2 提示 无\n思路 Wythoff博弈，由b-a可以算出同时取的情况，然后暴力枚举一下单个取的情况，数据很水，自己找样例测测。\n代码 1using namespace std; 2typedef pair\u0026lt;int, int\u0026gt; pii; 3const double t = (sqrt(5) + 1) / 2; 4 5int main() 6{ 7 int a, b; 8 while(~scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;a, \u0026amp;b) \u0026amp;\u0026amp; (a || b)) 9 { 10 if(a \u0026gt; b) swap(a, b); 11 int x = t * (b-a); 12 13 if(a == x){ 14 printf(\u0026#34;0\\n\u0026#34;); 15 continue; 16 } 17 18 printf(\u0026#34;1\\n\u0026#34;); 19 set\u0026lt;pii \u0026gt; s; 20 if(a\u0026gt;x){ // 同时取 21 printf(\u0026#34;%d %d\\n\u0026#34;, x, x+b-a); 22 s.insert(pii(x, x+b-a)); 23 } 24 25 for(int i=a-1; i\u0026gt;=0; i--){ // 取a 26 if(i==(int)(t * (b-i)) \u0026amp;\u0026amp; s.find(pii(i, b))==s.end()){ 27 printf(\u0026#34;%d %d\\n\u0026#34;, i, b); 28 s.insert(pii(i, b)); 29 break; 30 } 31 } 32 33 for(int i=b-1; i\u0026gt;=0; i--){ // 取b 34 int n=min(a, i), m=max(a, i); 35 if(n==(int)(t * (m-n)) \u0026amp;\u0026amp; s.find(pii(n, m))==s.end()) { 36 printf(\u0026#34;%d %d\\n\u0026#34;, n, m); 37 break; 38 } 39 } 40 } 41 return 0; 42} ","permalink":"https://blog.lordash.de/posts/solution/hdu-2177-%E5%8F%962%E5%A0%86%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8F/","summary":"取(2堆)石子游戏(HDU-2177) 题面 有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可","title":"HDU-2177 取(2堆)石子游戏"},{"content":"Beans Game(ZOJ-3057) 题面 There are three piles of beans. TT and DD pick any number of beans from any pile or the same number from any two piles by turns. Who get the last bean will win. TT and DD are very clever.\n输入 Each test case contains of a single line containing 3 integers a b c, indicating the numbers of beans of these piles. It is assumed that 0 \u0026lt;= a,b,c \u0026lt;= 300 and a + b + c \u0026gt; 0.\n输出 For each test case, output 1 if TT will win, ouput 0 if DD will win.\n样例输入 11 0 0 21 1 1 32 3 6 样例输出 11 20 30 提示 无\n思路 对于先手来说，如果数量分别为(a, a, b)或(a, b, a)，或(b, a, a)的形式，那么先手必赢，因为先手可以使其成为(a, a, a)的形式，那么不论后手怎么拿，都是先手最后使其成为(a, a, a)的形式直至(0, 0, 0)；如果(a, b, c)是必败态，那么将其中某个数加k，或将其中某两个数同时加k，就是必胜态。\n1using namespace std; 2bool SG[305][305][305]; 3 4void getSg(){ 5 for(int i=0; i\u0026lt;=300; i++) 6 for(int j=0; j\u0026lt;=300; j++) 7 for(int k=0; k\u0026lt;=300; k++){ 8 if(SG[i][j][k] == 0){ 9 for(int x=i+1; x\u0026lt;=300; x++) SG[x][j][k] = 1; 10 for(int x=j+1; x\u0026lt;=300; x++) SG[i][x][k] = 1; 11 for(int x=k+1; x\u0026lt;=300; x++) SG[i][j][x] = 1; 12 for(int x=1; x+i\u0026lt;=300 \u0026amp;\u0026amp; x+j\u0026lt;=300; x++) SG[x+i][x+j][k] = 1; 13 for(int x=1; x+j\u0026lt;=300 \u0026amp;\u0026amp; x+k\u0026lt;=300; x++) SG[i][x+j][x+k] = 1; 14 for(int x=1; x+i\u0026lt;=300 \u0026amp;\u0026amp; x+k\u0026lt;=300; x++) SG[x+i][j][x+k] = 1; 15 } 16 } 17 18} 19 20int main() 21{ 22 getSg(); 23 24 int a, b, c; 25 while(~scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;a, \u0026amp;b, \u0026amp;c)) 26 { 27 printf(\u0026#34;%d\\n\u0026#34;, SG[a][b][c]); 28 } 29 return 0; 30} ","permalink":"https://blog.lordash.de/posts/solution/zoj-3057-beans-game/","summary":"Beans Game(ZOJ-3057) 题面 There are three piles of beans. TT and DD pick any number of beans from any pile or the same number from any two piles by turns. Who get the last bean will win. TT and DD are very clever. 输入 Each test case contains of a single line containing 3 integers a b c, indicating the numbers of beans of these piles. It is","title":"ZOJ-3057 Beans Game"},{"content":"A simple stone game(POJ-3922) 题面 After he has learned how to play Nim game, Mike begins to try another stone game which seems much easier.\nThe game goes like this: Two players start the game with a pile of n stones. They take stones from the pile in turn and every time they take at least one stone. The one who goes first can take at most n-1 stones for his first move. From then on a player can take at most k times as many stones as his opponent has taken last time. For example, if one player take m stones in his turn, then the other player can take at most k * m stones next time. The player who takes the last stone wins the game. Suppose that those two players always take the best moves and never make mistakes, your job is to find out who will definitely win the game.\n输入 The first line contains a integer t, indicating that there are t test cases following.(t\u0026lt;=20). Each test case is a line consisting of two integer n and k.(2\u0026lt;=n\u0026lt;=10^8,1\u0026lt;=k\u0026lt;=10^5).\n输出 For each test case, output one line starting with “Case N: ”, N is the case number. And then, if the first player can ensure a winning, print the minimum number of stones he should take in his first turn. Otherwise, print \u0026ldquo;lose\u0026rdquo;. Please note that there is a blank following the colon.\n样例输入 15 216 1 311 1 432 2 534 2 619 3 样例输出 1Case 1: lose 2Case 2: 1 3Case 3: 3 4Case 4: lose 5Case 5: 4 提示 When k = 1, the first player will definitely lose if the initial amount of stones is in the set {2, 4, 8, 16, 32, \u0026hellip;}. Let\u0026rsquo;s call this kind of set “first-player-lose set”.\nWhen k = 2, the first-player-lose set is {2, 3, 5, 8, 13, 21, 34, 57 \u0026hellip;} , which happens to be the Fibonacci sequence starting from 2.\n思路 K倍动态减法博弈，参照斐波那契博弈和齐肯多夫定理的证明过程，将 $ f_{i} = f_{i-1} + f_{i-2} $ 替换为 $ f_{i} = f_{i-1} + f_{k} \\mid { K \\times f{k-1} \\lt f_{i-1} \\le K \\times f_{k}} $ ，也就是将齐肯多夫定理表述中的 若干不连续的项 替换为 若干两两之比大于K项。预处理出类似斐波那契博弈中的斐波那契序列，面对局势为序列项的，先手必败。\n注意时间复杂度为 $ O(Tlog_{\\frac{k+1}{k}}N) \\approx 2 \\times 10^{8} $，卡常。\n详细参考《从“k倍动态减法游戏”出发探究一类组合游戏问题》、[POJ3922]Now解题报告。\n代码 1using namespace std; 2int f[1000005] = {1}; 3 4int main() 5{ 6 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 7 for(int cs=1; cs\u0026lt;=T; cs++) 8 { 9 int n, k; 10 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;k); 11 12 int i=1, j=0; 13 for(; f[i] \u0026lt;= n; i++){ 14 for(; 1LL * k * f[j] \u0026lt; f[i]; j++); 15 f[i+1] = f[i] + f[j]; 16 } 17 i--; 18 19 printf(\u0026#34;Case %d: \u0026#34;, cs); 20 if(f[i] == n){ 21 printf(\u0026#34;lose\\n\u0026#34;); 22 }else{ 23 while(n != f[i]){ 24 for(n-=f[i]; n\u0026lt;f[i]; i--); 25 } 26 printf(\u0026#34;%d\\n\u0026#34;, n); 27 } 28 } 29 return 0; 30} ","permalink":"https://blog.lordash.de/posts/solution/poj-3922-a-simple-stone-game/","summary":"A simple stone game(POJ-3922) 题面 After he has learned how to play Nim game, Mike begins to try another stone game which seems much easier. The game goes like this: Two players start the game with a pile of n stones. They take stones from the pile in turn and every time they take at least one stone. The one who goes first can take at most n-1 stones","title":"POJ-3922 A simple stone game"},{"content":"Light Switching Game(POJ-3533) 题面 The Light Switching Game is played on a 1000 × 1000 × 1000 cube of cells with a light in each cell, as Figure.1 shows. Initially, most of the lights are off while exactly N lights are on. Two players take moves alternately. A move consists of switching the lights at the corners of a cuboid, i.e. (x1,y1,z1), (x1,y1,z2), (x1,y2,z1), (x1,y2,z2), (x2,y1,z1), (x2,y1,z2), (x2,y2,z1), (x2,y2,z2) where 1 ≤ x1 ≤ x2 ≤ 1000, 1 ≤y1 ≤ y2 ≤ 1000, 1 ≤z1 ≤ z2 ≤ 1000 and the light at the corner (x2,y2,z2) must be on (and turned off after the move). Notice the cuboid is possibly degenerated to a rectangle, a line or even a single cell so that the player may also switching four, two or one besides eight lights in a move. The player loses the game when he can not take a move.\nYou will find out whether the second player can win if both players play optimally.\n输入 There are multiple test cases. Every test case starts with one line containing a single number N indicating the number of lights which is initially on. (N ≤ 100) Each of the next N lines contains the coordinates (x, y, z) (1 ≤ x, y, z ≤ 1000) showing that the light at this position is on initially.\n输出 One line for each test case which contains \u0026ldquo;Yes\u0026rdquo; or \u0026ldquo;No\u0026rdquo; indicating whether the second player can win the game.\n样例输入 14 25 11 30 35 19 19 423 15 6 52 26 16 63 79 20 9 88 1 28 930 22 26 样例输出 1Yes 2No 提示 无\n思路 Nim积，见【题解】HDU-3404 Switch lights\n代码 1using namespace std; 2 3/* 4 Nim积 x @ y = mex{(a @ y) ^ (x @ b) ^ (a @ b)}, 0 \u0026lt;= a \u0026lt; x, 0 \u0026lt;= b \u0026lt; y 5 6 1. X x 2^(2^a) = X * 2^(2^a) 7 2. X x Y \u0026lt; 2^(2^a) 8 3. 2^(2^a) x 2^(2^a) = (3/2) * 2^(2^a) 9 10 调用 ans ^= f(x, y) 11*/ 12 13 14int SG[20][20]; 15 16int f(int, int); 17int g(int x, int y) // 计算2^x与2^y的nim积 18{ 19 if(SG[x][y] != -1) return SG[x][y]; 20 if(!x) return SG[x][y] = 1\u0026lt;\u0026lt;y; // x==0也就是1与2^y的nim积，等于2^y 21 if(!y) return SG[x][y] = 1\u0026lt;\u0026lt;x; 22 23 int ans=1, t; 24 int xx=x, yy=y, k=1; 25 while(x || y) // 再将x和y分为二进制，这里计算那些普通乘积的（即对应二进制位不同的） 26 { 27 t = 1\u0026lt;\u0026lt;k; // 从此位得到的最终的数2^k 28 if((x^y)\u0026amp;1) ans *= t; // 该位不同 29 x\u0026gt;\u0026gt;=1; y\u0026gt;\u0026gt;=1; k\u0026lt;\u0026lt;=1; // 从此位得到的指数(本身也是2的幂) 30 } 31 32 x=xx; y=yy; k=1; 33 while(x || y) // 计算那些相同的fermat 2-power 数，与已得出的数的nim积 34 { 35 t = 1\u0026lt;\u0026lt;k; 36 if ((x\u0026amp;y)\u0026amp;1) ans = f(ans, t/2*3); // 该位相同 37 x\u0026gt;\u0026gt;=1; y\u0026gt;\u0026gt;=1; k\u0026lt;\u0026lt;=1; // 从此位得到的指数(本身也是2的幂) 38 } 39 return SG[xx][yy] = ans; 40} 41 42int f(int x, int y) //计算二位Nim积 43{ 44 if(!x || !y) return 0; 45 if(x == 1) return y; 46 if(y == 1) return x; 47 48 int ans=0; 49 for (int i=x, a=0; i; i\u0026gt;\u0026gt;=1, a++) //将x和二进制分解 50 { 51 if ((i\u0026amp;1)==0) continue; //该位是1才计算 52 for (int j=y, b=0; j; j\u0026gt;\u0026gt;=1, b++) 53 { 54 if ((j\u0026amp;1)==0) continue; 55 ans ^= g(a, b); 56 } 57 } 58 return ans; 59} 60 61int main() 62{ 63 memset(SG, -1, sizeof(SG)); 64 int n; 65 while(~scanf(\u0026#34;%d\u0026#34;, \u0026amp;n) \u0026amp;\u0026amp; n) 66 { 67 int nim=0; 68 for(int i=0; i\u0026lt;n; i++){ 69 int x, y, z; 70 scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;x, \u0026amp;y, \u0026amp;z); 71 nim ^= f(x, f(y, z)); 72 } 73 if(nim){ 74 printf(\u0026#34;No\\n\u0026#34;); 75 }else{ 76 printf(\u0026#34;Yes\\n\u0026#34;); 77 } 78 } 79 return 0; 80} ","permalink":"https://blog.lordash.de/posts/solution/poj-3533-light-switching-game/","summary":"Light Switching Game(POJ-3533) 题面 The Light Switching Game is played on a 1000 × 1000 × 1000 cube of cells with a light in each cell, as Figure.1 shows. Initially, most of the lights are off while exactly N lights are on. Two players take moves alternately. A move consists of switching the lights at the corners of a cuboid, i.e. (x1,y1,z1), (x1,y1,z2), (x1,y2,z1), (x1,y2,z2), (x2,y1,z1), (x2,y1,z2), (x2,y2,z1), (x2,y2,z2)","title":"POJ-3533 Light Switching Game"},{"content":"Switch lights(HDU-3404) 题面 lxhgww is playing a game with his computer Deep Blue. The game is played on a matrix containing lights. At first, some lights are on, while others are off. lxhgww and Deep Blue take turns to switch the lights. For each step, the player should choose a rectangle in the matrix: (x1 , y1) , (x1 , y2) , (x2 , y1) , (x2 , y2) , (x1\u0026lt;=x2,y1\u0026lt;=y2, the light at (x2, y2) should be on) and change the lights’ status on the four vertex of the rectangle, namely on to off, and off to on. The player turns all the lights off wins the game. Notice the rectangle is possibly degenerated to line or even a single cell so that the player may also switch two or one besides four lights in a move. Deep Blue\u0026rsquo;s strategy is perfect, if it has a chance to win, never will it lose. Does lxhgww have a chance to win if he takes the first step?\n输入 The first line is an integer T(T\u0026lt;=100) indicating the case number. Each case has one integers n (n\u0026lt;= 1000 ), the number of on-lights at the beginning of the game. Then come n lines, each line has two integers, xi , yi, (1\u0026lt;=xi\u0026lt;=10000, 1\u0026lt;=yi\u0026lt;=10000) , so light at (xi, yi) is on at first. (No two lights at the same position)\n输出 If lxhgww still has a chance to win, output \u0026ldquo;Have a try, lxhgww.\u0026rdquo;, otherwise tell lxhgww \u0026ldquo;Don\u0026rsquo;t waste your time.\u0026rdquo;\n样例输入 12 22 31 2 42 1 52 61 1 72 2 样例输出 1Don\u0026#39;t waste your time. 2Have a try, lxhgww. 提示 无\n思路 一个二维矩阵上，有若干个亮着的灯泡 。 每次选择一个矩阵（右上角的灯泡必须是亮的），改变四个角灯泡的状态，不能操作的选手判负。\nNim积定义\n$ x \\otimes y = sg(x, y) = mex{(a \\otimes y) \\oplus (x \\otimes b) \\oplus (a \\otimes b), 0 \\le a \\lt x, 0 \\le b \\lt y} $\n以下是对于 x, y≤4 的一个小表。\n0 1 2 3 4 0 0 0 0 0 0 1 0 1 2 3 4 2 0 2 3 1 8 3 0 3 1 2 12 4 0 4 8 12 6 定义费马数Fermat 2-power为$ 2^{2^{k}} $，对于$ x,y \u0026lt; 2^{2^{k}} $有以下性质\n一个 Fermat 2-power 与任意小于它的数的 Nim 积为一般意义下乘法的积，即$ x \\otimes 2^{2^{k}} = x * 2^{2^{k}} $\n一个 Fermat 2-power 与自己的 Nim 积为自己的 $ \\frac{3}{2} $ 倍，即 $ 2^{2^{k}} \\otimes 2^{2^{k}} = \\frac{3}{2} * 2^{2^{k}}$\n$ x \\otimes y \u0026lt; 2^{2^{k}} $\n根据性质可以得出递归求Nim积的板子。\n详细参见论文《从“k倍动态减法游戏”出发探究一类组合游戏问题》。\n代码 1using namespace std; 2 3/* 4 Nim积 x @ y = mex{(a @ y) ^ (x @ b) ^ (a @ b)}, 0 \u0026lt;= a \u0026lt; x, 0 \u0026lt;= b \u0026lt; y 5 6 1. X x 2^(2^a) = X * 2^(2^a) 7 2. X x Y \u0026lt; 2^(2^a) 8 3. 2^(2^a) x 2^(2^a) = (3/2) * 2^(2^a) 9 10 模板一：调用 ans ^= f(x, y) 11*/ 12 13 14int SG[20][20]; 15 16int f(int, int); 17int g(int x, int y) // 计算2^x与2^y的nim积 18{ 19 if(SG[x][y] != -1) return SG[x][y]; 20 if(!x) return SG[x][y] = 1\u0026lt;\u0026lt;y; // x==0也就是1与2^y的nim积，等于2^y 21 if(!y) return SG[x][y] = 1\u0026lt;\u0026lt;x; 22 23 int ans=1, t; 24 int xx=x, yy=y, k=1; 25 while(x || y) // 再将x和y分为二进制，这里计算那些普通乘积的（即对应二进制位不同的） 26 { 27 t = 1\u0026lt;\u0026lt;k; // 从此位得到的最终的数2^k 28 if((x^y)\u0026amp;1) ans *= t; // 该位不同 29 x\u0026gt;\u0026gt;=1; y\u0026gt;\u0026gt;=1; k\u0026lt;\u0026lt;=1; // 从此位得到的指数(本身也是2的幂) 30 } 31 32 x=xx; y=yy; k=1; 33 while(x || y) // 计算那些相同的fermat 2-power 数，与已得出的数的nim积 34 { 35 t = 1\u0026lt;\u0026lt;k; 36 if ((x\u0026amp;y)\u0026amp;1) ans = f(ans, t/2*3); // 该位相同 37 x\u0026gt;\u0026gt;=1; y\u0026gt;\u0026gt;=1; k\u0026lt;\u0026lt;=1; // 从此位得到的指数(本身也是2的幂) 38 } 39 return SG[xx][yy] = ans; 40} 41 42int f(int x, int y) //计算二位Nim积 43{ 44 if(!x || !y) return 0; 45 if(x == 1) return y; 46 if(y == 1) return x; 47 48 int ans=0; 49 for (int i=x, a=0; i; i\u0026gt;\u0026gt;=1, a++) //将x和二进制分解 50 { 51 if ((i\u0026amp;1)==0) continue; //该位是1才计算 52 for (int j=y, b=0; j; j\u0026gt;\u0026gt;=1, b++) 53 { 54 if ((j\u0026amp;1)==0) continue; 55 ans ^= g(a, b); 56 } 57 } 58 return ans; 59} 60 61/* 62 k为最大的整数满足 M = 2^(2^k) \u0026lt;= x 63 x = p * M + q, y = s * M + t 64 x @ y = spMM + sqM + tpM + tq 65 = M(sp+sq+tp) + tq + (M/2 @ sp) 66 67 模板二：调用 ans ^ Nim_Multi(x, y) 68*/ 69 70int getSg(int x, int y){ 71 if(!x || !y) return 0; 72 if(SG[x][y]!=-1) return SG[x][y]; 73 bool S[1\u0026lt;\u0026lt;8] = {0}; 74 75 for(int i=0; i\u0026lt;x; i++) 76 S[getSg(i, y)] = 1; 77 78 for(int i=0; i\u0026lt;y; i++) 79 S[getSg(x, i)] = 1; 80 81 for(int i=1; i\u0026lt;x; i++) 82 for(int j=1; j\u0026lt;y; j++) 83 S[getSg(i,y) ^ getSg(x,j) ^ getSg(i,j)] = 1; 84 85 int mex = 0; 86 while(S[mex]) mex++; 87 return SG[x][y]=mex; 88} 89 90int Nim_Multi_Power(int x, int y) 91{ 92 if (x \u0026lt; 16) return getSg(x, y); 93 int a=1, m; 94 for(; (1\u0026lt;\u0026lt;a) \u0026lt;= x; a\u0026lt;\u0026lt;=1); 95 a \u0026gt;\u0026gt;= 1; m = 1\u0026lt;\u0026lt;a; 96 int p = x/m, s = y/m, t = y\u0026amp;(m-1); 97 int d1 = Nim_Multi_Power(p, s); 98 int d2 = Nim_Multi_Power(p, t); 99 return ((d1^d2) \u0026lt;\u0026lt; a) ^ Nim_Multi_Power(m/2, d1); 100} 101 102int Nim_Multi(int x, int y) 103{ 104 if (x \u0026lt; y) swap(x, y); 105 if (x \u0026lt; 16) return getSg(x, y); 106 int a=1, m; 107 for(; (1\u0026lt;\u0026lt;a) \u0026lt;= x; a\u0026lt;\u0026lt;=1); 108 a \u0026gt;\u0026gt;= 1; m = 1\u0026lt;\u0026lt;a; 109 int p = x/m, q = x\u0026amp;(m-1), s = y/ m, t = y\u0026amp;(m-1); 110 int c1 = Nim_Multi(p, s); 111 int c2 = Nim_Multi(p, t) ^ Nim_Multi(q, s); 112 int c3 = Nim_Multi(q, t); 113 return ((c1^c2) \u0026lt;\u0026lt; a) ^ c3 ^ Nim_Multi_Power(m/2, c1); 114} 115 116 117int main() 118{ 119 memset(SG, -1, sizeof(SG)); 120 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 121 while(T--) 122 { 123 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 124 125 int nim=0; 126 for(int i=0; i\u0026lt;n; i++){ 127 int x, y; 128 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;x, \u0026amp;y); 129 //nim ^= f(x, y); 130 nim ^= Nim_Multi(x, y); 131 } 132 if(nim){ 133 printf(\u0026#34;Have a try, lxhgww.\\n\u0026#34;); 134 }else{ 135 printf(\u0026#34;Don\u0026#39;t waste your time.\\n\u0026#34;); 136 } 137 } 138 return 0; 139} ","permalink":"https://blog.lordash.de/posts/solution/hdu-3404-switch-lights/","summary":"Switch lights(HDU-3404) 题面 lxhgww is playing a game with his computer Deep Blue. The game is played on a matrix containing lights. At first, some lights are on, while others are off. lxhgww and Deep Blue take turns to switch the lights. For each step, the player should choose a rectangle in the matrix: (x1 , y1) , (x1 , y2) , (x2 , y1) , (x2 , y2)","title":"HDU-3404 Switch lights"},{"content":"John(POJ-3480) 题面 Little John is playing very funny game with his younger brother. There is one big box filled with M\u0026amp;Ms of different colors. At first John has to eat several M\u0026amp;Ms of the same color. Then his opponent has to make a turn. And so on. Please note that each player has to eat at least one M\u0026amp;M during his turn. If John (or his brother) will eat the last M\u0026amp;M from the box he will be considered as a looser and he will have to buy a new candy box.\nBoth of players are using optimal game strategy. John starts first always. You will be given information about M\u0026amp;Ms and your task is to determine a winner of such a beautiful game.\n输入 The first line of input will contain a single integer T – the number of test cases. Next T pairs of lines will describe tests in a following format. The first line of each test will contain an integer N – the amount of different M\u0026amp;M colors in a box. Next line will contain N integers Ai, separated by spaces – amount of M\u0026amp;Ms of i-th color.\nConstraints: 1 \u0026lt;= T \u0026lt;= 474, 1 \u0026lt;= N \u0026lt;= 47, 1 \u0026lt;= Ai \u0026lt;= 4747\n输出 Output T lines each of them containing information about game winner. Print “John” if John will win the game or “Brother” in other case.For each test case, write a single line with an integer indicating the number of winning moves from the given Nim position.\n样例输入 12 23 33 5 1 41 51 样例输出 1John 2Brother 提示 无\n思路 Anti-Nim博弈，属于Anti-SG游戏的一种。\nAnti-SG游戏定义：\n决策集合为空的操作者胜。\n其余规则与SG游戏一致。\nSJ定理：\n对于任意一个Anti-SG游戏，如果定义所有子游戏的SG值为0时游戏结束，先手必胜的条件：\n游戏的SG值为0且所有子游戏SG值均不超过1。 游戏的SG值不为0且至少一个子游戏SG值超过1。 代码 1using namespace std; 2 3int main() 4{ 5 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 6 while(T--) 7 { 8 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 9 10 int nim=0, anti=0; 11 for(int i=0; i\u0026lt;n; i++){ 12 int x; scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 13 if(x\u0026gt;1) anti = 1; 14 nim ^=x; 15 } 16 if((!nim\u0026amp;\u0026amp;!anti) || (nim\u0026amp;\u0026amp;anti)){ 17 printf(\u0026#34;John\\n\u0026#34;); 18 }else{ 19 printf(\u0026#34;Brother\\n\u0026#34;); 20 } 21 } 22 return 0; 23} ","permalink":"https://blog.lordash.de/posts/solution/poj-3480-john/","summary":"John(POJ-3480) 题面 Little John is playing very funny game with his younger brother. There is one big box filled with M\u0026amp;Ms of different colors. At first John has to eat several M\u0026amp;Ms of the same color. Then his opponent has to make a turn. And so on. Please note that each player has to eat at least one M\u0026amp;M during his turn. If John (or his brother) will eat","title":"POJ-3480 John"},{"content":"Nim(POJ-2975) 题面 Nim is a 2-player game featuring several piles of stones. Players alternate turns, and on his/her turn, a player’s move consists of removing one or more stones from any single pile. Play ends when all the stones have been removed, at which point the last player to have moved is declared the winner. Given a position in Nim, your task is to determine how many winning moves there are in that position.A position in Nim is called “losing” if the first player to move from that position would lose if both sides played perfectly. A “winning move,” then, is a move that leaves the game in a losing position. There is a famous theorem that classifies all losing positions. Suppose a Nim position contains n piles having k1, k2, …, kn stones respectively; in such a position, there are k1 + k2 + … + kn possible moves. We write each ki in binary (base 2). Then, the Nim position is losing if and only if, among all the ki’s, there are an even number of 1’s in each digit position. In other words, the Nim position is losing if and only if the xor of the ki’s is 0.Consider the position with three piles given by k1 = 7, k2 = 11, and k3 = 13. In binary, these values are as follows:\n0111\n1011\n1101\nThere are an odd number of 1’s among the rightmost digits, so this position is not losing. However, suppose k3 were changed to be 12. Then, there would be exactly two 1’s in each digit position, and thus, the Nim position would become losing. Since a winning move is any move that leaves the game in a losing position, it follows that removing one stone from the third pile is a winning move when k1 = 7, k2 = 11, and k3 = 13. In fact, there are exactly three winning moves from this position: namely removing one stone from any of the three piles.\n输入 The input test file will contain multiple test cases, each of which begins with a line indicating the number of piles, 1 ≤ n ≤ 1000. On the next line, there are n positive integers, 1 ≤ ki ≤ 1, 000, 000, 000, indicating the number of stones in each pile. The end-of-file is marked by a test case with n = 0 and should not be processed.\n输出 For each test case, write a single line with an integer indicating the number of winning moves from the given Nim position.\n样例输入 13 27 11 13 32 41000000000 1000000000 50 样例输出 13 20 提示 无\n思路 Nim博弈。\n代码 1using namespace std; 2int f[1005]; 3 4 5int main() 6{ 7 int n; 8 while(~scanf(\u0026#34;%d\u0026#34;, \u0026amp;n) \u0026amp;\u0026amp; n) 9 { 10 int nim=0; 11 for(int i=0; i\u0026lt;n; i++){ 12 scanf(\u0026#34;%d\u0026#34;, \u0026amp;f[i]); 13 nim ^= f[i]; 14 } 15 16 int num = 0; 17 for(int i=0; i\u0026lt;n; i++){ 18 if((nim^f[i]) \u0026lt; f[i]) 19 num++; 20 } 21 printf(\u0026#34;%d\\n\u0026#34;, num); 22 } 23 return 0; 24} ","permalink":"https://blog.lordash.de/posts/solution/poj-2975-nim/","summary":"Nim(POJ-2975) 题面 Nim is a 2-player game featuring several piles of stones. Players alternate turns, and on his/her turn, a player’s move consists of removing one or more stones from any single pile. Play ends when all the stones have been removed, at which point the last player to have moved is declared the winner. Given a position in Nim, your task","title":"POJ-2975 Nim"},{"content":"S-Nim(POJ-2960) 题面 Arthur and his sister Caroll have been playing a game called Nim for some time now. Nim is played as follows:\nThe starting position has a number of heaps, all containing some, not necessarily equal, number of beads. The players take turns chosing a heap and removing a positive number of beads from it. The first player not able to make a move, loses. Arthur and Caroll really enjoyed playing this simple game until they recently learned an easy way to always be able to find the best move:\nXor the number of beads in the heaps in the current position (i.e. if we have 2, 4 and 7 the xor-sum will be 1 as 2 xor 4 xor 7 = 1). If the xor-sum is 0, too bad, you will lose. Otherwise, move such that the xor-sum becomes 0. This is always possible. It is quite easy to convince oneself that this works. Consider these facts:\nThe player that takes the last bead wins. After the winning player\u0026rsquo;s last move the xor-sum will be 0. The xor-sum will change after every move. Which means that if you make sure that the xor-sum always is 0 when you have made your move, your opponent will never be able to win, and, thus, you will win.\nUnderstandibly it is no fun to play a game when both players know how to play perfectly (ignorance is bliss). Fourtunately, Arthur and Caroll soon came up with a similar game, S-Nim, that seemed to solve this problem. Each player is now only allowed to remove a number of beads in some predefined set S, e.g. if we have S = {2, 5} each player is only allowed to remove 2 or 5 beads. Now it is not always possible to make the xor-sum 0 and, thus, the strategy above is useless. Or is it?\nyour job is to write a program that determines if a position of S-Nim is a losing or a winning position. A position is a winning position if there is at least one move to a losing position. A position is a losing position if there are no moves to a losing position. This means, as expected, that a position with no legal moves is a losing position.\n输入 Input consists of a number of test cases. For each test case: The first line contains a number k (0 \u0026lt; k ≤ 100) describing the size of S, followed by k numbers si (0 \u0026lt; si ≤ 10000) describing S. The second line contains a number m (0 \u0026lt; m ≤ 100) describing the number of positions to evaluate. The next m lines each contain a number l (0 \u0026lt; l ≤ 100) describing the number of heaps and l numbers hi (0 ≤ hi ≤ 10000) describing the number of beads in the heaps. The last test case is followed by a 0 on a line of its own.\n输出 For each position: If the described position is a winning position print a \u0026lsquo;W\u0026rsquo;.If the described position is a losing position print an \u0026lsquo;L\u0026rsquo;. Print a newline after each test case.\n样例输入 12 2 5 23 32 5 12 43 2 4 7 54 2 3 7 12 65 1 2 3 4 5 73 82 5 12 93 2 4 7 104 2 3 7 12 110 样例输出 1LWW 2WWL 提示 无\n思路 SG函数打表，最后运用SG定理每堆石子异或一下即可。\n代码 1using namespace std; 2int SG[10000], f[10000]; 3 4void getSg(int n, int m){ 5 for(int i=1; i\u0026lt;=n; i++){ 6 bool S[10000]={0}; 7 for(int j=0; j\u0026lt;m \u0026amp;\u0026amp; f[j]\u0026lt;=i; j++){ 8 S[SG[i-f[j]]] = 1; 9 } 10 int mex=0; 11 while(S[mex]) mex++; 12 SG[i]=mex; 13 } 14} 15 16int main() 17{ 18 int k; 19 while(~scanf(\u0026#34;%d\u0026#34;, \u0026amp;k) \u0026amp;\u0026amp; k) 20 { 21 for(int i=0; i\u0026lt;k; i++){ 22 scanf(\u0026#34;%d\u0026#34;, \u0026amp;f[i]); 23 } 24 sort(f, f+k); 25 getSg(10000, k); 26 27 int m; scanf(\u0026#34;%d\u0026#34;, \u0026amp;m); 28 while(m--){ 29 int l; scanf(\u0026#34;%d\u0026#34;, \u0026amp;l); 30 int nim = 0; 31 while(l--){ 32 int h; scanf(\u0026#34;%d\u0026#34;, \u0026amp;h); 33 nim ^= SG[h]; 34 } 35 if(nim){ 36 printf(\u0026#34;W\u0026#34;); 37 }else{ 38 printf(\u0026#34;L\u0026#34;); 39 } 40 } 41 printf(\u0026#34;\\n\u0026#34;); 42 } 43 return 0; 44} ","permalink":"https://blog.lordash.de/posts/solution/poj-2960-s-nim/","summary":"S-Nim(POJ-2960) 题面 Arthur and his sister Caroll have been playing a game called Nim for some time now. Nim is played as follows: The starting position has a number of heaps, all containing some, not necessarily equal, number of beads. The players take turns chosing a heap and removing a positive number of beads from it. The first player not able to make a move, loses. Arthur and Caroll","title":"POJ-2960 S-Nim"},{"content":"A Chess Game(POJ-2425) 题面 Let\u0026rsquo;s design a new chess game. There are N positions to hold M chesses in this game. Multiple chesses can be located in the same position. The positions are constituted as a topological graph, i.e. there are directed edges connecting some positions, and no cycle exists. Two players you and I move chesses alternately. In each turn the player should move only one chess from the current position to one of its out-positions along an edge. The game does not end, until one of the players cannot move chess any more. If you cannot move any chess in your turn, you lose. Otherwise, if the misfortune falls on me\u0026hellip; I will disturb the chesses and play it again.\nDo you want to challenge me? Just write your program to show your qualification!\n输入 Input contains multiple test cases. Each test case starts with a number N (1 \u0026lt;= N \u0026lt;= 1000) in one line. Then the following N lines describe the out-positions of each position. Each line starts with an integer Xi that is the number of out-positions for the position i. Then Xi integers following specify the out-positions. Positions are indexed from 0 to N-1. Then multiple queries follow. Each query occupies only one line. The line starts with a number M (1 \u0026lt;= M \u0026lt;= 10), and then come M integers, which are the initial positions of chesses. A line with number 0 ends the test case.\n输出 There is one line for each query, which contains a string \u0026ldquo;WIN\u0026rdquo; or \u0026ldquo;LOSE\u0026rdquo;. \u0026ldquo;WIN\u0026rdquo; means that the player taking the first turn can win the game according to a clever strategy; otherwise \u0026ldquo;LOSE\u0026rdquo; should be printed.\n样例输入 14 22 1 2 30 41 3 50 61 0 72 0 2 80 9 104 111 1 121 2 130 140 152 0 1 162 1 1 173 0 1 3 180 样例输出 1WIN 2WIN 3WIN 4LOSE 5WIN 提示 Huge input,scanf is recommended.\n思路 给定一个 n 个节点的有向无环图，再给出 m 个棋子，每一个棋子位于一个点上且互相不影响(即一个点上可以有多个棋子)，每回合可以选择一个棋子按照给出的图把它移向下一个点，即当前点与下一个点间有一条有向边，由当前点指向下一个点，无法进行操作则判输，问先手是否必胜。\n一个棋子不能再移动当且仅当这个点的出度为0，因为每个棋子互不影响，所以分别求出每个棋子的SG函数，求一下异或和就好了。\n代码 1using namespace std; 2const int mxn = 1e3 + 5; 3 4vector\u0026lt;int\u0026gt; E[mxn]; 5int SG[mxn]; 6 7int getSg(int x){ 8 if(SG[x]!=-1) return SG[x]; 9 bool S[mxn] = {0}; 10 11 for(int i=0; i\u0026lt;E[x].size(); i++){ 12 S[getSg(E[x][i])] = 1; 13 } 14 15 int mex = 0; 16 while(S[mex]) mex++; 17 return SG[x]=mex; 18} 19 20int main(){ 21 int n; 22 while(~scanf(\u0026#34;%d\u0026#34;, \u0026amp;n) \u0026amp;\u0026amp; n) 23 { 24 memset(SG, -1, sizeof(SG)); 25 for(int i=0; i\u0026lt;n; i++){ 26 E[i].clear(); 27 int m; scanf(\u0026#34;%d\u0026#34;, \u0026amp;m); 28 while(m--){ 29 int x; scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 30 E[i].push_back(x); 31 } 32 } 33 int q; 34 while(~scanf(\u0026#34;%d\u0026#34;, \u0026amp;q) \u0026amp;\u0026amp; q){ 35 int nim = 0; 36 while(q--){ 37 int x; scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 38 nim ^= getSg(x); 39 } 40 if(nim){ 41 printf(\u0026#34;WIN\\n\u0026#34;); 42 }else{ 43 printf(\u0026#34;LOSE\\n\u0026#34;); 44 } 45 } 46 } 47} ","permalink":"https://blog.lordash.de/posts/solution/poj-2425-a-chess-game/","summary":"A Chess Game(POJ-2425) 题面 Let\u0026rsquo;s design a new chess game. There are N positions to hold M chesses in this game. Multiple chesses can be located in the same position. The positions are constituted as a topological graph, i.e. there are directed edges connecting some positions, and no cycle exists. Two players you and I move chesses alternately. In each turn the player should move only one chess from","title":"POJ-2425 A Chess Game"},{"content":"Euclid\u0026rsquo;s Game(POJ-2348) 题面 Two players, Stan and Ollie, play, starting with two natural numbers. Stan, the first player, subtracts any positive multiple of the lesser of the two numbers from the greater of the two numbers, provided that the resulting number must be nonnegative. Then Ollie, the second player, does the same with the two resulting numbers, then Stan, etc., alternately, until one player is able to subtract a multiple of the lesser number from the greater to reach 0, and thereby wins. For example, the players may start with (25,7):\n1 25 7 2 11 7 3 4 7 4 4 3 5 1 3 6 1 0 an Stan wins.\n输入 The input consists of a number of lines. Each line contains two positive integers giving the starting two numbers of the game. Stan always starts.\n输出 For each line of input, output one line saying either Stan wins or Ollie wins assuming that both of them play perfectly. The last line of input contains two zeroes and should not be processed.\n样例输入 134 12 215 24 30 0 样例输出 1Stan wins 2Ollie wins 提示 无\n思路 当局面为(a, b) a\u0026lt;=b，b%a==0的时候，先手必胜；当b\u0026gt;2*a的时候，先手可以将必败态转化为必胜态，即若b=a*x+y，取走a*x会导致必败态（将必胜态留给对手，此时必败）的时候，由于x\u0026gt;2，先手可以选择取走a*(x-1)而将必败态留给对手；当2*a\u0026gt;b\u0026gt;a时，先手只能将局面取b-a，状态互换。\n例如：\n(0, 1) 先手必败\n(1, 2) 先手必胜\n当局面为(2, 3)时，先手只能取成(1, 2)，将必胜态留给对手，此时先手必败\n当局面为(2, 5)时，先手可以取成(1, 2)和(2, 3)，毫无疑问，取成(2, 3)可以将必败态留给对手，此时先手必胜。\n代码 1using namespace std; 2 3int main(){ 4 int a, b; 5 while(~scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;a, \u0026amp;b) \u0026amp;\u0026amp; a \u0026amp;\u0026amp; b) 6 { 7 int win = 1; 8 while(1){ 9 if(a \u0026gt; b) swap(a, b); 10 if(b%a==0 || b-a\u0026gt;a) break; 11 b -= a; 12 win = !win; 13 } 14 if(win){ 15 printf(\u0026#34;Stan wins\\n\u0026#34;); 16 }else{ 17 printf(\u0026#34;Ollie wins\\n\u0026#34;); 18 } 19 } 20} ","permalink":"https://blog.lordash.de/posts/solution/poj-2348-euclids-game/","summary":"Euclid\u0026rsquo;s Game(POJ-2348) 题面 Two players, Stan and Ollie, play, starting with two natural numbers. Stan, the first player, subtracts any positive multiple of the lesser of the two numbers from the greater of the two numbers, provided that the resulting number must be nonnegative. Then Ollie, the second player, does the same with the two resulting numbers, then Stan, etc., alternately, until one player is able to subtract a","title":"POJ-2348 Euclid's Game"},{"content":"Fibonacci again and again(HDU-1848) 题面 任何一个大学生对菲波那契数列(Fibonacci numbers)应该都不会陌生，它是这样定义的： F(1)=1; F(2)=2; F(n)=F(n-1)+F(n-2)(n\u0026gt;=3); 所以，1,2,3,5,8,13……就是菲波那契数列。 在HDOJ上有不少相关的题目，比如1005 Fibonacci again就是曾经的浙江省赛题。 今天，又一个关于Fibonacci的题目出现了，它是一个小游戏，定义如下： 1、 这是一个二人游戏; 2、 一共有3堆石子，数量分别是m, n, p个； 3、 两人轮流走; 4、 每走一步可以选择任意一堆石子，然后取走f个； 5、 f只能是菲波那契数列中的元素（即每次只能取1，2，3，5，8…等数量）； 6、 最先取光所有石子的人为胜者；\n假设双方都使用最优策略，请判断先手的人会赢还是后手的人会赢。\n输入 输入数据包含多个测试用例，每个测试用例占一行，包含3个整数m,n,p（1\u0026lt;=m,n,p\u0026lt;=1000）。 m=n=p=0则表示输入结束。\n输出 如果先手的人能赢，请输出“Fibo”，否则请输出“Nacci”，每个实例的输出占一行。\n样例输入 11 1 1 21 4 1 30 0 0 样例输出 1Fibo 2Nacci 提示 无\n思路 预处理斐波那契数列，SG函数打表。\n代码 1using namespace std; 2int SG[1000], f[1000]; 3 4void fib(int n){ 5 f[1] = f[2] = 1; 6 for(int i=3; ; i++){ 7 f[i] = f[i-1] + f[i-2]; 8 if(f[i] \u0026gt; n) break; 9 } 10} 11 12void getSg(int n){ 13 for(int i=1; i\u0026lt;=n; i++){ 14 bool S[1000]={0}; 15 for(int j=1; f[j]\u0026lt;=i; j++){ 16 S[SG[i-f[j]]] = 1; 17 } 18 int mex=0; 19 while(S[mex]) mex++; 20 SG[i]=mex; 21 } 22} 23 24int main() 25{ 26 fib(1000); 27 getSg(1000); 28 29 int n, m, p; 30 while(~scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;n, \u0026amp;m, \u0026amp;p) \u0026amp;\u0026amp; n \u0026amp;\u0026amp; m \u0026amp;\u0026amp; p) 31 { 32 if(SG[n] ^ SG[m] ^ SG[p]){ 33 printf(\u0026#34;Fibo\\n\u0026#34;); 34 }else{ 35 printf(\u0026#34;Nacci\\n\u0026#34;); 36 } 37 } 38 return 0; 39} ","permalink":"https://blog.lordash.de/posts/solution/hdu-1848-fibonacci-again-and-again/","summary":"Fibonacci again and again(HDU-1848) 题面 任何一个大学生对菲波那契数列(Fibonacci numbers)应该都不会陌生，它是这样定义的： F(1)=1; F(2)=2; F(n)=F(n-1)+F(n-2)(n\u0026gt;=3); 所以，1,2,3,5,8,","title":"HDU-1848 Fibonacci again and again"},{"content":"Nim(POJ-2068) 题面 Let\u0026rsquo;s play a traditional game Nim. You and I are seated across a table and we have a hundred stones on the table (we know the number of stones exactly). We play in turn and at each turn, you or I can remove on to four stones from the heap. You play first and the one who removed the last stone loses. In this game, you have a winning strategy. To see this, you first remove four stones and leave 96 stones. No matter how I play, I will end up with leaving 92 - 95 stones. Then you will in turn leave 91 stones for me (verify this is always possible). This way, you can always leave 5k+1 stones for me and finally I get the last stone, sigh. If we initially had 101 stones, on the other hand, I have a winning strategy and you are doomed to lose.\nLet\u0026rsquo;s generalize the game a little bit. First, let\u0026rsquo;s make it a team game. Each team has n players and the 2n players are seated around the table, with each player having opponents at both sides. Turn around the table so the two teams play alternately. Second, let\u0026rsquo;s vary the maximum number of stones each player can take. That is, each player has his/her own maximum number of stones he/she can take at each turn (The minimum is always one). So the game is asymmetric and may even be unfair.\nIn general, when played between two teams of experts, the outcome of a game is completely determined by the initial number of stones and the maximum number of stones each player can take at each turn. In other words, either team has a winning strategy.\nYou are the head-coach of a team. In each game, the umpire shows both teams the initial number of stones and the maximum number of stones each player can take at each turn. Your team plays first. Your job is, given those numbers, to instantaneously judge whether your team has a winning strategy.\nIncidentally, there is a rumor that Captain Future and her officers of Hakodate-maru love this game, and they are killing their time playing it during their missions. You wonder where the stones are? Well, they do not have stones but do have plenty of balls in the fuel containers!\n输入 The input is a sequence of lines, followed by the last line containing a zero. Each line except the last is a sequence of integers and has the following format.\nn S M1 M2 . . . M2n\nwhere n is the number of players in a team, S the initial number of stones, and Mi the maximum number of stones ith player can take. 1st, 3rd, 5th, \u0026hellip; players are your team\u0026rsquo;s players and 2nd, 4th, 6th, \u0026hellip; the opponents. Numbers are separated by a single space character. You may assume 1 \u0026lt;= n \u0026lt;= 10, 1 \u0026lt;= Mi \u0026lt;= 16, and 1 \u0026lt;= S \u0026lt; 2^13.\n输出 The output should consist of lines each containing either a one, meaning your team has a winning strategy, or a zero otherwise.\n样例输入 11 101 4 4 21 100 4 4 33 97 8 7 6 5 4 3 40 样例输出 10 21 31 提示 无\n思路 类似DFS，SG函数暴力打表。\n代码 1using namespace std; 2int SG[20][10005], f[20]; 3 4int getSg(int x, int s, int m){ 5 if(s==0) return SG[x][s]=1; 6 if(SG[x][s]!=-1) return SG[x][s]; 7 8 for(int i=1; i\u0026lt;=f[x]; i++){ 9 if(s\u0026lt;i) break; 10 if(getSg((x+1)%m, s-i, m)==0) 11 return SG[x][s]=1; 12 } 13 14 return SG[x][s]=0; 15} 16 17int main() 18{ 19 int n; 20 while(~scanf(\u0026#34;%d\u0026#34;, \u0026amp;n) \u0026amp;\u0026amp; n) 21 { 22 memset(SG, -1, sizeof(SG)); 23 24 int s; scanf(\u0026#34;%d\u0026#34;, \u0026amp;s); 25 int m = 2*n; 26 for(int i=0; i\u0026lt;m; i++) 27 scanf(\u0026#34;%d\u0026#34;, \u0026amp;f[i]); 28 29 printf(\u0026#34;%d\\n\u0026#34;, getSg(0, s, m)); 30 } 31 return 0; 32} ","permalink":"https://blog.lordash.de/posts/solution/poj-2068-nim/","summary":"Nim(POJ-2068) 题面 Let\u0026rsquo;s play a traditional game Nim. You and I are seated across a table and we have a hundred stones on the table (we know the number of stones exactly). We play in turn and at each turn, you or I can remove on to four stones from the heap. You play first and the one who removed the last stone loses. In this game, you have","title":"POJ-2068 Nim"},{"content":"Cutting Game(POJ-2311) 题面 Urej loves to play various types of dull games. He usually asks other people to play with him. He says that playing those games can show his extraordinary wit. Recently Urej takes a great interest in a new game, and Erif Nezorf becomes the victim. To get away from suffering playing such a dull game, Erif Nezorf requests your help. The game uses a rectangular paper that consists of W*H grids. Two players cut the paper into two pieces of rectangular sections in turn. In each turn the player can cut either horizontally or vertically, keeping every grids unbroken. After N turns the paper will be broken into N+1 pieces, and in the later turn the players can choose any piece to cut. If one player cuts out a piece of paper with a single grid, he wins the game. If these two people are both quite clear, you should write a problem to tell whether the one who cut first can win or not.\n输入 The input contains multiple test cases. Each test case contains only two integers W and H (2 \u0026lt;= W, H \u0026lt;= 200) in one line, which are the width and height of the original paper.\n输出 For each test case, only one line should be printed. If the one who cut first can win the game, print \u0026ldquo;WIN\u0026rdquo;, otherwise, print \u0026ldquo;LOSE\u0026rdquo;.\n样例输入 12 2 23 2 34 2 样例输出 1LOSE 2LOSE 3WIN 提示 无\n思路 SG函数打表，剪到2就结束了。\n代码 1using namespace std; 2 3int SG[205][205]; 4 5int getSg(int n, int m){ 6 if(SG[n][m]!=-1) return SG[n][m]; 7 bool S[1005]={0}; 8 9 for(int i=2; i\u0026lt;=n-i; i++) 10 S[getSg(i, m) ^ getSg(n-i, m)] = 1; 11 for(int i=2; i\u0026lt;=m-i; i++) 12 S[getSg(n, i) ^ getSg(n, m-i)] = 1; 13 14 int mex = 0; 15 while(S[mex]) mex++; 16 return SG[n][m]=mex; 17} 18 19int main() 20{ 21 memset(SG, -1, sizeof(SG)); 22 23 int n, m; 24 while(~scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m) \u0026amp;\u0026amp; n \u0026amp;\u0026amp; m) 25 { 26 if(getSg(n, m)){ 27 printf(\u0026#34;WIN\\n\u0026#34;); 28 }else{ 29 printf(\u0026#34;LOSE\\n\u0026#34;); 30 } 31 } 32 return 0; 33} ","permalink":"https://blog.lordash.de/posts/solution/poj-2311-cutting-game/","summary":"Cutting Game(POJ-2311) 题面 Urej loves to play various types of dull games. He usually asks other people to play with him. He says that playing those games can show his extraordinary wit. Recently Urej takes a great interest in a new game, and Erif Nezorf becomes the victim. To get away from suffering playing such a dull game, Erif Nezorf requests your help. The game uses a rectangular paper","title":"POJ-2311 Cutting Game"},{"content":"A New Stone Game(POJ-1740) 题面 Alice and Bob decide to play a new stone game.At the beginning of the game they pick n(1\u0026lt;=n\u0026lt;=10) piles of stones in a line. Alice and Bob move the stones in turn. At each step of the game,the player choose a pile,remove at least one stones,then freely move stones from this pile to any other pile that still has stones. For example:n=4 and the piles have (3,1,4,2) stones.If the player chose the first pile and remove one.Then it can reach the follow states. 2 1 4 2 1 2 4 2（move one stone to Pile 2） 1 1 5 2（move one stone to Pile 3） 1 1 4 3（move one stone to Pile 4） 0 2 5 2（move one stone to Pile 2 and another one to Pile 3） 0 2 4 3（move one stone to Pile 2 and another one to Pile 4） 0 1 5 3（move one stone to Pile 3 and another one to Pile 4） 0 3 4 2（move two stones to Pile 2） 0 1 6 2（move two stones to Pile 3） 0 1 4 4（move two stones to Pile 4） Alice always moves first. Suppose that both Alice and Bob do their best in the game. You are to write a program to determine who will finally win the game.\n输入 The input contains several test cases. The first line of each test case contains an integer number n, denoting the number of piles. The following n integers describe the number of stones in each pile at the beginning of the game, you may assume the number of stones in each pile will not exceed 100. The last test case is followed by one zero.\n输出 For each test case, if Alice win the game,output 1,otherwise output 0.\n样例输入 13 22 1 3 32 41 1 50 样例输出 11 20 提示 无\n思路 当石子堆数为偶数，且石子数相等的堆也是偶数个时，后手可以模仿先手操作获得胜利，此时为必败态。其它情况时，先手都可以把最大堆的石子取走一个，并将剩下的石子分配给别的堆使得局面为必败态。\n代码 1using namespace std; 2const int mxn = 1e5 + 5; 3int a[mxn]; 4 5int main() 6{ 7 int n; 8 while(~scanf(\u0026#34;%d\u0026#34;, \u0026amp;n) \u0026amp;\u0026amp; n) 9 { 10 for(int i=0; i\u0026lt;n; i++) 11 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); 12 13 if(n\u0026amp;1){ 14 printf(\u0026#34;1\\n\u0026#34;); 15 continue; 16 } 17 sort(a, a+n); 18 19 int f = 1; 20 for(int i=0; i\u0026lt;n; i+=2){ 21 if(a[i+1] != a[i]){ 22 printf(\u0026#34;1\\n\u0026#34;); 23 f = 0; 24 break; 25 } 26 } 27 if(f) 28 printf(\u0026#34;0\\n\u0026#34;); 29 } 30 return 0; 31} ","permalink":"https://blog.lordash.de/posts/solution/poj-1740-a-new-stone-game/","summary":"A New Stone Game(POJ-1740) 题面 Alice and Bob decide to play a new stone game.At the beginning of the game they pick n(1\u0026lt;=n\u0026lt;=10) piles of stones in a line. Alice and Bob move the stones in turn. At each step of the game,the player choose a pile,remove at least one stones,then freely move stones from this pile to any other pile that still has stones. For example:n=4 and the","title":"POJ-1740 A New Stone Game"},{"content":"Georgia and Bob(POJ-1704) 题面 Georgia and Bob decide to play a self-invented game. They draw a row of grids on paper, number the grids from left to right by 1, 2, 3, \u0026hellip;, and place N chessmen on different grids, as shown in the following figure for example: Georgia and Bob move the chessmen in turn. Every time a player will choose a chessman, and move it to the left without going over any other chessmen or across the left edge. The player can freely choose number of steps the chessman moves, with the constraint that the chessman must be moved at least ONE step and one grid can at most contains ONE single chessman. The player who cannot make a move loses the game.\nGeorgia always plays first since \u0026ldquo;Lady first\u0026rdquo;. Suppose that Georgia and Bob both do their best in the game, i.e., if one of them knows a way to win the game, he or she will be able to carry it out.\nGiven the initial positions of the n chessmen, can you predict who will finally win the game?\n输入 The first line of the input contains a single integer T (1 \u0026lt;= T \u0026lt;= 20), the number of test cases. Then T cases follow. Each test case contains two lines. The first line consists of one integer N (1 \u0026lt;= N \u0026lt;= 1000), indicating the number of chessmen. The second line contains N different integers P1, P2 \u0026hellip; Pn (1 \u0026lt;= Pi \u0026lt;= 10000), which are the initial positions of the n chessmen.\n输出 For each test case, prints a single line, \u0026ldquo;Georgia will win\u0026rdquo;, if Georgia will win the game; \u0026ldquo;Bob will win\u0026rdquo;, if Bob will win the game; otherwise \u0026lsquo;Not sure\u0026rsquo;.\n样例输入 12 23 31 2 3 48 51 5 6 7 9 12 14 17 样例输出 1Bob will win 2Georgia will win 提示 无\n思路 当棋子两两一组位于同一格时，后手可以模仿先手操作获得胜利，此时为必败态。于是可以将棋子划分为两两一组（n为奇数时可以加上一个位置为0的棋子），每组内的距离当作石子数做一个Nim博弈。先手是最后移动完棋子使得局面为必败态的，和最后结果一样。\n代码 1using namespace std; 2const int mxn = 1e5 + 5; 3int a[mxn]; 4 5int main() 6{ 7 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 8 while(T--) 9 { 10 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 11 for(int i=0; i\u0026lt;n; i++) 12 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); 13 14 if(n\u0026amp;1){ 15 a[n++] = 0; 16 } 17 sort(a, a+n); 18 19 int nim=0; 20 for(int i=0; i\u0026lt;n; i+=2){ 21 nim ^= a[i+1]-a[i]-1; 22 } 23 if(nim){ 24 printf(\u0026#34;Georgia will win\\n\u0026#34;); 25 }else{ 26 printf(\u0026#34;Bob will win\\n\u0026#34;); 27 } 28 } 29 return 0; 30} ","permalink":"https://blog.lordash.de/posts/solution/poj-1704-georgia-and-bob/","summary":"Georgia and Bob(POJ-1704) 题面 Georgia and Bob decide to play a self-invented game. They draw a row of grids on paper, number the grids from left to right by 1, 2, 3, \u0026hellip;, and place N chessmen on different grids, as shown in the following figure for example: Georgia and Bob move the chessmen in turn. Every time a player will choose a chessman, and move it to the","title":"POJ-1704 Georgia and Bob"},{"content":"Brave Game(HDU-1846) 题面 十年前读大学的时候，中国每年都要从国外引进一些电影大片，其中有一部电影就叫《勇敢者的游戏》（英文名称：Zathura），一直到现在，我依然对于电影中的部分电脑特技印象深刻。 今天，大家选择上机考试，就是一种勇敢（brave）的选择；这个短学期，我们讲的是博弈（game）专题；所以，大家现在玩的也是“勇敢者的游戏”，这也是我命名这个题目的原因。 当然，除了“勇敢”，我还希望看到“诚信”，无论考试成绩如何，希望看到的都是一个真实的结果，我也相信大家一定能做到的~\n各位勇敢者要玩的第一个游戏是什么呢？很简单，它是这样定义的： 1、 本游戏是一个二人游戏; 2、 有一堆石子一共有n个； 3、 两人轮流进行; 4、 每走一步可以取走1…m个石子； 5、 最先取光石子的一方为胜；\n如果游戏的双方使用的都是最优策略，请输出哪个人能赢。\n输入 输入数据首先包含一个正整数C(C\u0026lt;=100)，表示有C组测试数据。 每组测试数据占一行，包含两个整数n和m（1\u0026lt;=n,m\u0026lt;=1000），n和m的含义见题目描述。\n输出 如果先走的人能赢，请输出“first”，否则请输出“second”，每个实例的输出占一行。\n样例输入 12 223 2 34 3 样例输出 1first 2second 提示 无\n思路 Bash博弈\n代码 1using namespace std; 2 3int main() 4{ 5 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 6 while(T--) 7 { 8 int n, m; 9 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 10 11 if(n%(m+1)==0){ 12 printf(\u0026#34;second\\n\u0026#34;); 13 }else{ 14 printf(\u0026#34;first\\n\u0026#34;); 15 } 16 } 17 return 0; 18} ","permalink":"https://blog.lordash.de/posts/solution/hdu-1846-brave-game/","summary":"Brave Game(HDU-1846) 题面 十年前读大学的时候，中国每年都要从国外引进一些电影大片，其中有一部电影就叫《勇敢者的游戏》（英文名称：Zathura），一直到现在，","title":"HDU-1846 Brave Game"},{"content":"Good Luck in CET-4 Everybody!(HDU-1847) 题面 大学英语四级考试就要来临了，你是不是在紧张的复习？也许紧张得连短学期的ACM都没工夫练习了，反正我知道的Kiki和Cici都是如此。当然，作为在考场浸润了十几载的当代大学生，Kiki和Cici更懂得考前的放松，所谓“张弛有道”就是这个意思。这不，Kiki和Cici在每天晚上休息之前都要玩一会儿扑克牌以放松神经。 “升级”？“双扣”？“红五”？还是“斗地主”？ 当然都不是！那多俗啊~ 作为计算机学院的学生，Kiki和Cici打牌的时候可没忘记专业，她们打牌的规则是这样的： 1、 总共n张牌; 2、 双方轮流抓牌； 3、 每人每次抓牌的个数只能是2的幂次（即：1，2，4，8，16…） 4、 抓完牌，胜负结果也出来了：最后抓完牌的人为胜者； 假设Kiki和Cici都是足够聪明（其实不用假设，哪有不聪明的学生~），并且每次都是Kiki先抓牌，请问谁能赢呢？ 当然，打牌无论谁赢都问题不大，重要的是马上到来的CET-4能有好的状态。\nGood luck in CET-4 everybody!\n输入 输入数据包含多个测试用例，每个测试用例占一行，包含一个整数n（1\u0026lt;=n\u0026lt;=1000）。\n输出 如果Kiki能赢的话，请输出“Kiki”，否则请输出“Cici”，每个实例的输出占一行。\n样例输入 11 23 样例输出 1Kiki 2Cici 提示 无\n思路 打表，n为3的倍数时，先手必败\n代码 1using namespace std; 2 3int main() 4{ 5 int n; 6 while(~scanf(\u0026#34;%d\u0026#34;, \u0026amp;n) \u0026amp;\u0026amp; n) 7 { 8 if(n%3==0){ 9 printf(\u0026#34;Cici\\n\u0026#34;); 10 }else{ 11 printf(\u0026#34;Kiki\\n\u0026#34;); 12 } 13 } 14 return 0; 15} ","permalink":"https://blog.lordash.de/posts/solution/hdu-1847-good-luck-in-cet-4-everybody/","summary":"Good Luck in CET-4 Everybody!(HDU-1847) 题面 大学英语四级考试就要来临了，你是不是在紧张的复习？也许紧张得连短学期的ACM都没工夫练习了，反正我知道的Kiki和Cici都是","title":"HDU-1847 Good Luck in CET-4 Everybody!"},{"content":"Rabbit and Grass(HDU-1849) 题面 大学时光是浪漫的，女生是浪漫的，圣诞更是浪漫的，但是Rabbit和Grass这两个大学女生在今年的圣诞节却表现得一点都不浪漫：不去逛商场，不去逛公园，不去和AC男约会，两个人竟然猫在寝食下棋…… 说是下棋，其实只是一个简单的小游戏而已，游戏的规则是这样的： 1、棋盘包含1*n个方格，方格从左到右分别编号为0，1，2，…，n-1； 2、m个棋子放在棋盘的方格上，方格可以为空，也可以放多于一个的棋子； 3、双方轮流走棋； 4、每一步可以选择任意一个棋子向左移动到任意的位置（可以多个棋子位于同一个方格），当然，任何棋子不能超出棋盘边界； 5、如果所有的棋子都位于最左边（即编号为0的位置），则游戏结束，并且规定最后走棋的一方为胜者。\n对于本题，你不需要考虑n的大小（我们可以假设在初始状态，棋子总是位于棋盘的适当位置）。下面的示意图即为一个1*15的棋盘，共有6个棋子，其中，编号8的位置有两个棋子。\n大家知道，虽然偶尔不够浪漫，但是Rabbit和Grass都是冰雪聪明的女生，如果每次都是Rabbit先走棋，请输出最后的结果。\n输入 输入数据包含多组测试用例，每个测试用例占二行，首先一行包含一个整数m（0\u0026lt;=m\u0026lt;=1000），表示本测试用例的棋子数目，紧跟着的一行包含m个整数Ki(i=1…m; 0\u0026lt;=Ki\u0026lt;=1000)，分别表示m个棋子初始的位置，m=0则结束输入。\n输出 如果Rabbit能赢的话，请输出“Rabbit Win!”，否则请输出“Grass Win!”，每个实例的输出占一行。\n样例输入 12 23 5 33 43 5 6 50 样例输出 1Rabbit Win! 2Grass Win! 提示 无\n思路 Nim博弈\n代码 1using namespace std; 2 3int main() 4{ 5 int n; 6 while(~scanf(\u0026#34;%d\u0026#34;, \u0026amp;n) \u0026amp;\u0026amp; n) 7 { 8 int nim = 0; 9 for(int i=0; i\u0026lt;n; i++){ 10 int x; scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 11 nim ^= x; 12 } 13 if(nim){ 14 printf(\u0026#34;Rabbit Win!\\n\u0026#34;); 15 }else{ 16 printf(\u0026#34;Grass Win!\\n\u0026#34;); 17 } 18 } 19 return 0; 20} ","permalink":"https://blog.lordash.de/posts/solution/hdu-1849-rabbit-and-grass/","summary":"Rabbit and Grass(HDU-1849) 题面 大学时光是浪漫的，女生是浪漫的，圣诞更是浪漫的，但是Rabbit和Grass这两个大学女生在今年的圣诞节却表现得一点都不浪漫：不去","title":"HDU-1849 Rabbit and Grass"},{"content":"Being a Good Boy in Spring Festival(HDU-1805) 题面 一年在外 父母时刻牵挂 春节回家 你能做几天好孩子吗 寒假里尝试做做下面的事情吧\n陪妈妈逛一次菜场 悄悄给爸爸买个小礼物 主动地 强烈地 要求洗一次碗 某一天早起 给爸妈用心地做回早餐\n如果愿意 你还可以和爸妈说 咱们玩个小游戏吧 ACM课上学的呢～\n下面是一个二人小游戏：桌子上有M堆扑克牌；每堆牌的数量分别为Ni(i=1…M)；两人轮流进行；每走一步可以任意选择一堆并取走其中的任意张牌；桌子上的扑克全部取光，则游戏结束；最后一次取牌的人为胜者。 现在我们不想研究到底先手为胜还是为负，我只想问大家： ——“先手的人如果想赢，第一步有几种选择呢？”\n输入 输入数据包含多个测试用例，每个测试用例占2行，首先一行包含一个整数M(1\u0026lt;M\u0026lt;=100)，表示扑克牌的堆数，紧接着一行包含M个整数Ni(1\u0026lt;=Ni\u0026lt;=1000000，i=1…M)，分别表示M堆扑克的数量。M为0则表示输入数据的结束。\n输出 如果先手的人能赢，请输出他第一步可行的方案数，否则请输出0，每个实例的输出占一行。\n样例输入 13 25 7 9 30 样例输出 11 提示 无\n思路 Nim博弈\n代码 1using namespace std; 2const int mxn = 1e6 + 5; 3int a[mxn]; 4 5int main() 6{ 7 int n; 8 while(~scanf(\u0026#34;%d\u0026#34;, \u0026amp;n) \u0026amp;\u0026amp; n) 9 { 10 int nim = 0; 11 for(int i=0; i\u0026lt;n; i++){ 12 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); 13 nim ^= a[i]; 14 } 15 int ans = 0; 16 if(nim){ 17 for(int i=0; i\u0026lt;n; i++) 18 if(a[i] \u0026gt; (a[i]^nim)) 19 ans++; 20 } 21 printf(\u0026#34;%d\\n\u0026#34;, ans); 22 } 23 return 0; 24} ","permalink":"https://blog.lordash.de/posts/solution/hdu-1805-being-a-good-boy-in-spring-festival/","summary":"Being a Good Boy in Spring Festival(HDU-1805) 题面 一年在外 父母时刻牵挂 春节回家 你能做几天好孩子吗 寒假里尝试做做下面的事情吧 陪妈妈逛一次菜场 悄悄给爸爸买个小礼物 主动地 强烈地 要","title":"HDU-1805 Being a Good Boy in Spring Festival"},{"content":"kiki\u0026rsquo;s game(HDU-2147) 题面 Recently kiki has nothing to do. While she is bored, an idea appears in his mind, she just playes the checkerboard game.The size of the chesserboard is n*m.First of all, a coin is placed in the top right corner(1,m). Each time one people can move the coin into the left, the underneath or the left-underneath blank space.The person who can\u0026rsquo;t make a move will lose the game. kiki plays it with ZZ.The game always starts with kiki. If both play perfectly, who will win the game?\n输入 Input contains multiple test cases. Each line contains two integer n, m (0\u0026lt;n,m\u0026lt;=2000). The input is terminated when n=0 and m=0.\n输出 If kiki wins the game printf \u0026ldquo;Wonderful!\u0026rdquo;, else \u0026ldquo;What a pity!\u0026rdquo;.\n样例输入 15 3 25 4 36 6 40 0 样例输出 1What a pity! 2Wonderful! 3Wonderful! 提示 无\n思路 如果行列都为奇数时，先手必败\n代码 1using namespace std; 2 3int main() 4{ 5 int n, m; 6 while(~scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m) \u0026amp;\u0026amp; n \u0026amp;\u0026amp; m) 7 { 8 if((n\u0026amp;1) \u0026amp;\u0026amp; (m\u0026amp;1)){ 9 printf(\u0026#34;What a pity!\\n\u0026#34;); 10 }else{ 11 printf(\u0026#34;Wonderful!\\n\u0026#34;); 12 } 13 } 14 return 0; 15} ","permalink":"https://blog.lordash.de/posts/solution/hdu-2147-kikis-game/","summary":"kiki\u0026rsquo;s game(HDU-2147) 题面 Recently kiki has nothing to do. While she is bored, an idea appears in his mind, she just playes the checkerboard game.The size of the chesserboard is n*m.First of all, a coin is placed in the top right corner(1,m). Each time one people can move the coin into the left, the underneath or the left-underneath blank space.The person who can\u0026rsquo;t make a move will lose the","title":"HDU-2147 kiki's game"},{"content":"Public Sale(HDU-2149) 题面 虽然不想，但是现实总归是现实，Lele始终没有逃过退学的命运，因为他没有拿到奖学金。现在等待他的，就是像FarmJohn一样的农田生涯。\n要种田得有田才行，Lele听说街上正在举行一场别开生面的拍卖会，拍卖的物品正好就是一块20亩的田地。于是，Lele带上他的全部积蓄，冲往拍卖会。\n后来发现，整个拍卖会只有Lele和他的死对头Yueyue。\n通过打听，Lele知道这场拍卖的规则是这样的：刚开始底价为0，两个人轮流开始加价，不过每次加价的幅度要在1～N之间，当价格大于或等于田地的成本价 M 时，主办方就把这块田地卖给这次叫价的人。\nLele和Yueyue虽然考试不行，但是对拍卖却十分精通，而且他们两个人都十分想得到这块田地。所以他们每次都是选对自己最有利的方式进行加价。\n由于Lele字典序比Yueyue靠前，所以每次都是由Lele先开始加价，请问，第一次加价的时候， Lele要出多少才能保证自己买得到这块地呢？\n输入 本题目包含多组测试，请处理到文件结束(EOF)。每组测试占一行。 每组测试包含两个整数M和N(含义见题目描述，0\u0026lt;N，M\u0026lt;1100)\n输出 对于每组数据，在一行里按递增的顺序输出Lele第一次可以加的价。两个数据之间用空格隔开。 如果Lele在第一次无论如何出价都无法买到这块土地，就输出\u0026quot;none\u0026quot;。\n样例输入 14 2 23 2 33 5 样例输出 11 2none 33 4 5 提示 无\n思路 Bash博弈\n代码 1using namespace std; 2 3int main() 4{ 5 int n, m; 6 while(~scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;m, \u0026amp;n)) 7 { 8 if(m%(n+1)==0) { 9 printf(\u0026#34;none\\n\u0026#34;); 10 continue; 11 } 12 printf(\u0026#34;%d\u0026#34;, m%(n+1)); 13 if(m\u0026lt;n) 14 for(int i=m+1; i\u0026lt;=n; i++){ 15 printf(\u0026#34; %d\u0026#34;, i); 16 } 17 printf(\u0026#34;\\n\u0026#34;); 18 } 19 return 0; 20} ","permalink":"https://blog.lordash.de/posts/solution/hdu-2149-public-sale/","summary":"Public Sale(HDU-2149) 题面 虽然不想，但是现实总归是现实，Lele始终没有逃过退学的命运，因为他没有拿到奖学金。现在等待他的，就是像FarmJohn一样的农田生","title":"HDU-2149 Public Sale"},{"content":"A multiplication game(POJ-2505) 题面 Stan and Ollie play the game of multiplication by multiplying an integer p by one of the numbers 2 to 9. Stan always starts with p = 1, does his multiplication, then Ollie multiplies the number, then Stan and so on. Before a game starts, they draw an integer 1 \u0026lt; n \u0026lt; 4294967295 and the winner is who first reaches p \u0026gt;= n.\n输入 Each line of input contains one integer number n.\n输出 For each line of input output one line either Stan wins. or Ollie wins. assuming that both of them play perfectly.\n样例输入 1162 217 334012226 样例输出 1Stan wins. 2Ollie wins. 3Stan wins. 提示 无\n思路 找出先手必败区间(9, 18]，(162, 324]，$ \\ldots $\n规律： 9 = 9 18 = 2 * 9 162 = 9 * 2 * 9 324 = 2 * 9 * 2 * 9 $ \\ldots $\n代码 1using namespace std; 2typedef long long LL; 3 4int main() 5{ 6 LL n; 7 while(~scanf(\u0026#34;%lld\u0026#34;, \u0026amp;n) \u0026amp;\u0026amp; n) 8 { 9 while(1){ 10 if(n\u0026lt;=9){ 11 printf(\u0026#34;Stan wins.\\n\u0026#34;); 12 break; 13 }else if(n\u0026lt;=18){ 14 printf(\u0026#34;Ollie wins.\\n\u0026#34;); 15 break; 16 } 17 n = (LL)ceil(n/18.0); 18 } 19 } 20 return 0; 21} ","permalink":"https://blog.lordash.de/posts/solution/poj-2505-a-multiplication-game/","summary":"A multiplication game(POJ-2505) 题面 Stan and Ollie play the game of multiplication by multiplying an integer p by one of the numbers 2 to 9. Stan always starts with p = 1, does his multiplication, then Ollie multiplies the number, then Stan and so on. Before a game starts, they draw an integer 1 \u0026lt; n \u0026lt; 4294967295 and the winner is who first reaches p \u0026gt;= n. 输","title":"POJ-2505 A multiplication game"},{"content":"A Funny Game(POJ-2484) 题面 Alice and Bob decide to play a funny game. At the beginning of the game they pick n(1 \u0026lt;= n \u0026lt;= 106) coins in a circle, as Figure 1 shows. A move consists in removing one or two adjacent coins, leaving all other coins untouched. At least one coin must be removed. Players alternate moves with Alice starting. The player that removes the last coin wins. (The last player to move wins. If you can\u0026rsquo;t move, you lose.) Note: For n \u0026gt; 3, we use c1, c2, \u0026hellip;, cn to denote the coins clockwise and if Alice remove c2, then c1 and c3 are NOT adjacent! (Because there is an empty place between c1 and c3.)\nSuppose that both Alice and Bob do their best in the game. You are to write a program to determine who will finally win the game.\n输入 There are several test cases. Each test case has only one line, which contains a positive integer n (1 \u0026lt;= n \u0026lt;= 10^6). There are no blank lines between cases. A line with a single 0 terminates the input.\n输出 For each test case, if Alice win the game,output \u0026ldquo;Alice\u0026rdquo;, otherwise output \u0026ldquo;Bob\u0026rdquo;.\n样例输入 11 22 33 40 样例输出 1Alice 2Alice 3Bob 提示 无\n思路 当n \u0026lt; 3时，先手可以直接取完；n = 3时，无论先手如何取，后手都能取走剩下的；n \u0026gt; 3时，无论先手如何取，后手都能取走对应的，使得局面变为相等的两部分，随之后手模仿先手操作即可获得胜利。\n代码 1using namespace std; 2 3int main() 4{ 5 int n; 6 while(~scanf(\u0026#34;%d\u0026#34;, \u0026amp;n) \u0026amp;\u0026amp; n) 7 { 8 if(n\u0026lt;3){ 9 printf(\u0026#34;Alice\\n\u0026#34;); 10 }else{ 11 printf(\u0026#34;Bob\\n\u0026#34;); 12 } 13 } 14 return 0; 15} ","permalink":"https://blog.lordash.de/posts/solution/poj-2484-a-funny-game/","summary":"A Funny Game(POJ-2484) 题面 Alice and Bob decide to play a funny game. At the beginning of the game they pick n(1 \u0026lt;= n \u0026lt;= 106) coins in a circle, as Figure 1 shows. A move consists in removing one or two adjacent coins, leaving all other coins untouched. At least one coin must be removed. Players alternate moves with Alice starting. The player that removes the last coin","title":"POJ-2484 A Funny Game"},{"content":"Matches Game(POJ-2234) 题面 Here is a simple game. In this game, there are several piles of matches and two players. The two player play in turn. In each turn, one can choose a pile and take away arbitrary number of matches from the pile (Of course the number of matches, which is taken away, cannot be zero and cannot be larger than the number of matches in the chosen pile). If after a player’s turn, there is no match left, the player is the winner. Suppose that the two players are all very clear. Your job is to tell whether the player who plays first can win the game or not.\n输入 The input consists of several lines, and in each line there is a test case. At the beginning of a line, there is an integer M (1 \u0026lt;= M \u0026lt;=20), which is the number of piles. Then comes M positive integers, which are not larger than 10000000. These M integers represent the number of matches in each pile.\n输出 For each test case, output \u0026ldquo;Yes\u0026rdquo; in a single line, if the player who play first will win, otherwise output \u0026ldquo;No\u0026rdquo;.\n样例输入 12 45 45 23 3 6 9 样例输出 1No 2Yes 提示 无\n思路 Nim博弈\n代码 1using namespace std; 2 3int main() 4{ 5 int n; 6 while(~scanf(\u0026#34;%d\u0026#34;, \u0026amp;n)) 7 { 8 int nim = 0; 9 for(int i=0; i\u0026lt;n; i++){ 10 int x; scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 11 nim ^= x; 12 } 13 if(nim == 0){ 14 printf(\u0026#34;No\\n\u0026#34;); 15 }else{ 16 printf(\u0026#34;Yes\\n\u0026#34;); 17 } 18 } 19 return 0; 20} ","permalink":"https://blog.lordash.de/posts/solution/poj-2234-matches-game/","summary":"Matches Game(POJ-2234) 题面 Here is a simple game. In this game, there are several piles of matches and two players. The two player play in turn. In each turn, one can choose a pile and take away arbitrary number of matches from the pile (Of course the number of matches, which is taken away, cannot be zero and cannot be larger than the number of matches in the chosen","title":"POJ-2234 Matches Game"},{"content":"取石子游戏(HDU-1527) 题面 有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意的一堆中取走任意多的石子；二是可以在两堆中同时取走相同数量的石子。最后把石子全部取完者为胜者。现在给出初始的两堆石子的数目，如果轮到你先取，假设双方都采取最好的策略，问最后你是胜者还是败者。\n输入 输入包含若干行，表示若干种石子的初始情况，其中每一行包含两个非负整数a和b，表示两堆石子的数目，a和b都不大于1,000,000,000。\n输出 输出对应也有若干行，每行包含一个数字1或0，如果最后你是胜者，则为1，反之，则为0。\n样例输入 12 1 28 4 34 7 样例输出 10 21 30 提示 无\n思路 Wythoff博弈\n代码 1using namespace std; 2 3int main() 4{ 5 int a, b; 6 while(~scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;a, \u0026amp;b)) 7 { 8 if(a \u0026gt; b) swap(a, b); 9 if(a == (int)((sqrt(5)+1)/2 * (b-a))){ 10 printf(\u0026#34;0\\n\u0026#34;); 11 }else{ 12 printf(\u0026#34;1\\n\u0026#34;); 13 } 14 } 15 return 0; 16} ","permalink":"https://blog.lordash.de/posts/solution/hdu-1527-%E5%8F%96%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8F/","summary":"取石子游戏(HDU-1527) 题面 有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意","title":"HDU-1527 取石子游戏"},{"content":"取石子游戏(POJ-1067) 题面 有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意的一堆中取走任意多的石子；二是可以在两堆中同时取走相同数量的石子。最后把石子全部取完者为胜者。现在给出初始的两堆石子的数目，如果轮到你先取，假设双方都采取最好的策略，问最后你是胜者还是败者。\n输入 输入包含若干行，表示若干种石子的初始情况，其中每一行包含两个非负整数a和b，表示两堆石子的数目，a和b都不大于1,000,000,000。\n输出 输出对应也有若干行，每行包含一个数字1或0，如果最后你是胜者，则为1，反之，则为0。\n样例输入 12 1 28 4 34 7 样例输出 10 21 30 提示 无\n思路 Wythoff博弈\n代码 1using namespace std; 2 3int main() 4{ 5 int a, b; 6 while(~scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;a, \u0026amp;b)) 7 { 8 if(a \u0026gt; b) swap(a, b); 9 if(a == (int)((sqrt(5)+1)/2 * (b-a))){ 10 printf(\u0026#34;0\\n\u0026#34;); 11 }else{ 12 printf(\u0026#34;1\\n\u0026#34;); 13 } 14 } 15 return 0; 16} ","permalink":"https://blog.lordash.de/posts/solution/poj-1067-%E5%8F%96%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8F/","summary":"取石子游戏(POJ-1067) 题面 有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意","title":"POJ-1067 取石子游戏"},{"content":"Fibonacci博弈 基本的斐波那契博弈（Fibonacci Game）描述如下：\n有一堆数量多于一的物品，两人轮流取走物品，第一次至少取一个，但不能取完，从第二次开始每个人最少取一个，最多取对手上次取的两倍。\n博弈过程如下：\n当n为斐波那契数时，令F[k]为斐波那契数第k项，那么当n=2=F[3]，n=3=F[4]显然先手必败，假设n=F[i]，i\u0026lt;k时命题都成立，讨论n=F[k]时，此时n=F[k]=F[k-2]+F[k-1]，由于F[k-1]\u0026lt;2$ \\times $F[k-2]，所以先手必不能直接取走大于等于F[k-2]的物品，同理先手取走大于等于$ \\frac{F[k-2]}{3} $的物品时，后手可以直接取完F[k-2]，且因 $F[k-1] \\gt 2 \\times \\frac{2 \\times F[k-2]}{3} $ 不会对F[k-1]造成影响，所以每个F[k]可以分解为F[k-2]，F[k-1]这样单独且互不影响的斐波那契局面（可以继续分解）此时先手必败。 得出当n为斐波那契数时先手必败。\n当n为非斐波那契数时，由齐肯多夫定理，可以将n分解为若干不相邻的斐波那契数之和，例如85=55+21+8+1。此时$ n = F[x_{1}] + F[x_{2}] + \\ldots + F[x_{k}], (x_{1} \u0026gt; x_{2} \u0026gt; \\ldots \u0026gt; x_{k})$，由于$ F[x_{k-1}] \u0026gt; 2 \\times F[x_{k}] $，取完$ F[x_{k}] $不会对$ F[x_{k-1}] $造成影响，即可以分解为若干个单独且互不影响的斐波那契数局面，但先手可以直接取走$ F[x_{k}] $，后手对于每个分解的若干单独且互不影响的斐波那契局面都是必败的。得出当n为非斐波那契数时先手必败。\nZeckendorf定理 Zeckendorf定理：\n任何正整数都可以表示成若干个不连续的斐波那契数（不包括第一个斐波那契数）之和。\n简单证明如下：\n令F[k]为斐波那契数第k项，那么当n=1=F[1]=F[2]，n=2=F[3]，n=3=F[4]命题成立。假设i\u0026lt;n时命题都成立，讨论i=n时，当n为斐波那契数时，命题显然成立；当n为非斐波那契数时，令k为最大的整数使得F[k]\u0026lt;n\u0026lt;F[k+1]，设m=n-F[k]\u0026lt;(F[k+1]-F[k]=F[k-1])，可得m\u0026lt;F[k-1]\u0026lt;n，由于$ m = F[x_{1}] + F[x_{2}] + \\ldots + F[x_{k}], (F[x_{k}]最大) $，因为m\u0026lt;F[k-1]，所以$ x_{k} \u0026lt; k - 1$，所以$ n = F[x_{1}] + F[x_{2}] + \\ldots + F[x_{k}] + F[k] $，仍然可以分解为若干个斐波那契数之和，且不是连续的$ (x_{k} \u0026lt; k - 1) $。 ","permalink":"https://blog.lordash.de/posts/algorithm/fibonacci%E5%8D%9A%E5%BC%88/","summary":"Fibonacci博弈 基本的斐波那契博弈（Fibonacci Game）描述如下： 有一堆数量多于一的物品，两人轮流取走物品，第一次至少取一个，","title":"Fibonacci博弈"},{"content":"Wythoff博弈 基本的威佐夫博弈（Wythoff Game）描述如下：\n有两堆各若干个物品，两个人轮流从某一堆或同时从两堆中取同样多的物品，每次至少取一个，多者不限，最后取光者得胜。\n我们使用(a, b)来描述一个局面，可以发现(a, b)和(b, a)其实是一样的，所以在此定义a $ \\le $ b。显然(0, 0)是第一个必败态（先手必败局面、奇异局面、P-position），使用P/N-状态或者SG函数可以更容易地分析局面，简单讲就是：“移动可以导致必败态的，此时先手必胜；移动只能导致必胜态的，此时先手必败”。打表可得必败态为(0, 0)、(1, 2)、(3, 5)、(4, 7)、(6, 10)、(8, 13)、(9, 15)、 $ \\cdots $ 仔细观察，大胆假设，自行求证，对于 $ (a_n, b_n) $ 有以下性质：\n$ a_n $ 是前面必败态中未出现过的最小自然数\n$ b_n = a_n + n $\n博弈过程如下：\n由 $ a_n $ 是未在前面出现过的最小自然数，所以 $ a_n \u0026gt; a_{n-1} $ ，而 $ (b_n = a_n + n) \u0026gt; (a_{n-1} + n) \u0026gt; (a_{n-1} + n - 1 = b_{n-1}) \u0026gt; a_{n-1} $ ，得出任何自然数都包含于有且仅有一个必败态中。 当局面处于必败态时，如果只改变其中一个分量，那么与另一个分量就不在同一个必败态中。如果使两个分量同时减少，那么由于a和b的差值不变，改变后也不会是其它的必败态。得出必败态只能转移到必胜态。 当局面处于必胜态(x, y)时，如果与x出现在必败态时的另一个分量 $ a_x $ 或者 $ b_x $ 小于y，那么将y取成 $ a_x $ 或者 $ b_x $ ，局面变为必败态 $ (a_x, x) $ 或者 $ (x, b_x) $ ；否则在两堆同时取走 $ x-a_{y-x} $ ，局面变为必败态 $ (a_{y-x}, b_{y-x}) $。得出必胜态可以转移到必败态。 SG函数打表找出规律，就可以开始推导了，实际上 $ a_n $ 和 $ b_n $ 是Betty序列并满足Betty定理，令 $ A = a_{n}, B = a_{n}+n $ 解方程 $ \\frac{1}{a} + \\frac{1}{a+1} = 1 $ 得 $ a = \\frac{\\sqrt{5} + 1}{2} $ 。即对于Wythoff博弈局面(a, b)，当 $ a == (int)((b-a) \\times \\frac{\\sqrt{5} + 1}{2}) $ 时先手必败，反之先手必胜。\nBetty定理 Betty定理：\n如果两个无理数满足 $ \\frac{1}{a} + \\frac{1}{b} = 1 $，那么对于两个集合 $ A = {[na]}, B = {[na]}, n \\in Z $ ，可得出 $ A \\cap B = \\varnothing, A \\cup B = N^{+} $ 。\n简单证明如下：\n$ A \\cap B = \\varnothing $\n由 $ \\frac{1}{a} + \\frac{1}{b} = 1 $，且a，b为正，可以得到a，b均大于1，所以[na]的跨度大于1，向下取整不会重复。取整数k使得 $ k \\in A, k \\in B $，那么 $ k \u0026lt; ma \u0026lt; k+1, k \u0026lt; nb \u0026lt; k+1 $ ，化简一下 $ \\frac{k}{m} \u0026lt; a \u0026lt; \\frac{k+1}{m} \\Longrightarrow \\frac{m}{k+1} \u0026lt; \\frac{1}{a} \u0026lt; \\frac{m}{k} $ ，同理 $ \\frac{n}{k+1} \u0026lt; \\frac{1}{b} \u0026lt; \\frac{n}{k} $ ，两式相加 $ \\frac{m+n}{k+1} \u0026lt; \\frac{1}{a} + \\frac{1}{b} \u0026lt; \\frac{m+n}{k} \\Longrightarrow \\frac{m+n}{k+1} \u0026lt; 1 \u0026lt; \\frac{m+n}{k} \\Longrightarrow k \u0026lt; m + n \u0026lt; k + 1 $ ，与m，n为整数矛盾。\n$ A \\cup B = N^{+} $\n取整数k满足 $ k \\in C_{N^{+}}A \\cup B $ ，此时必有整数m，n满足 $ [ma] \u0026lt; k \u0026lt; [(m+1)a], [nb] \u0026lt; k \u0026lt; [(n+1)b] $ ，化简一下 $ ma \u0026lt; k \\le [(m+1)a] - 1 $ ，由于a为无理数，所以有 $ ma \u0026lt; k \u0026lt; (m+1)a - 1 \\Longrightarrow \\frac{m}{k} \u0026lt; \\frac{1}{a} \u0026lt; \\frac{m+1}{k+1} $ ，同理 $ \\frac{n}{k} \u0026lt; \\frac{1}{b} \u0026lt; \\frac{m+1}{k+1} $ ，两式相加 $ \\frac{m+n}{k} \u0026lt; \\frac{1}{a} + \\frac{1}{b} \u0026lt; \\frac{m+n+2}{k+1} \\Longrightarrow \\frac{m+n}{k} \u0026lt; 1 \u0026lt; \\frac{m+n+2}{k+1} \\Longrightarrow m + n \u0026lt; k \u0026lt; k + 1 \u0026lt; m + n + 2 $ ，与m+n和m+n+2间只有一个整数矛盾。\n","permalink":"https://blog.lordash.de/posts/algorithm/wythoff%E5%8D%9A%E5%BC%88/","summary":"Wythoff博弈 基本的威佐夫博弈（Wythoff Game）描述如下： 有两堆各若干个物品，两个人轮流从某一堆或同时从两堆中取同样多的物品，每","title":"Wythoff博弈"},{"content":"Bash博奕 基本的巴什博弈（Bash Game）描述如下：\n有一堆n个物品，两人轮流取走物品，每次至少取一个，最多取m个，最后取光者获胜。\n博弈过程如下：\n如果n\u0026lt;m，那么先手可以一次取完。先手必胜。\n如果n=m+1，那么由于一次最多取走m个，无论先手取走多少个，后手都能一次性取完。此时先手必败。 可以假设，游戏局面与m+1有关。\n如果n%(m+1)=0，那么无论先手取走多少个，假设此时为i个（操作合法时1 $ \\le $ i $ \\le $ m），后手都能取走m+1-i个，使得局面重新回到n%(m+1)=0。直至最后局面变成n=m+1。此时先手必败。\n如果n%(m+1)=k $ \\neq $ 0，显然1 $ \\le $ k $ \\le $ m，那么先手取走k个，则将n%(m+1)=0的必输态（先手必败局面、奇异局面、P-position）留给对面了。此时先手必胜。\n修改一下获胜条件：\n有一堆n个物品，两人轮流取走物品，每次至少取一个，最多取m个，最后取光者失败。\n可以转化为基本的巴什博弈，只不过此时需要给对手留下最后1个，考虑的 $ n\u0026rsquo; $ 实际为n-1，即(n-1)%(m+1) ? 先手胜 : 后手胜\n另一类的巴什博弈：\n有一堆n个物品，两人轮流取走物品，每次至少取p个，最多取q个，剩余不足p个时一次取完，最后取光者失败。\n可得 $ n = (p + q) \\times r + s $ 时，(s!=0 \u0026amp;\u0026amp; s\u0026lt;=p) ? 后手胜 : 先手胜\n","permalink":"https://blog.lordash.de/posts/algorithm/bash%E5%8D%9A%E5%BC%88/","summary":"Bash博奕 基本的巴什博弈（Bash Game）描述如下： 有一堆n个物品，两人轮流取走物品，每次至少取一个，最多取m个，最后取光者获胜。 博弈过","title":"Bash博弈"},{"content":"Nim博弈 基本的尼姆博弈（Nim Game）描述如下：\n有若干堆各若干个物品，两个人轮流从某一堆取任意多的物品，每次至少取一个，多者不限，最后取光者得胜。\n博弈过程如下：\n对于局面 $ a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = 0 $，无论先手怎么取，必将导致异或和改变为 $ a\u0026rsquo;_1 \\oplus a\u0026rsquo;_2 \\oplus \\ldots \\oplus a\u0026rsquo;_n = k \\neq 0 $ ，而此时必有 $ a_i $ 使得 $ a_i $ 二进制下第k位为1，后手只要将 $ a_i $ 取成 $ a_i \\oplus k $ ，使得局面重新回到异或和为0，直至最后局面变成 $ (0, 0, \\ldots, 0) $ ，此时异或和为0。先手必输。 对于局面 $ a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n \\neq 0 $ ，反之，先手必胜。 详细证明见下方Bouton定理。\nBouton定理 Bouton定理：\n假设Nim博弈的石子有 $ n $ 堆，第 $ i $ 堆的石子个数我们用 $ a_i $ 表示，则我们可以使用 $ (a_1, a_2, \\ldots, a_n) $ 表示一个Nim博弈的局面。对于 $ (a_1, a_2, \\ldots, a_n) $ 的Nim博弈局面，当且仅当 $ a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n \\neq 0 $ 时（其中 $ \\oplus $ 是按位异或运算），先手必胜。\n简单证明如下：\n对于 $ a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n \\neq 0 $ 的Nim博弈局面 $ (a_1, a_2, \\ldots, a_n) $ ，我们设 $ a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = k $ 。则必存在 $ a_i $ ，其二进制表示在 $ k $ 的最高位上为1（异或运算的性质），且有 $ a_i \\oplus k \u0026lt; a_i $ 。则对于当前局面下的先手可以通过合法的移动将第堆石子取到只剩 $ a_i \\oplus k $ 个，那么此时游戏局面变为 $ (a_1, a_2, \\ldots, a_{i-1},a_i \\oplus k, a_{i+1}, \\ldots a_n ) $ 。 而此时 $ a_1\\oplus a_2 \\oplus \\ldots \\oplus a_{i-1} \\oplus (a_i \\oplus k) \\oplus a_{i+1} \\oplus \\dots \\oplus a_n = k \\oplus k = 0 $。得出异或和不为0的局面一定存在合法移动可以变为异或和为0的局面。 对于 $ a_1 \\oplus a_2 \\oplus \\ldots \\oplus a_n = 0 $ 的Nim博弈局面 $ (a_1, a_2, \\ldots, a_n) $ ，假设我们将第 $ i $ 堆石子由 $ a_i $ 个取到 $ a\u0026rsquo;_i $ 个，则有 $ a_i \\neq a\u0026rsquo;i $ ，则必有 $ a_1\\oplus a_2 \\oplus \\ldots \\oplus a{i-1} \\oplus a\u0026rsquo;i \\oplus a{i+1} \\oplus \\dots \\oplus a_n \\neq 0 $ （可用反证法证明）。即异或和为0的局面无论怎样合法地进行移动，都将转变为异或和不为0的局面。 对于局面 $ (0, 0, \\ldots, 0) $ ，其异或和为0，对于先手而言是必输的局面。 对于任何异或和不为0的局面，先手只需要按照策略将其转变为异或和为0的局面，就能保证后手永远只能拿到异或和为0的局面。又因为每一次合法的移动都将导致石子个数减少，故总的移动步数是有限的，最终后手将拿到的局面而无石子可拿，故后手必输，先手必胜。反过来即可证，对于任何异或和为0的局面，先手必输。 ","permalink":"https://blog.lordash.de/posts/algorithm/nim%E5%8D%9A%E5%BC%88/","summary":"Nim博弈 基本的尼姆博弈（Nim Game）描述如下： 有若干堆各若干个物品，两个人轮流从某一堆取任意多的物品，每次至少取一个，多者不限，最后取","title":"Nim博弈"},{"content":"公平组合游戏 公平组合游戏（Impartial Combinatorial Games）简称ICG，大致定义如下：\n游戏有2名选手 对于游戏任何一种可能的局面（position），合法的操作集合只取决于这个局面本身 选手轮流操作（move），且只能在合法操作集合中选择 在游戏出于某状态，当前选手合法操作集合为空时判负，游戏结束 {% fold 查看解析 %}\n一个公平游戏可以抽象地用一个有向无环图来表示，这个图中每个点都对应一个状态，每条有向边代表从一个状态到另一个状态的合法操作。\n我们可以想象一个硬币最初放在某个点上，然后两个玩家轮流将其从当前的点移动到它的后继点。当硬币移动到汇点（没有出度的点）时游戏结束，无法操作的玩家判负。\n{% endfold %}\n必胜态和必败态 必败态（P-position）：上一个选手（previous player先前刚操作完的选手）处于必胜局面，即此时先手必败 必胜态（N-position）：下一个选手（next player当前即将操作的选手）处于必胜局面，即此时先手必胜 {% fold 查看解析 %}\n更加严谨的定义：1.无法进行任何移动的局面终结点（也就是terminal position）是P-position；2.可以移动到P-position的局面是N-position；3.所有移动都导致N-position的局面是P-position。\nP-position和N-position的局面信息提供了游戏的必胜策略。如果轮到我们操作且游戏处在一个N-position，我们应该移动到一个P-position。接着我们的对手就会被迫进入N-position，依次类推。我们最终会移入一个汇点并获得胜利。\n{% endfold %}\nSG函数 先定义mex(minimal excludant)运算，这是施加于一个集合的运算，表示最小的不属于这个集合的非负整数。例如mex{2,3,5}=0、mex{0,1,2,4}=3、mex{}=0。 对于任意状态x，定义SG(x)=mex(S)，其中S是x后继状态的SG函数值的集合。如x有三个后继状态分别为a、b、c，那么SG(x)=mex{SG(a), SG(b), SG(c)}。 这样，集合S的终态必然是空集，所以当且仅当x为必败点P时，SG函数的终态为SG(x)=0。\n{% fold 查看解析 %}\n通过SG函数，每个ICG都可以转换成Nim博弈。SG函数的定义域为ICG的决策树上的所有节点，此时具体定义为：SG(x)=mex{SG(y)|y是x的节点}。对于ICG的决策树上的节点u，我们可以把它想象成一个只有一堆石子，个数为SG(u)的Nim博弈。\n对于节点u的子节点v：\n根据SG函数的定义，必有SG(u) $ \\neq $ SG(v) 。 若SG(u) $ \u0026lt; $ SG(v)，则根据SG函数的定义，v节点必定存在子节点w使得SG(w)=SG(u)。倘若先手尝试使得局面的SG函数值变大，由局面u移动到局面v，则后手必定可以将局面由v转移到w，恢复SG函数值。故先手无有效的手段让局面的SG函数值增大，我们只需要考虑SG(u) $ \u0026gt; $ SG(v)的情况。 对于全体SG(u)\u0026gt;SG(v)的子节点v，其SG函数值将完整覆盖区间[0, SG(u)-1]上的所有整数。我们从局面u移动到局面v，其实相当于在一堆个数为SG(u)的石子上取走若干石子，使剩下一堆个数为SG(v)的石子。 当ICG中存在n个互相不干扰的移动类型时，我们可以将这n种移动类型视为n堆石子，将该ICG视为n堆石子的Nim博弈，运用Bouton定理，该ICG的先手必胜与否的情况可以通过计算每个移动类型下的初始状态的SG函数，并计算这些SG函数值的异或和来得出。即下面的SG定理。\n{% endfold %}\nSG定理 Sprague-Grundy定理：\n游戏和的SG函数等于各个游戏SG函数的Nim和（Nim和：各个数相异或的结果）。\n这样就可以将每一个子游戏分而治之，从而简化了问题。而Bouton定理就是Sprague-Grundy定理在Nim博弈中的直接应用。因为单堆Nim博弈（在一堆n个石子中可以取1~n个石子）的SG函数满足SG(n)=mex(n-1, n-2, n-3, \u0026hellip;, n-n)=n，根据SG定理，每一堆石子总数相互异或即为答案。\n模板 1// POJ 2311 2int SG[205][205]; 3 4// 递归 5int getSg(int n, int m){ 6 if(SG[n][m]!=-1) return SG[n][m]; 7 bool S[1005]={0}; 8 9 for(int i=2; i\u0026lt;=n-i; i++) 10 S[getSg(i, m) ^ getSg(n-i, m)] = 1; 11 for(int i=2; i\u0026lt;=m-i; i++) 12 S[getSg(n, i) ^ getSg(n, m-i)] = 1; 13 14 int mex = 0; 15 while(S[mex]) mex++; 16 return SG[n][m]=mex; 17} 18 19// 递推 20 21void getSg(int n, int m) { 22 for(int i = 2; i \u0026lt;= n; i++){ 23 for(int j = 2; j \u0026lt;= m; j++){ 24 bool S[1005]={0}; 25 for(int k = 2; i - k \u0026gt;= 2; k++) S[SG[k][j] ^ SG[i-k][j]] = 1; 26 for(int k = 2; j - k \u0026gt;= 2; k++) S[SG[i][k] ^ SG[i][j-k]] = 1; 27 int mex = 0; 28 while(S[mex]) mex++; 29 SG[i][j] = mex; 30 } 31 } 32} ","permalink":"https://blog.lordash.de/posts/algorithm/sg%E5%87%BD%E6%95%B0/","summary":"公平组合游戏 公平组合游戏（Impartial Combinatorial Games）简称ICG，大致定义如下： 游戏有2名选手 对于游戏任何一种可能的局面（positio","title":"SG函数"},{"content":"解码PAT准考证 (PATB-1095) 题面 PAT 准考证号由 4 部分组成：\n第 1 位是级别，即 T 代表顶级；A 代表甲级；B 代表乙级； 第 2~4 位是考场编号，范围从 101 到 999； 第 5~10 位是考试日期，格式为年、月、日顺次各占 2 位； 最后 11~13 位是考生编号，范围从 000 到 999。 现给定一系列考生的准考证号和他们的成绩，请你按照要求输出各种统计信息。\n输入 输入首先在一行中给出两个正整数 N（≤104）和 M（≤100），分别为考生人数和统计要求的个数。\n接下来 N 行，每行给出一个考生的准考证号和其分数（在区间 [0,100] 内的整数），其间以空格分隔。\n考生信息之后，再给出 M 行，每行给出一个统计要求，格式为：类型 指令，其中\n类型 为 1 表示要求按分数非升序输出某个指定级别的考生的成绩，对应的 指令 则给出代表指定级别的字母； 类型 为 2 表示要求将某指定考场的考生人数和总分统计输出，对应的 指令 则给出指定考场的编号； 类型 为 3 表示要求将某指定日期的考生人数分考场统计输出，对应的 指令 则给出指定日期，格式与准考证上日期相同。 输出 对每项统计要求，首先在一行中输出 Case #: 要求，其中 # 是该项要求的编号，从 1 开始；要求 即复制输入给出的要求。随后输出相应的统计结果：\n类型 为 1 的指令，输出格式与输入的考生信息格式相同，即 准考证号 成绩。对于分数并列的考生，按其准考证号的字典序递增输出（题目保证无重复准考证号）； 类型 为 2 的指令，按 人数 总分 的格式输出； 类型 为 3 的指令，输出按人数非递增顺序，格式为 考场编号 总人数。若人数并列则按考场编号递增顺序输出。 如果查询结果为空，则输出 NA。\n样例输入 18 4 2B123180908127 99 3B102180908003 86 4A112180318002 98 5T107150310127 62 6A107180908108 100 7T123180908010 78 8B112160918035 88 9A107180908021 98 101 A 112 107 123 180908 132 999 样例输出 1Case 1: 1 A 2A107180908108 100 3A107180908021 98 4A112180318002 98 5Case 2: 2 107 63 260 7Case 3: 3 180908 8107 2 9123 2 10102 1 11Case 4: 2 999 12NA 提示 无\n思路 代码 1const int mxn = 1e4 + 5; 2 3struct P{ 4 char s[20]; 5 int x, t; 6 7 bool operator \u0026lt; (const P \u0026amp;x) const 8 { 9 if(t != x.t) 10 return t \u0026gt; x.t; 11 return strcmp(s, x.s) \u0026lt; 0; 12 } 13}a[mxn], ans[mxn]; 14 15struct P2{ 16 int s, cnt; 17 18 bool operator \u0026lt; (const P2 \u0026amp;x) const 19 { 20 if(cnt != x.cnt) 21 return cnt \u0026gt; x.cnt; 22 return s \u0026lt; x.s; 23 } 24}b[mxn]; 25 26int idx[mxn]; 27 28int main() 29{ 30 int n, m; 31 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 32 33 for(int i=0; i\u0026lt;n; i++){ 34 scanf(\u0026#34;%s %d\u0026#34;, a[i].s, \u0026amp;a[i].t); 35 sscanf(a[i].s+1, \u0026#34;%3d\u0026#34;, \u0026amp;a[i].x); 36 } 37 sort(a, a+n); 38 39 for(int cs=1; cs\u0026lt;=m; cs++) 40 { 41 int c; char g[10]; 42 scanf(\u0026#34;%d %s\u0026#34;, \u0026amp;c, g); 43 printf(\u0026#34;Case %d: %d %s\\n\u0026#34;, cs, c, g); 44 45 int num=0, sum=0; 46 if(c == 1) 47 { 48 for(int i=0; i\u0026lt;n; i++) 49 { 50 if(a[i].s[0] == g[0]){ 51 printf(\u0026#34;%s %d\\n\u0026#34;, a[i].s, a[i].t); 52 num++; 53 } 54 } 55 if(num == 0) 56 printf(\u0026#34;NA\\n\u0026#34;); 57 continue; 58 } 59 60 if(c == 2) 61 { 62 for(int i=0; i\u0026lt;n; i++) 63 { 64 if(strncmp(a[i].s+1, g, 3) == 0) 65 sum += a[i].t, num++; 66 } 67 if(num) 68 printf(\u0026#34;%d %d\\n\u0026#34;, num, sum); 69 else 70 printf(\u0026#34;NA\\n\u0026#34;); 71 continue; 72 } 73 74 if(c == 3) 75 { 76 for(int i=0; i\u0026lt;n; i++) 77 { 78 if(strncmp(a[i].s+4, g, 6) == 0) 79 { 80 int x = a[i].x; 81 if(idx[x] == 0){ 82 idx[x] = ++num; 83 b[idx[x]].s = x; 84 } 85 b[idx[x]].cnt++; 86 } 87 } 88 if(num) 89 { 90 sort(b+1, b+num+1); 91 for(int i=1; i\u0026lt;=num; i++) 92 { 93 printf(\u0026#34;%03d %d\\n\u0026#34;, b[i].s, b[i].cnt); 94 b[i].cnt = idx[b[i].s] = 0; 95 } 96 } 97 else 98 printf(\u0026#34;NA\\n\u0026#34;); 99 } 100 } 101 102 return 0; 103} ","permalink":"https://blog.lordash.de/posts/solution/patb-1095-%E8%A7%A3%E7%A0%81pat%E5%87%86%E8%80%83%E8%AF%81/","summary":"解码PAT准考证 (PATB-1095) 题面 PAT 准考证号由 4 部分组成： 第 1 位是级别，即 T 代表顶级；A 代表甲级；B 代表乙级； 第 2~4 位是考场编号，范围从 101 到 999； 第 5~10 位","title":"PATB-1095 解码PAT准考证"},{"content":"谷歌的招聘 (PATB-1094) 题面 2004 年 7 月，谷歌在硅谷的 101 号公路边竖立了一块巨大的广告牌（如下图）用于招聘。内容超级简单，就是一个以 .com 结尾的网址，而前面的网址是一个 10 位素数，这个素数是自然常数 e 中最早出现的 10 位连续数字。能找出这个素数的人，就可以通过访问谷歌的这个网站进入招聘流程的下一步。\n自然常数 e 是一个著名的超越数，前面若干位写出来是这样的：e = 2.71828182845904523536028747135266249775\n7247093699959574966967627724076630353547594571382178525166427427466391932003059921\u0026hellip;\n其中粗体标出的 10 位数就是答案。\n本题要求你编程解决一个更通用的问题：从任一给定的长度为 L 的数字中，找出最早出现的 K 位连续数字所组成的素数。\n输入 输入在第一行给出 2 个正整数，分别是 L（不超过 1000 的正整数，为数字长度）和 K（小于 10 的正整数）。接下来一行给出一个长度为 L 的正整数 N。\n输出 在一行中输出 N 中最早出现的 K 位连续数字所组成的素数。如果这样的素数不存在，则输出 404。注意，原始数字中的前导零也计算在位数之内。例如在 200236 中找 4 位素数，0023 算是解；但第一位 2 不能被当成 0002 输出，因为在原始数字中不存在这个 2 的前导零。\n样例输入1 120 5 223654987725541023819 样例输出1 149877 样例输入2 110 3 22468024680 样例输出2 1404 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2char s[mxn]; 3 4bool isPrime(int n) 5{ 6 if (n == 0 || n == 1) return 0; 7 if (n == 2 || n == 3) return 1; 8 if (n % 6 != 1 \u0026amp;\u0026amp; n % 6 != 5) return 0; 9 10 int m = sqrt(n); 11 for (int i = 5; i \u0026lt;= m; i += 6) 12 { 13 if (n % i == 0 || n % (i + 2) == 0) 14 return 0; 15 } 16 return 1; 17} 18 19int main() 20{ 21 int L, K; 22 scanf(\u0026#34;%d %d %s\u0026#34;, \u0026amp;L, \u0026amp;K, s); 23 24 int f = 1; 25 for(int i=0; i\u0026lt;=L-K; i++) 26 { 27 int t; char a[15]; 28 memset(a, 0, sizeof a); 29 strncpy(a, s+i, K); 30 sscanf(a, \u0026#34;%d\u0026#34;, \u0026amp;t); 31 if(isPrime(t)) 32 { 33 printf(\u0026#34;%s\\n\u0026#34;, a); 34 f = 0; 35 break; 36 } 37 } 38 39 if(f) 40 printf(\u0026#34;404\\n\u0026#34;); 41 42 return 0; 43} ","permalink":"https://blog.lordash.de/posts/solution/patb-1094-%E8%B0%B7%E6%AD%8C%E7%9A%84%E6%8B%9B%E8%81%98/","summary":"谷歌的招聘 (PATB-1094) 题面 2004 年 7 月，谷歌在硅谷的 101 号公路边竖立了一块巨大的广告牌（如下图）用于招聘。内容超级简单，就是一个以 .com 结尾的网址，而前面的网址","title":"PATB-1094 谷歌的招聘"},{"content":"字符串A+B (PATB-1093) 题面 给定两个字符串 A 和 B，本题要求你输出 A+B，即两个字符串的并集。要求先输出 A，再输出 B，但重复的字符必须被剔除。\n输入 输入在两行中分别给出 A 和 B，均为长度不超过 10^6的、由可见 ASCII 字符 (即码值为32~126)和空格组成的、由回车标识结束的非空字符串。\n输出 在一行中输出题面要求的 A 和 B 的和。\n样例输入 1This is a sample test 2to show you_How it works 样例输出 1This ampletowyu_Hrk 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2int a[mxn]; 3 4int main() 5{ 6 for(int i=0; i\u0026lt;2; i++) 7 { 8 char c; 9 while(scanf(\u0026#34;%c\u0026#34;, \u0026amp;c) \u0026amp;\u0026amp; c!=\u0026#39;\\n\u0026#39;) 10 { 11 if(a[c] == 0) 12 { 13 printf(\u0026#34;%c\u0026#34;, c); 14 a[c] = 1; 15 } 16 } 17 } 18 19 return 0; 20} ","permalink":"https://blog.lordash.de/posts/solution/patb-1093-%E5%AD%97%E7%AC%A6%E4%B8%B2a+b/","summary":"字符串A+B (PATB-1093) 题面 给定两个字符串 A 和 B，本题要求你输出 A+B，即两个字符串的并集。要求先输出 A，再输出 B，但重复的字符必须被剔除。 输入 输入在","title":"PATB-1093 字符串A+B"},{"content":"最好吃的月饼 (PATB-1092) 题面 月饼是久负盛名的中国传统糕点之一，自唐朝以来，已经发展出几百品种。\n若想评比出一种“最好吃”的月饼，那势必在吃货界引发一场腥风血雨…… 在这里我们用数字说话，给出全国各地各种月饼的销量，要求你从中找出销量冠军，认定为最好吃的月饼。\n输入 输入首先给出两个正整数 N（≤1000）和 M（≤100），分别为月饼的种类数（于是默认月饼种类从 1 到 N 编号）和参与统计的城市数量。\n接下来 M 行，每行给出 N 个非负整数（均不超过 1 百万），其中第 i 个整数为第 i 种月饼的销量（块）。数字间以空格分隔。\n输出 在第一行中输出最大销量，第二行输出销量最大的月饼的种类编号。如果冠军不唯一，则按编号递增顺序输出并列冠军。数字间以 1 个空格分隔，行首尾不得有多余空格。\n样例输入 15 3 21001 992 0 233 6 38 0 2018 0 2008 436 18 0 1024 4 样例输出 12018 23 5 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2int a[mxn]; 3 4int main() 5{ 6 int n, m; 7 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 8 9 while(m--) 10 { 11 for(int i=1; i\u0026lt;=n; i++) 12 { 13 int t; scanf(\u0026#34;%d\u0026#34;, \u0026amp;t); 14 a[i] += t; 15 } 16 } 17 18 int mx = 0; 19 for(int i=1; i\u0026lt;=n; i++) 20 mx = max(mx, a[i]); 21 22 printf(\u0026#34;%d\\n\u0026#34;, mx); 23 24 int nf = 0; 25 for(int i=1; i\u0026lt;=n; i++) 26 { 27 if(a[i] == mx) 28 { 29 if(nf) 30 printf(\u0026#34; \u0026#34;); 31 else 32 nf = 1; 33 printf(\u0026#34;%d\u0026#34;, i); 34 } 35 } 36 37 return 0; 38} ","permalink":"https://blog.lordash.de/posts/solution/patb-1092-%E6%9C%80%E5%A5%BD%E5%90%83%E7%9A%84%E6%9C%88%E9%A5%BC/","summary":"最好吃的月饼 (PATB-1092) 题面 月饼是久负盛名的中国传统糕点之一，自唐朝以来，已经发展出几百品种。 若想评比出一种“最好吃”的月饼，那势必在吃货界引发一场腥","title":"PATB-1092 最好吃的月饼"},{"content":"N-自守数 (PATB-1091) 题面 如果某个数 K 的平方乘以 N 以后，结果的末尾几位数等于 K，那么就称这个数为“N-自守数”。例如 3×922=25392，而 25392 的末尾两位正好是 92，所以 92 是一个 3-自守数。\n本题就请你编写程序判断一个给定的数字是否关于某个 N 是 N-自守数。\n输入 输入在第一行中给出正整数 M（≤20），随后一行给出 M 个待检测的、不超过 1000 的正整数。\n输出 对每个需要检测的数字，如果它是 N-自守数就在一行中输出最小的 N 和 NK2 的值，以一个空格隔开；否则输出 No。注意题目保证 N\u0026lt;10。\n样例输入 13 292 5 233 样例输出 13 25392 21 25 3No 提示 无\n思路 代码 1int main() 2{ 3 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 4 5 while(n--) 6 { 7 int m, f=1; scanf(\u0026#34;%d\u0026#34;, \u0026amp;m); 8 for(int i=1; i\u0026lt;=9; i++) 9 { 10 int x = i * m * m; 11 char s[20], t[20]; 12 sprintf(s, \u0026#34;%d\u0026#34;, x); 13 sprintf(t, \u0026#34;%d\u0026#34;, m); 14 15 if(strcmp(s+strlen(s)-strlen(t), t) == 0) 16 { 17 printf(\u0026#34;%d %d\\n\u0026#34;, i, x); 18 f = 0; 19 break; 20 } 21 } 22 if(f) printf(\u0026#34;No\\n\u0026#34;); 23 } 24 25 return 0; 26} ","permalink":"https://blog.lordash.de/posts/solution/patb-1091-n-%E8%87%AA%E5%AE%88%E6%95%B0/","summary":"N-自守数 (PATB-1091) 题面 如果某个数 K 的平方乘以 N 以后，结果的末尾几位数等于 K，那么就称这个数为“N-自守数”。例如 3×922=25392，而 25392 的末尾","title":"PATB-1091 N-自守数"},{"content":"危险品装箱 (PATB-1090) 题面 集装箱运输货物时，我们必须特别小心，不能把不相容的货物装在一只箱子里。比如氧化剂绝对不能跟易燃液体同箱，否则很容易造成爆炸。\n本题给定一张不相容物品的清单，需要你检查每一张集装箱货品清单，判断它们是否能装在同一只箱子里。\n输入 输入第一行给出两个正整数：N (≤104) 是成对的不相容物品的对数；M (≤100) 是集装箱货品清单的单数。\n随后数据分两大块给出。第一块有 N 行，每行给出一对不相容的物品。第二块有 M 行，每行给出一箱货物的清单，格式如下：\n1K G[1] G[2] ... G[K] 其中 K (≤1000) 是物品件数，G[i] 是物品的编号。简单起见，每件物品用一个 5 位数的编号代表。两个数字之间用空格分隔。\n输出 对每箱货物清单，判断是否可以安全运输。如果没有不相容物品，则在一行中输出 Yes，否则输出 No。\n样例输入 16 3 220001 20002 320003 20004 420005 20006 520003 20001 620005 20004 720004 20006 84 00001 20004 00002 20003 95 98823 20002 20003 20006 10010 103 12345 67890 23333 样例输出 1No 2Yes 3Yes 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2 3int a[mxn]; 4 5int main() 6{ 7 int n, m; 8 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 9 10 map\u0026lt;int, vector\u0026lt;int\u0026gt; \u0026gt; mmp; 11 12 for (int i=0; i\u0026lt;n; i++) 13 { 14 int x, y; 15 scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;x, \u0026amp;y); 16 mmp[x].push_back(y); 17 mmp[y].push_back(x); 18 } 19 20 while (m--) 21 { 22 memset(a, 0, sizeof a); 23 int k; scanf(\u0026#34;%d\u0026#34;, \u0026amp;k); 24 25 vector\u0026lt;int\u0026gt; v(k); 26 for (int i=0; i\u0026lt;k; i++) 27 { 28 scanf(\u0026#34;%d\u0026#34;, \u0026amp;v[i]); 29 a[v[i]] = 1; 30 } 31 32 int f = 0; 33 for (int i=0; i\u0026lt;v.size(); i++) 34 { 35 for (int j=0; j\u0026lt;mmp[v[i]].size(); j++) 36 { 37 if (a[mmp[v[i]][j]]) 38 { 39 f = 1; 40 break; 41 } 42 } 43 if(f) break; 44 } 45 printf(\u0026#34;%s\\n\u0026#34;, f ? \u0026#34;No\u0026#34; :\u0026#34;Yes\u0026#34;); 46 } 47 48 return 0; 49} ","permalink":"https://blog.lordash.de/posts/solution/patb-1090-%E5%8D%B1%E9%99%A9%E5%93%81%E8%A3%85%E7%AE%B1/","summary":"危险品装箱 (PATB-1090) 题面 集装箱运输货物时，我们必须特别小心，不能把不相容的货物装在一只箱子里。比如氧化剂绝对不能跟易燃液体同箱，否则很容易造成爆炸。","title":"PATB-1090 危险品装箱"},{"content":"狼人杀-简单版 (PATB-1089) 题面 以下文字摘自《灵机一动·好玩的数学》：“狼人杀”游戏分为狼人、好人两大阵营。在一局“狼人杀”游戏中，1 号玩家说：“2 号是狼人”，2 号玩家说：“3 号是好人”，3 号玩家说：“4 号是狼人”，4 号玩家说：“5 号是好人”，5 号玩家说：“4 号是好人”。已知这 5 名玩家中有 2 人扮演狼人角色，有 2 人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。扮演狼人角色的是哪两号玩家？\n本题是这个问题的升级版：已知 N 名玩家中有 2 人扮演狼人角色，有 2 人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。要求你找出扮演狼人角色的是哪几号玩家？\n输入 输入在第一行中给出一个正整数 N（5≤N≤100）。随后 N 行，第 i 行给出第 i 号玩家说的话（1≤i≤N），即一个玩家编号，用正号表示好人，负号表示狼人。\n输出 如果有解，在一行中按递增顺序输出 2 个狼人的编号，其间以空格分隔，行首尾不得有多余空格。如果解不唯一，则输出最小序列解 —— 即对于两个序列 A=a[1],\u0026hellip;,a[M] 和 B=b[1],\u0026hellip;,b[M]，若存在 0≤k\u0026lt;M 使得 a[i]=b[i] （i≤k），且 a[k+1]\u0026lt;b[k+1]，则称序列 A 小于序列 B。若无解则输出 No Solution。\n样例输入1 15 2-2 3+3 4-4 5+5 6+4 样例输出1 11 4 样例输入2 16 2+6 3+3 4+1 5-5 6-2 7+4 样例输出2 11 5 样例输入3 15 2-2 3-3 4-4 5-5 6-1 样例输出3 1No Solution 提示 样例2解不唯一\n思路 代码 1#define Sg(u) ((u) \u0026gt; eps ? 1 : ((u) \u0026lt; -eps ? -1 : 0)) 2#define Abs(u) (Sg(u) \u0026gt;= 0 ? (u) : -(u)) 3const DB eps = 1e-8; 4 5const int mxn = 1e5 + 5; 6 7int a[mxn], ok[mxn], lie[mxn]; 8 9int main() 10{ 11 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 12 13 for (int i=1; i\u0026lt;=n; i++) 14 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); 15 16 for(int i=1; i\u0026lt;=n; i++) 17 { 18 for(int j=i+1; j\u0026lt;=n; j++) 19 { 20 for(int k=1; k\u0026lt;=n; k++) 21 ok[k] = 1; 22 ok[i] = ok[j] = -1; 23 24 int num = 0; 25 for(int k=1; k\u0026lt;=n; k++) 26 { 27 if(a[k] * ok[Abs(a[k])] \u0026lt; 0) 28 lie[num++] = k; 29 } 30 31 if(num == 2 \u0026amp;\u0026amp; ok[lie[0]] + ok[lie[1]] == 0) 32 { 33 printf(\u0026#34;%d %d\\n\u0026#34;, i, j); 34 return 0; 35 } 36 } 37 } 38 printf(\u0026#34;No Solution\\n\u0026#34;); 39 40 return 0; 41} ","permalink":"https://blog.lordash.de/posts/solution/patb-1089-%E7%8B%BC%E4%BA%BA%E6%9D%80-%E7%AE%80%E5%8D%95%E7%89%88/","summary":"狼人杀-简单版 (PATB-1089) 题面 以下文字摘自《灵机一动·好玩的数学》：“狼人杀”游戏分为狼人、好人两大阵营。在一局“狼人杀”游戏中，1 号玩家说：“2 号是","title":"PATB-1089 狼人杀-简单版"},{"content":"三人行 (PATB-1088) 题面 子曰：“三人行，必有我师焉。择其善者而从之，其不善者而改之。”\n本题给定甲、乙、丙三个人的能力值关系为：甲的能力值确定是 2 位正整数；把甲的能力值的 2 个数字调换位置就是乙的能力值；甲乙两人能力差是丙的能力值的 X 倍；乙的能力值是丙的 Y 倍。请你指出谁比你强应“从之”，谁比你弱应“改之”。\n输入 输入在一行中给出三个数，依次为：M（你自己的能力值）、X 和 Y。三个数字均为不超过 1000 的正整数。\n输出 在一行中首先输出甲的能力值，随后依次输出甲、乙、丙三人与你的关系：如果其比你强，输出 Cong；平等则输出 Ping；比你弱则输出 Gai。其间以 1 个空格分隔，行首尾不得有多余空格。\n注意：如果解不唯一，则以甲的最大解为准进行判断；如果解不存在，则输出 No Solution。\n样例输入1 148 3 7 样例输出1 148 Ping Cong Gai 样例输入2 148 11 6 样例输出2 1No Solution 提示 无\n思路 代码 1#define Sg(u) ((u) \u0026gt; eps ? 1 : ((u) \u0026lt; -eps ? -1 : 0)) 2#define Abs(u) (Sg(u) \u0026gt;= 0 ? (u) : -(u)) 3typedef double DB; 4const DB eps = 1e-8; 5 6char s[][5] = {\u0026#34;Cong\u0026#34;, \u0026#34;Ping\u0026#34;, \u0026#34;Gai\u0026#34;}; 7 8int main() 9{ 10 int m, x, y; 11 scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;m, \u0026amp;x, \u0026amp;y); 12 13 int a, b, f = 0; DB c; 14 for(int i=99; i\u0026gt;=10; i--) 15 { 16 int j = i%10 * 10 + i/10; 17 if(Abs(i-j)*y == j*x) 18 { 19 a = i, b = j, c = 1.0*Abs(i-j)/x; 20 f = 1; 21 break; 22 } 23 } 24 if(f) 25 printf(\u0026#34;%d %s %s %s\\n\u0026#34;, a, s[Sg(m-a)+1], s[Sg(m-b)+1], s[Sg(m-c)+1]); 26 else 27 printf(\u0026#34;No Solution\\n\u0026#34;); 28 29 return 0; 30} ","permalink":"https://blog.lordash.de/posts/solution/patb-1088-%E4%B8%89%E4%BA%BA%E8%A1%8C/","summary":"三人行 (PATB-1088) 题面 子曰：“三人行，必有我师焉。择其善者而从之，其不善者而改之。” 本题给定甲、乙、丙三个人的能力值关系为：甲的能力值确定是 2 位正整数","title":"PATB-1088 三人行"},{"content":"有多少不同的值 (PATB-1087) 题面 当自然数 n 依次取 1、2、3、……、N 时，算式 ⌊n/2⌋+⌊n/3⌋+⌊n/5⌋ 有多少个不同的值？（注：⌊x⌋ 为取整函数，表示不超过 x 的最大自然数，即 x 的整数部分。）\n输入 输入给出一个正整数 N（2≤N≤104）。\n输出 在一行中输出题面中算式取到的不同值的个数。\n样例输入 12017 样例输出 11480 提示 无\n思路 代码 1int main() 2{ 3 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 4 set\u0026lt;int\u0026gt; sst; 5 for(int i=1; i\u0026lt;=n; i++) 6 sst.insert(i/2 + i/3 + i/5); 7 8 printf(\u0026#34;%d\\n\u0026#34;, sst.size()); 9 10 return 0; 11} ","permalink":"https://blog.lordash.de/posts/solution/patb-1087-%E6%9C%89%E5%A4%9A%E5%B0%91%E4%B8%8D%E5%90%8C%E7%9A%84%E5%80%BC/","summary":"有多少不同的值 (PATB-1087) 题面 当自然数 n 依次取 1、2、3、……、N 时，算式 ⌊n/2⌋+⌊n/3⌋+⌊n/5⌋ 有多少个不同的值？（注：⌊x⌋ 为取整函数，","title":"PATB-1087 有多少不同的值"},{"content":"就不告诉你 (PATB-1086) 题面 做作业的时候，邻座的小盆友问你：“五乘以七等于多少？”你应该不失礼貌地围笑着告诉他：“五十三。”本题就要求你，对任何一对给定的正整数，倒着输出它们的乘积。\n输入 输入在第一行给出两个不超过 1000 的正整数 A 和 B，其间以空格分隔。\n输出 在一行中倒着输出 A 和 B 的乘积。\n样例输入 15 7 样例输出 153 提示 无\n思路 代码 1int main() 2{ 3 int a, b, c, d=0; 4 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;a, \u0026amp;b); 5 c = a * b; 6 7 while(c) 8 { 9 d = d * 10 + c%10; 10 c /= 10; 11 } 12 printf(\u0026#34;%d\\n\u0026#34;, d); 13 14 return 0; 15} ","permalink":"https://blog.lordash.de/posts/solution/patb-1086-%E5%B0%B1%E4%B8%8D%E5%91%8A%E8%AF%89%E4%BD%A0/","summary":"就不告诉你 (PATB-1086) 题面 做作业的时候，邻座的小盆友问你：“五乘以七等于多少？”你应该不失礼貌地围笑着告诉他：“五十三。”本题就要求你，对任何一对给定","title":"PATB-1086 就不告诉你"},{"content":"PAT单位排行 (PATB-1085) 题面 每次 PAT 考试结束后，考试中心都会发布一个考生单位排行榜。本题就请你实现这个功能。\n输入 输入第一行给出一个正整数 N（≤105），即考生人数。随后 N 行，每行按下列格式给出一个考生的信息：\n1准考证号 得分 学校 其中准考证号是由 6 个字符组成的字符串，其首字母表示考试的级别：B代表乙级，A代表甲级，T代表顶级；得分是 [0, 100] 区间内的整数；学校是由不超过 6 个英文字母组成的单位码（大小写无关）。注意：题目保证每个考生的准考证号是不同的。\n输出 首先在一行中输出单位个数。随后按以下格式非降序输出单位的排行榜：\n1排名 学校 加权总分 考生人数 其中排名是该单位的排名（从 1 开始）；学校是全部按小写字母输出的单位码；加权总分定义为乙级总分/1.5 + 甲级总分 + 顶级总分*1.5的整数部分；考生人数是该属于单位的考生的总人数。\n学校首先按加权总分排行。如有并列，则应对应相同的排名，并按考生人数升序输出。如果仍然并列，则按单位码的字典序输出。\n样例输入 110 2A57908 85 Au 3B57908 54 LanX 4A37487 60 au 5T28374 67 CMU 6T32486 24 hypu 7A66734 92 cmu 8B76378 71 AU 9A47780 45 lanx 10A72809 100 pku 11A03274 45 hypu 样例输出 15 21 cmu 192 2 31 au 192 3 43 pku 100 1 54 hypu 81 2 64 lanx 81 2 提示 无\n思路 代码 1typedef double DB; 2const int mxn = 1e5 + 5; 3 4struct P{ 5 string s; 6 DB sum; 7 int num; 8}a[mxn]; 9 10bool cmp(P a, P b) 11{ 12 if(a.sum != b.sum) 13 return a.sum \u0026gt; b.sum; 14 if(a.num != b.num) 15 return a.num \u0026lt; b.num; 16 return a.s \u0026lt; b.s; 17} 18 19int main() 20{ 21 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 22 23 map\u0026lt;string, int\u0026gt; mmp; 24 string x, y; 25 int cnt = 0; 26 DB t; 27 28 for (int i=0; i\u0026lt;n; i++) 29 { 30 cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; t \u0026gt;\u0026gt; y; 31 for(int j=0; j\u0026lt;y.length(); j++) 32 y[j] = tolower(y[j]); 33 34 if(mmp.count(y)==0) 35 { 36 mmp[y] = cnt++; 37 a[mmp[y]].s = y; 38 } 39 40 if(x.at(0) == \u0026#39;B\u0026#39;) 41 t /= 1.5; 42 else if(x.at(0) == \u0026#39;T\u0026#39;) 43 t *= 1.5; 44 45 a[mmp[y]].sum += t; 46 a[mmp[y]].num++; 47 } 48 for(int i=0; i\u0026lt;cnt; i++) 49 a[i].sum = floor(a[i].sum); 50 51 printf(\u0026#34;%d\\n\u0026#34;, cnt); 52 sort(a, a+cnt, cmp); 53 54 int rank = 1; 55 for(int i=0; i\u0026lt;cnt; i++) 56 { 57 if(i \u0026amp;\u0026amp; a[i-1].sum != a[i].sum) 58 rank = i+1; 59 printf(\u0026#34;%d %s %.0lf %d\\n\u0026#34;, rank, a[i].s.c_str(), a[i].sum, a[i].num); 60 } 61 62 return 0; 63} ","permalink":"https://blog.lordash.de/posts/solution/patb-1085-pat%E5%8D%95%E4%BD%8D%E6%8E%92%E8%A1%8C/","summary":"PAT单位排行 (PATB-1085) 题面 每次 PAT 考试结束后，考试中心都会发布一个考生单位排行榜。本题就请你实现这个功能。 输入 输入第一行给出一个正整数 N（≤105）","title":"PATB-1085 PAT单位排行"},{"content":"外观数列 (PATB-1084) 题面 外观数列是指具有以下特点的整数序列：\n1d, d1, d111, d113, d11231, d112213111, ... 它从不等于 1 的数字 d 开始，序列的第 n+1 项是对第 n 项的描述。比如第 2 项表示第 1 项有 1 个 d，所以就是 d1；第 2 项是 1 个 d（对应 d1）和 1 个 1（对应 11），所以第 3 项就是 d111。又比如第 4 项是 d113，其描述就是 1 个 d，2 个 1，1 个 3，所以下一项就是 d11231。当然这个定义对 d = 1 也成立。本题要求你推算任意给定数字 d 的外观数列的第 N 项。\n输入 输入第一行给出 [0,9] 范围内的一个整数 d、以及一个正整数 N（≤ 40），用空格分隔。\n输出 在一行中给出数字 d 的外观数列的第 N 项。\n样例输入 11 8 样例输出 11123123111 提示 无\n思路 代码 1int main() 2{ 3 string s; int n, j; 4 cin \u0026gt;\u0026gt; s \u0026gt;\u0026gt; n; 5 6 for (int k=1; k\u0026lt;n; k++) 7 { 8 string t; 9 for (int i=0; i\u0026lt;s.length(); i=j) 10 { 11 for (j=i; j\u0026lt;s.length() \u0026amp;\u0026amp; s[j]==s[i]; j++); 12 t += s[i] + to_string(j - i); 13 } 14 s = t; 15 } 16 printf(\u0026#34;%s\\n\u0026#34;, s.c_str()); 17 18 return 0; 19} ","permalink":"https://blog.lordash.de/posts/solution/patb-1084-%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/","summary":"外观数列 (PATB-1084) 题面 外观数列是指具有以下特点的整数序列： 1d, d1, d111, d113, d11231, d112213111, ... 它从不等于 1 的数字 d 开始，序列的第 n+1 项是对第 n 项的描述。比如第 2 项表示第 1 项","title":"PATB-1084 外观数列"},{"content":"是否存在相等的差 (PATB-1083) 题面 给定 N 张卡片，正面分别写上 1、2、……、N，然后全部翻面，洗牌，在背面分别写上 1、2、……、N。将每张牌的正反两面数字相减（大减小），得到 N 个非负差值，其中是否存在相等的差？\n输入 输入第一行给出一个正整数 N（2 ≤ N ≤ 10 000），随后一行给出 1 到 N 的一个洗牌后的排列，第 i 个数表示正面写了 i 的那张卡片背面的数字。\n输出 按照“差值 重复次数”的格式从大到小输出重复的差值及其重复的次数，每行输出一个结果。\n样例输入 18 23 5 8 6 2 1 4 7 样例输出 15 2 23 3 32 2 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2 3int a[mxn], p[mxn]; 4 5int main() 6{ 7 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 8 9 for(int i=1; i\u0026lt;=n; i++) 10 { 11 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); 12 p[Abs(a[i]-i)]++; 13 } 14 15 for(int i=10000; i\u0026gt;=0; i--) 16 { 17 if(p[i]\u0026gt;1) 18 printf(\u0026#34;%d %d\\n\u0026#34;, i, p[i]); 19 } 20 21 return 0; 22} ","permalink":"https://blog.lordash.de/posts/solution/patb-1083-%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E7%9B%B8%E7%AD%89%E7%9A%84%E5%B7%AE/","summary":"是否存在相等的差 (PATB-1083) 题面 给定 N 张卡片，正面分别写上 1、2、……、N，然后全部翻面，洗牌，在背面分别写上 1、2、……、N。将每张牌的正反两面数字","title":"PATB-1083 是否存在相等的差"},{"content":"射击比赛 (PATB-1082) 题面 本题目给出的射击比赛的规则非常简单，谁打的弹洞距离靶心最近，谁就是冠军；谁差得最远，谁就是菜鸟。本题给出一系列弹洞的平面坐标(x,y)，请你编写程序找出冠军和菜鸟。我们假设靶心在原点(0,0)。\n输入 输入在第一行中给出一个正整数 N（≤ 10 000）。随后 N 行，每行按下列格式给出：\n1ID x y 其中 ID 是运动员的编号（由 4 位数字组成）；x 和 y 是其打出的弹洞的平面坐标(x,y)，均为整数，且 0 ≤ |x|, |y| ≤ 100。题目保证每个运动员的编号不重复，且每人只打 1 枪。\n输出 输出冠军和菜鸟的编号，中间空 1 格。题目保证他们是唯一的。\n样例输入 13 20001 5 7 31020 -1 3 40233 0 -1 样例输出 10233 0001 提示 无\n思路 代码 1typedef double DB; 2 3struct PT 4{ 5 DB x, y; 6 PT() : x(0), y(0) {}; 7 PT(DB _x, DB _y) : x(_x), y(_y) {}; 8}; 9 10DB dist(PT p1, PT p2) 11{ 12 return sqrt(Sq(p1.x - p2.x) + Sq(p1.y - p2.y)); 13} 14 15struct P{ 16 int id; 17 DB ans; 18}a[mxn]; 19 20bool cmp(P a, P b) 21{ 22 return a.ans \u0026lt; b.ans; 23} 24 25int main() 26{ 27 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 28 29 PT p; 30 for(int i=0; i\u0026lt;n; i++) 31 { 32 scanf(\u0026#34;%d %lf %lf\u0026#34;, \u0026amp;a[i].id, \u0026amp;p.x, \u0026amp;p.y); 33 a[i].ans = dist(p, PT{0, 0}); 34 } 35 sort(a, a+n, cmp); 36 printf(\u0026#34;%04d %04d\\n\u0026#34;, a[0].id, a[n-1].id); 37 38 return 0; 39} ","permalink":"https://blog.lordash.de/posts/solution/patb-1082-%E5%B0%84%E5%87%BB%E6%AF%94%E8%B5%9B/","summary":"射击比赛 (PATB-1082) 题面 本题目给出的射击比赛的规则非常简单，谁打的弹洞距离靶心最近，谁就是冠军；谁差得最远，谁就是菜鸟。本题给出一系列弹洞的平面坐标(","title":"PATB-1082 射击比赛"},{"content":"检查密码 (PATB-1081) 题面 本题要求你帮助某网站的用户注册模块写一个密码合法性检查的小功能。该网站要求用户设置的密码必须由不少于6个字符组成，并且只能有英文字母、数字和小数点 .，还必须既有字母也有数字。\n输入 输入第一行给出一个正整数 N（≤ 100），随后 N 行，每行给出一个用户设置的密码，为不超过 80 个字符的非空字符串，以回车结束。\n输出 对每个用户的密码，在一行中输出系统反馈信息，分以下5种：\n如果密码合法，输出Your password is wan mei.； 如果密码太短，不论合法与否，都输出Your password is tai duan le.； 如果密码长度合法，但存在不合法字符，则输出Your password is tai luan le.； 如果密码长度合法，但只有字母没有数字，则输出Your password needs shu zi.； 如果密码长度合法，但只有数字没有字母，则输出Your password needs zi mu.。 样例输入 15 2123s 3zheshi.wodepw 41234.5678 5WanMei23333 6pass*word.6 样例输出 1Your password is tai duan le. 2Your password needs shu zi. 3Your password needs zi mu. 4Your password is wan mei. 5Your password is tai luan le. 提示 无\n思路 代码 1char s[100]; 2 3int main() 4{ 5 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 6 getchar(); 7 8 for(int i=0; i\u0026lt;n; i++) 9 { 10 fgets(s, 100, stdin); 11 int sl = strlen(s) - 1; 12 13 if(sl \u0026lt; 6){ 14 printf(\u0026#34;Your password is tai duan le.\\n\u0026#34;); 15 continue; 16 } 17 18 int ok = 1, a = 0, b = 0; 19 for(int j=0; j\u0026lt;sl; j++) 20 { 21 if(isdigit(s[j])) 22 a++; 23 else if(isalpha(s[j])) 24 b++; 25 else if(s[j]!=\u0026#39;.\u0026#39;) 26 ok = 0; 27 } 28 29 if(ok == 0 || (a==0 \u0026amp;\u0026amp; b==0)) 30 printf(\u0026#34;Your password is tai luan le.\\n\u0026#34;); 31 else if(a==0 \u0026amp;\u0026amp; b) 32 printf(\u0026#34;Your password needs shu zi.\\n\u0026#34;); 33 else if(b==0 \u0026amp;\u0026amp; a) 34 printf(\u0026#34;Your password needs zi mu.\\n\u0026#34;); 35 else if(a \u0026amp;\u0026amp; b) 36 printf(\u0026#34;Your password is wan mei.\\n\u0026#34;); 37 } 38 39 return 0; 40} ","permalink":"https://blog.lordash.de/posts/solution/patb-1081-%E6%A3%80%E6%9F%A5%E5%AF%86%E7%A0%81/","summary":"检查密码 (PATB-1081) 题面 本题要求你帮助某网站的用户注册模块写一个密码合法性检查的小功能。该网站要求用户设置的密码必须由不少于6个字符组成，并且只能有英","title":"PATB-1081 检查密码"},{"content":"MOOC期终成绩 (PATB-1080) 题面 对于在中国大学MOOC（http://www.icourse163.org/ ）学习“数据结构”课程的学生，想要获得一张合格证书，必须首先获得不少于200分的在线编程作业分，然后总评获得不少于60分（满分100）。总评成绩的计算公式为 G=(Gmid−term×40%+Gfinal×60%)，如果 Gmid−term\u0026gt;Gfinal；否则总评 G 就是 Gfinal。这里 Gmid−term 和 Gfinal 分别为学生的期中和期末成绩。\n现在的问题是，每次考试都产生一张独立的成绩单。本题就请你编写程序，把不同的成绩单合为一张。\n输入 输入在第一行给出3个整数，分别是 P（做了在线编程作业的学生数）、M（参加了期中考试的学生数）、N（参加了期末考试的学生数）。每个数都不超过10000。\n接下来有三块输入。第一块包含 P 个在线编程成绩 Gp；第二块包含 M 个期中考试成绩 Gmid−term；第三块包含 N 个期末考试成绩 Gfinal。每个成绩占一行，格式为：学生学号 分数。其中学生学号为不超过20个字符的英文字母和数字；分数是非负整数（编程总分最高为900分，期中和期末的最高分为100分）。\n输出 打印出获得合格证书的学生名单。每个学生占一行，格式为：\n学生学号 Gp Gmid−term Gfinal G\n如果有的成绩不存在（例如某人没参加期中考试），则在相应的位置输出“−1”。输出顺序为按照总评分数（四舍五入精确到整数）递减。若有并列，则按学号递增。题目保证学号没有重复，且至少存在1个合格的学生。\n样例输入 16 6 7 201234 880 3a1903 199 4ydjh2 200 5wehu8 300 6dx86w 220 7missing 400 8ydhfu77 99 9wehu8 55 10ydjh2 98 11dx86w 88 12a1903 86 1301234 39 14ydhfu77 88 15a1903 66 1601234 58 17wehu8 84 18ydjh2 82 19missing 99 20dx86w 81 样例输出 1missing 400 -1 99 99 2ydjh2 200 98 82 88 3dx86w 220 88 81 84 4wehu8 300 55 84 84 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2 3struct P{ 4 string s; 5 int gp, gm, gf, g; 6}a[mxn], ans[mxn], t; 7 8bool cmp(P a, P b){ 9 return a.g != b.g ? a.g \u0026gt; b.g : a.s \u0026lt; b.s; 10} 11 12int main() 13{ 14 int p, m, n; 15 scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;p, \u0026amp;m, \u0026amp;n); 16 17 int num = 0; 18 map\u0026lt;string, int\u0026gt; mmp; 19 20 for(int i=0; i\u0026lt;p; i++) 21 { 22 cin \u0026gt;\u0026gt; t.s \u0026gt;\u0026gt; t.gp; 23 if(t.gp \u0026gt;= 200) 24 { 25 a[num] = P{t.s, t.gp, -1, -1, 0}; 26 mmp[t.s] = num++; 27 } 28 } 29 30 for(int i=0; i\u0026lt;m; i++) 31 { 32 cin \u0026gt;\u0026gt; t.s \u0026gt;\u0026gt; t.gm; 33 if(mmp.count(t.s) != 0) 34 a[mmp[t.s]].gm = t.gm; 35 } 36 37 for(int i=0; i\u0026lt;n; i++) 38 { 39 cin \u0026gt;\u0026gt; t.s \u0026gt;\u0026gt; t.gf; 40 if(mmp.count(t.s) != 0) 41 { 42 int id = mmp[t.s]; 43 a[id].g = a[id].gf = t.gf; 44 if(a[id].gm \u0026gt; a[id].gf) 45 a[id].g = (int)(0.4*a[id].gm + 0.6*a[id].gf + 0.5); 46 } 47 } 48 49 int cnt = 0; 50 for(int i=0; i\u0026lt;num; i++) 51 { 52 if(a[i].g \u0026gt;= 60) 53 ans[cnt++] = a[i]; 54 } 55 56 sort(ans, ans+cnt, cmp); 57 for(int i=0; i\u0026lt;cnt; i++) 58 printf(\u0026#34;%s %d %d %d %d\\n\u0026#34;, ans[i].s.c_str(), ans[i].gp, ans[i].gm, ans[i].gf, ans[i].g); 59 60 return 0; 61} ","permalink":"https://blog.lordash.de/posts/solution/patb-1080-mooc%E6%9C%9F%E7%BB%88%E6%88%90%E7%BB%A9/","summary":"MOOC期终成绩 (PATB-1080) 题面 对于在中国大学MOOC（http://www.icourse163.org/ ）学习“数据结构”课程的学生，想要获得一张","title":"PATB-1080 MOOC期终成绩"},{"content":"一、准备 基本信息\n操作系统: Windows10 jdk版本: 1.8 Hadoop版本: 2.9.2 下载并解压\nScala： 官网 或者 scala-2.13.2.zip Spark：官网 或者 spark-3.0.0-preview2-bin-hadoop2.7.tgz 二、Scala 配置 新建系统变量 SCALA_HOME 至所在目录，如 D:\\environment\\scala-2.13.2\n在 path 中添加 %SCALA_HOME%\\bin\n测试 启动命令行，运行 scala -version ，出现以下结果说明成功\n三、Spark 启动命令行，配置环境变量或者cd 至 Spark的 bin 目录下，运行 spark-shell 出现以下结果说明成功。若出现错误，则依据错误提示安装Python或者Hadoop。\n","permalink":"https://blog.lordash.de/posts/configure/949fb3f2e5a83ea5/","summary":"一、准备 基本信息 操作系统: Windows10 jdk版本: 1.8 Hadoop版本: 2.9.2 下载并解压 Scala： 官网 或者 scala-2.13.2.zip Spark：官网 或者 spark-3.0.0-preview2-bin-hadoop2.7.tgz 二、Scala 配置 新建系","title":"Win10配置Scala和Spark"},{"content":"延迟的回文数 (PATB-1079) 题面 给定一个 k+1 位的正整数 N，写成 ak⋯a1a0 的形式，其中对所有 i 有 0≤ai\u0026lt;10 且 ak\u0026gt;0。N 被称为一个回文数，当且仅当对所有 i 有 ai=ak−i。零也被定义为一个回文数。\n非回文数也可以通过一系列操作变出回文数。首先将该数字逆转，再将逆转数与该数相加，如果和还不是一个回文数，就重复这个逆转再相加的操作，直到一个回文数出现。如果一个非回文数可以变出回文数，就称这个数为延迟的回文数。（定义翻译自 https://en.wikipedia.org/wiki/Palindromic_number ）\n给定任意一个正整数，本题要求你找到其变出的那个回文数。\n输入 输入在一行中给出一个不超过1000位的正整数。\n输出 对给定的整数，一行一行输出其变出回文数的过程。每行格式如下\n1A + B = C 其中 A 是原始的数字，B 是 A 的逆转数，C 是它们的和。A 从输入的整数开始。重复操作直到 C 在 10 步以内变成回文数，这时在一行中输出 C is a palindromic number.；或者如果 10 步都没能得到回文数，最后就在一行中输出 Not found in 10 iterations.。\n样例输入1 197152 样例输出1 197152 + 25179 = 122331 2122331 + 133221 = 255552 3255552 is a palindromic number. 样例输入2 1196 样例输出2 1196 + 691 = 887 2887 + 788 = 1675 31675 + 5761 = 7436 47436 + 6347 = 13783 513783 + 38731 = 52514 652514 + 41525 = 94039 794039 + 93049 = 187088 8187088 + 880781 = 1067869 91067869 + 9687601 = 10755470 1010755470 + 07455701 = 18211171 11Not found in 10 iterations. 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2char s[mxn], t[mxn]; 3 4void add(char *s, char *t) 5{ 6 int len=strlen(s), p=0; 7 for(int i=0; i\u0026lt;len; i++){ 8 int x = s[i]-\u0026#39;0\u0026#39; + t[i]-\u0026#39;0\u0026#39; + p; 9 p = x / 10; 10 s[i] = x % 10 + \u0026#39;0\u0026#39;; 11 } 12 if(p) 13 s[len++]=\u0026#39;1\u0026#39;; 14 s[len]=\u0026#39;\\0\u0026#39;; 15 reverse(s, s+len); 16} 17 18int main() 19{ 20 scanf(\u0026#34;%s\u0026#34;, s); 21 22 int num = 0; 23 while(1) 24 { 25 reverse_copy(s, s+strlen(s), t); 26 if(strcmp(s, t) == 0){ 27 printf(\u0026#34;%s is a palindromic number.\\n\u0026#34;, s); 28 break; 29 } 30 printf(\u0026#34;%s + %s = \u0026#34;, s, t); 31 add(s, t); 32 printf(\u0026#34;%s\\n\u0026#34;, s); 33 if(++num \u0026gt;= 10){ 34 printf(\u0026#34;Not found in 10 iterations.\\n\u0026#34;); 35 break; 36 } 37 } 38 return 0; 39} ","permalink":"https://blog.lordash.de/posts/solution/patb-1079-%E5%BB%B6%E8%BF%9F%E7%9A%84%E5%9B%9E%E6%96%87%E6%95%B0/","summary":"延迟的回文数 (PATB-1079) 题面 给定一个 k+1 位的正整数 N，写成 ak⋯a1a0 的形式，其中对所有 i 有 0≤ai\u0026lt;10 且 ak\u0026gt;0。N 被称为一个回文数，","title":"PATB-1079 延迟的回文数"},{"content":"字符串压缩与解压 (PATB-1078) 题面 文本压缩有很多种方法，这里我们只考虑最简单的一种：把由相同字符组成的一个连续的片段用这个字符和片段中含有这个字符的个数来表示。例如 ccccc 就用 5c 来表示。如果字符没有重复，就原样输出。例如 aba 压缩后仍然是 aba。\n解压方法就是反过来，把形如 5c 这样的表示恢复为 ccccc。\n本题需要你根据压缩或解压的要求，对给定字符串进行处理。这里我们简单地假设原始字符串是完全由英文字母和空格组成的非空字符串。\n输入 输入第一行给出一个字符，如果是 C 就表示下面的字符串需要被压缩；如果是 D 就表示下面的字符串需要被解压。第二行给出需要被压缩或解压的不超过 1000 个字符的字符串，以回车结尾。题目保证字符重复个数在整型范围内，且输出文件不超过 1MB。\n输出 根据要求压缩或解压字符串，并在一行中输出结果。\n样例输入 1C 2TTTTThhiiiis isssss a tesssst CAaaa as 样例输出 15T2h4is i5s a3 te4st CA3a as 样例输入 1D 25T2h4is i5s a3 te4st CA3a as10Z 样例输出 1TTTTThhiiiis isssss a tesssst CAaaa asZZZZZZZZZZ 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2char s[mxn], c; 3 4int main() 5{ 6 scanf(\u0026#34;%c%*c\u0026#34;, \u0026amp;c); 7 fgets(s, mxn, stdin); 8 int len = strlen(s); 9 10 if(c == \u0026#39;C\u0026#39;) 11 { 12 int num=1, i=0; 13 char t = s[i]; 14 15 for(i++; i\u0026lt;len; i++) 16 { 17 if(s[i] == t){ 18 num++; 19 continue; 20 } 21 if(num\u0026gt;1) printf(\u0026#34;%d\u0026#34;, num); 22 printf(\u0026#34;%c\u0026#34;, t); 23 t = s[i]; 24 num = 1; 25 } 26 if(num\u0026gt;1) printf(\u0026#34;%d\u0026#34;, num); 27 printf(\u0026#34;%c\u0026#34;, t); 28 } 29 else 30 { 31 int num=0, i=0; 32 for(i=0; s[i]==\u0026#39; \u0026#39;; i++) 33 printf(\u0026#34;%c\u0026#34;, s[i]); 34 35 for(; i\u0026lt;len; i++) 36 { 37 if(isdigit(s[i])) 38 num = num*10 + s[i]-\u0026#39;0\u0026#39;; 39 else{ 40 while(num--) printf(\u0026#34;%c\u0026#34;, s[i]); 41 num = isdigit(s[i+1]) ? 0 : 1; 42 } 43 } 44 } 45 return 0; 46} ","permalink":"https://blog.lordash.de/posts/solution/patb-1078-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%8B%E7%BC%A9%E4%B8%8E%E8%A7%A3%E5%8E%8B/","summary":"字符串压缩与解压 (PATB-1078) 题面 文本压缩有很多种方法，这里我们只考虑最简单的一种：把由相同字符组成的一个连续的片段用这个字符和片段中含有这个字符的个数","title":"PATB-1078 字符串压缩与解压"},{"content":"互评成绩计算 (PATB-1077) 题面 在浙大的计算机专业课中，经常有互评分组报告这个环节。一个组上台介绍自己的工作，其他组在台下为其表现评分。最后这个组的互评成绩是这样计算的：所有其他组的评分中，去掉一个最高分和一个最低分，剩下的分数取平均分记为 G1；老师给这个组的评分记为 G2。该组得分为 (G1+G2)/2，最后结果四舍五入后保留整数分。本题就要求你写个程序帮助老师计算每个组的互评成绩。\n输入 输入第一行给出两个正整数 N（\u0026gt; 3）和 M，分别是分组数和满分，均不超过 100。随后 N 行，每行给出该组得到的 N 个分数（均保证为整型范围内的整数），其中第 1 个是老师给出的评分，后面 N−1 个是其他组给的评分。合法的输入应该是 [0,M] 区间内的整数，若不在合法区间内，则该分数须被忽略。题目保证老师的评分都是合法的，并且每个组至少会有 3 个来自同学的合法评分。\n输出 为每个组输出其最终得分。每个得分占一行。\n样例输入 16 50 242 49 49 35 38 41 336 51 50 28 -1 30 440 36 41 33 47 49 530 250 -25 27 45 31 648 0 0 50 50 1234 743 41 36 29 42 29 样例输出 142 233 341 431 537 639 提示 无\n思路 代码 1int main() 2{ 3 int n, m; 4 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 5 6 for(int i=0; i\u0026lt;n; i++) 7 { 8 int mx=-1, mi=m+1, t, g1, g2=0, num=-2; 9 for(int j=0; j\u0026lt;n; j++) 10 { 11 scanf(\u0026#34;%d\u0026#34;, \u0026amp;t); 12 if(j){ 13 if(t\u0026lt;0 || t\u0026gt;m) continue; 14 g2 += t; 15 mx = max(mx, t); 16 mi = min(mi, t); 17 num++; 18 } 19 else 20 g1 = t; 21 } 22 g2 = g2-mx-mi; 23 printf(\u0026#34;%d\\n\u0026#34;, (int)round((g1+1.0*g2/num)*0.5)); 24 } 25 return 0; 26} ","permalink":"https://blog.lordash.de/posts/solution/patb-1077-%E4%BA%92%E8%AF%84%E6%88%90%E7%BB%A9%E8%AE%A1%E7%AE%97/","summary":"互评成绩计算 (PATB-1077) 题面 在浙大的计算机专业课中，经常有互评分组报告这个环节。一个组上台介绍自己的工作，其他组在台下为其表现评分。最后这个组的互评成","title":"PATB-1077 互评成绩计算"},{"content":"Wifi密码 (PATB-1076) 题面 下面是微博上流传的一张照片：“各位亲爱的同学们，鉴于大家有时需要使用 wifi，又怕耽误亲们的学习，现将 wifi 密码设置为下列数学题答案：A-1；B-2；C-3；D-4；请同学们自己作答，每两日一换。谢谢合作！！~”—— 老师们为了促进学生学习也是拼了…… 本题就要求你写程序把一系列题目的答案按照卷子上给出的对应关系翻译成 wifi 的密码。这里简单假设每道选择题都有 4 个选项，有且只有 1 个正确答案。\n输入 输入第一行给出一个正整数 N（≤ 100），随后 N 行，每行按照 编号-答案 的格式给出一道题的 4 个选项，T 表示正确选项，F 表示错误选项。选项间用空格分隔。\n输出 在一行中输出 wifi 密码。\n样例输入 18 2A-T B-F C-F D-F 3C-T B-F A-F D-F 4A-F D-F C-F B-T 5B-T A-F C-F D-F 6B-F D-T A-F C-F 7A-T C-F B-F D-F 8D-T B-F C-F A-F 9C-T A-F B-F D-F 样例输出 113224143 提示 无\n思路 代码 1int main() 2{ 3 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 4 5 for(int i=0; i\u0026lt;n; i++) 6 { 7 for(int j=0; j\u0026lt;4; j++) 8 { 9 char a, b; 10 scanf(\u0026#34; %c-%c\u0026#34;, \u0026amp;a, \u0026amp;b); 11 if(b==\u0026#39;T\u0026#39;) 12 printf(\u0026#34;%d\u0026#34;, a-\u0026#39;A\u0026#39;+1); 13 } 14 } 15 return 0; 16} ","permalink":"https://blog.lordash.de/posts/solution/patb-1076-wifi%E5%AF%86%E7%A0%81/","summary":"Wifi密码 (PATB-1076) 题面 下面是微博上流传的一张照片：“各位亲爱的同学们，鉴于大家有时需要使用 wifi，又怕耽误亲们的学习，现将 wifi 密码设置为下列数学","title":"PATB-1076 Wifi密码"},{"content":"链表元素分类 (PATB-1075) 题面 给定一个单链表，请编写程序将链表元素进行分类排列，使得所有负值元素都排在非负值元素的前面，而 [0, K] 区间内的元素都排在大于 K 的元素前面。但每一类内部元素的顺序是不能改变的。例如：给定链表为 18→7→-4→0→5→-6→10→11→-2，K 为 10，则输出应该为 -4→-6→-2→7→0→5→10→18→11。\n输入 每个输入包含一个测试用例。每个测试用例第 1 行给出：第 1 个结点的地址；结点总个数，即正整数N (≤10^5)；以及正整数K (≤10^3)。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。\n接下来有 N 行，每行格式为：\n1Address Data Next 其中 Address 是结点地址；Data 是该结点保存的数据，为 [−10^5,10^5] 区间内的整数；Next 是下一结点的地址。题目保证给出的链表不为空。\n输出 对每个测试用例，按链表从头到尾的顺序输出重排后的结果链表，其上每个结点占一行，格式与输入相同。\n样例输入 100100 9 10 223333 10 27777 300000 0 99999 400100 18 12309 568237 -6 23333 633218 -4 00000 748652 -2 -1 899999 5 68237 927777 11 48652 1012309 7 33218 样例输出 133218 -4 68237 268237 -6 48652 348652 -2 12309 412309 7 00000 500000 0 99999 699999 5 23333 723333 10 00100 800100 18 27777 927777 11 -1 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2int val[mxn], nxt[mxn]; 3int tmp[mxn], ans[mxn], vis[mxn]; 4 5int main() 6{ 7 int s, n, k, x; 8 scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;s, \u0026amp;n, \u0026amp;k); 9 10 for (int i=0; i\u0026lt;n; i++) 11 { 12 scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 13 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;val[x], \u0026amp;nxt[x]); 14 } 15 16 int cnt=0, num=0; 17 for (int t=s; t!=-1; t=nxt[t]) { 18 tmp[cnt++] = t; 19 } 20 21 for (int i=0; i\u0026lt;cnt; i++) 22 { 23 if(val[tmp[i]] \u0026lt; 0) 24 { 25 ans[num++] = tmp[i]; 26 vis[tmp[i]]++; 27 } 28 } 29 for (int i=0; i\u0026lt;cnt; i++) 30 { 31 if(vis[tmp[i]]==0 \u0026amp;\u0026amp; val[tmp[i]] \u0026lt;= k) 32 { 33 ans[num++] = tmp[i]; 34 vis[tmp[i]]++; 35 } 36 } 37 for (int i=0; i\u0026lt;cnt; i++) 38 { 39 if(vis[tmp[i]]==0) 40 ans[num++] = tmp[i]; 41 } 42 43 for (int i=0; i\u0026lt;num-1; i++) 44 printf(\u0026#34;%05d %d %05d\\n\u0026#34;, ans[i], val[ans[i]], ans[i+1]); 45 46 printf(\u0026#34;%05d %d -1\u0026#34;, ans[num-1], val[ans[num-1]]); 47 return 0; 48} ","permalink":"https://blog.lordash.de/posts/solution/patb-1075-%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0%E5%88%86%E7%B1%BB/","summary":"链表元素分类 (PATB-1075) 题面 给定一个单链表，请编写程序将链表元素进行分类排列，使得所有负值元素都排在非负值元素的前面，而 [0, K] 区间内的元素都排在大于 K 的","title":"PATB-1075 链表元素分类"},{"content":"宇宙无敌加法器 (PATB-1074) 题面 地球人习惯使用十进制数，并且默认一个数字的每一位都是十进制的。而在 PAT 星人开挂的世界里，每个数字的每一位都是不同进制的，这种神奇的数字称为“PAT数”。每个 PAT 星人都必须熟记各位数字的进制表，例如“……0527”就表示最低位是 7 进制数、第 2 位是 2 进制数、第 3 位是 5 进制数、第 4 位是 10 进制数，等等。每一位的进制 d 或者是 0（表示十进制）、或者是 [2，9] 区间内的整数。理论上这个进制表应该包含无穷多位数字，但从实际应用出发，PAT 星人通常只需要记住前 20 位就够用了，以后各位默认为 10 进制。\n在这样的数字系统中，即使是简单的加法运算也变得不简单。例如对应进制表“0527”，该如何计算“6203 + 415”呢？我们得首先计算最低位：3 + 5 = 8；因为最低位是 7 进制的，所以我们得到 1 和 1 个进位。第 2 位是：0 + 1 + 1（进位）= 2；因为此位是 2 进制的，所以我们得到 0 和 1 个进位。第 3 位是：2 + 4 + 1（进位）= 7；因为此位是 5 进制的，所以我们得到 2 和 1 个进位。第 4 位是：6 + 1（进位）= 7；因为此位是 10 进制的，所以我们就得到 7。最后我们得到：6203 + 415 = 7201。\n输入 输入首先在第一行给出一个 N 位的进制表（0 \u0026lt; N ≤ 20），以回车结束。 随后两行，每行给出一个不超过 N 位的非负的 PAT 数。\n输出 在一行中输出两个 PAT 数之和。\n样例输入 130527 206203 3415 样例输出 17201 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2char s[mxn], a[mxn], b[mxn], ans[mxn]; 3 4void init(char *s, int n) 5{ 6 int m = strlen(s); 7 for(int i=0; i+i\u0026lt;m; i++) 8 swap(s[i], s[m-i-1]); 9 for(int i=m; i\u0026lt;n; i++) 10 s[i] = \u0026#39;0\u0026#39;; 11 s[n] = \u0026#39;\\0\u0026#39;; 12} 13 14int main() 15{ 16 scanf(\u0026#34;%s %s %s\u0026#34;, s, a ,b); 17 int sl = strlen(s); 18 init(s, sl); init(a, sl); init(b, sl); 19 20 int i=0, p=0; 21 for(; i\u0026lt;sl; i++) 22 { 23 s[i] += s[i]-\u0026#39;0\u0026#39; ? 0 : 10; 24 ans[i] = (a[i]-\u0026#39;0\u0026#39; + b[i]-\u0026#39;0\u0026#39; + p) % (s[i]-\u0026#39;0\u0026#39;) +\u0026#39;0\u0026#39;; 25 p = (a[i]-\u0026#39;0\u0026#39; + b[i]-\u0026#39;0\u0026#39; + p) / (s[i]-\u0026#39;0\u0026#39;); 26 } 27 if(p) ans[i++] = \u0026#39;1\u0026#39;; 28 29 int f = 1; 30 while(i--) 31 { 32 if(f \u0026amp;\u0026amp; ans[i] == \u0026#39;0\u0026#39;) 33 continue; 34 f = 0; 35 printf(\u0026#34;%c\u0026#34;, ans[i]); 36 } 37 if(f) printf(\u0026#34;0\u0026#34;); 38 return 0; 39} ","permalink":"https://blog.lordash.de/posts/solution/patb-1074-%E5%AE%87%E5%AE%99%E6%97%A0%E6%95%8C%E5%8A%A0%E6%B3%95%E5%99%A8/","summary":"宇宙无敌加法器 (PATB-1074) 题面 地球人习惯使用十进制数，并且默认一个数字的每一位都是十进制的。而在 PAT 星人开挂的世界里，每个数字的每一位都是不同进制的，这","title":"PATB-1074 宇宙无敌加法器"},{"content":"多选题常见计分法 (PATB-1073) 题面 批改多选题是比较麻烦的事情，有很多不同的计分方法。有一种最常见的计分方法是：如果考生选择了部分正确选项，并且没有选择任何错误选项，则得到 50% 分数；如果考生选择了任何一个错误的选项，则不能得分。本题就请你写个程序帮助老师批改多选题，并且指出哪道题的哪个选项错的人最多。\n输入 输入在第一行给出两个正整数 N（≤1000）和 M（≤100），分别是学生人数和多选题的个数。随后 M 行，每行顺次给出一道题的满分值（不超过 5 的正整数）、选项个数（不少于 2 且不超过 5 的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母 a 开始顺次排列。各项间以 1 个空格分隔。最后 N 行，每行给出一个学生的答题情况，其每题答案格式为 (选中的选项个数 选项1 ……)，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。\n输出 按照输入的顺序给出每个学生的得分，每个分数占一行，输出小数点后 1 位。最后输出错得最多的题目选项的信息，格式为：错误次数 题目编号（题目按照输入的顺序从1开始编号）-选项号。如果有并列，则每行一个选项，按题目编号递增顺序输出；再并列则按选项号递增顺序输出。行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出 Too simple。\n样例输入1 13 4 23 4 2 a c 32 5 1 b 45 3 2 b c 51 5 4 a b d e 6(2 a c) (3 b d e) (2 a c) (3 a b e) 7(2 a c) (1 b) (2 a b) (4 a b d e) 8(2 b d) (1 e) (1 c) (4 a b c d) 样例输出1 13.5 26.0 32.5 42 2-e 52 3-a 62 3-b 样例输入2 12 2 23 4 2 a c 32 5 1 b 4(2 a c) (1 b) 5(2 a c) (1 b) 样例输出2 15.0 25.0 3Too simple 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2struct P { 3 DB s; 4 int t; 5}a[mxn]; 6 7int p[] = {1, 2, 4, 8, 16}; 8int err[mxn][5]; 9 10int main() 11{ 12 int n, m; 13 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 14 15 int x; char ch; 16 for(int i=1; i\u0026lt;=m; i++) 17 { 18 scanf(\u0026#34;%lf %*d %d\u0026#34;, \u0026amp;a[i].s, \u0026amp;x); 19 for(int j=0; j\u0026lt;x; j++) 20 { 21 scanf(\u0026#34; %c\u0026#34;, \u0026amp;ch); 22 a[i].t += p[ch-\u0026#39;a\u0026#39;]; 23 } 24 } 25 getchar(); 26 for(int i=0; i\u0026lt;n; i++) 27 { 28 DB sum=0; int ans=0, num=0; 29 while(scanf(\u0026#34;%c\u0026#34;, \u0026amp;ch) \u0026amp;\u0026amp; ch != \u0026#39;\\n\u0026#39;) 30 { 31 if(ch == \u0026#39;)\u0026#39;) 32 { 33 num++; 34 if(ans==a[num].t) 35 sum += a[num].s; 36 else if((ans | a[num].t)==a[num].t) 37 sum += a[num].s * 0.5; 38 39 for(int j=0; j\u0026lt;5; j++) 40 if(((ans ^ a[num].t) \u0026amp; p[j]) == p[j]) 41 err[num][j]++; 42 43 ans = 0; 44 } 45 if(isalpha(ch)) ans += p[ch-\u0026#39;a\u0026#39;]; 46 } 47 printf(\u0026#34;%.1lf\\n\u0026#34;, sum); 48 } 49 50 int mx = 0; 51 for(int i=1; i\u0026lt;=m; i++) 52 for(int j=0; j\u0026lt;5; j++) 53 if(mx \u0026lt; err[i][j]) mx = err[i][j]; 54 55 if(mx == 0) 56 { 57 printf(\u0026#34;Too simple\\n\u0026#34;); 58 return 0; 59 } 60 61 for(int i=1; i\u0026lt;=m; i++) 62 for(int j=0; j\u0026lt;5; j++) 63 if(mx == err[i][j]) 64 printf(\u0026#34;%d %d-%c\\n\u0026#34;, mx, i, j+\u0026#39;a\u0026#39;); 65 66 return 0; 67} ","permalink":"https://blog.lordash.de/posts/solution/patb-1073-%E5%A4%9A%E9%80%89%E9%A2%98%E5%B8%B8%E8%A7%81%E8%AE%A1%E5%88%86%E6%B3%95/","summary":"多选题常见计分法 (PATB-1073) 题面 批改多选题是比较麻烦的事情，有很多不同的计分方法。有一种最常见的计分方法是：如果考生选择了部分正确选项，并且没有选择任","title":"PATB-1073 多选题常见计分法"},{"content":"开学寄语 (PATB-1072) 题面 下图是上海某校的新学期开学寄语：天将降大任于斯人也，必先删其微博，卸其 QQ，封其电脑，夺其手机，收其 ipad，断其 wifi，使其百无聊赖，然后，净面、理发、整衣，然后思过、读书、锻炼、明智、开悟、精进。而后必成大器也！\n本题要求你写个程序帮助这所学校的老师检查所有学生的物品，以助其成大器。\n输入 输入第一行给出两个正整数 N（≤ 1000）和 M（≤ 6），分别是学生人数和需要被查缴的物品种类数。第二行给出 M 个需要被查缴的物品编号，其中编号为 4 位数字。随后 N 行，每行给出一位学生的姓名缩写（由 1-4 个大写英文字母组成）、个人物品数量 K（0 ≤ K ≤ 10）、以及 K 个物品的编号。\n输出 顺次检查每个学生携带的物品，如果有需要被查缴的物品存在，则按以下格式输出该生的信息和其需要被查缴的物品的信息（注意行末不得有多余空格）：\n1姓名缩写: 物品编号1 物品编号2 …… 最后一行输出存在问题的学生的总人数和被查缴物品的总数。\n样例输入 14 2 22333 6666 3CYLL 3 1234 2345 3456 4U 4 9966 6666 8888 6666 5GG 2 2333 7777 6JJ 3 0012 6666 2333 样例输出 1U: 6666 6666 2GG: 2333 3JJ: 6666 2333 43 5 提示 无\n思路 代码 1const int mxn = 1e4 + 5; 2int a[mxn]; 3 4int main() 5{ 6 int n, m; 7 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 8 9 for(int i=0; i\u0026lt;m; i++) 10 { 11 int x; scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 12 a[x]++; 13 } 14 15 int ans1=0, ans2=0; char t[5]; 16 for(int i=0; i\u0026lt;n; i++) 17 { 18 int num, x, f = 1; 19 scanf(\u0026#34;%s %d\u0026#34;, t, \u0026amp;num); 20 while(num--) 21 { 22 scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 23 if(a[x]) 24 { 25 if(f){ 26 printf(\u0026#34;%s:\u0026#34;, t); 27 ans1++; 28 f = 0; 29 } 30 printf(\u0026#34; %04d\u0026#34;, x); 31 ans2++; 32 } 33 } 34 if(f == 0) printf(\u0026#34;\\n\u0026#34;); 35 } 36 printf(\u0026#34;%d %d\\n\u0026#34;, ans1, ans2); 37 38 return 0; 39} ","permalink":"https://blog.lordash.de/posts/solution/patb-1072-%E5%BC%80%E5%AD%A6%E5%AF%84%E8%AF%AD/","summary":"开学寄语 (PATB-1072) 题面 下图是上海某校的新学期开学寄语：天将降大任于斯人也，必先删其微博，卸其 QQ，封其电脑，夺其手机，收其 ipad，断其 wifi，使","title":"PATB-1072 开学寄语"},{"content":"小赌怡情 (PATB-1071) 题面 常言道“小赌怡情”。这是一个很简单的小游戏：首先由计算机给出第一个整数；然后玩家下注赌第二个整数将会比第一个数大还是小；玩家下注 t 个筹码后，计算机给出第二个数。若玩家猜对了，则系统奖励玩家 t 个筹码；否则扣除玩家 t 个筹码。\n注意：玩家下注的筹码数不能超过自己帐户上拥有的筹码数。当玩家输光了全部筹码后，游戏就结束。\n输入 输入在第一行给出 2 个正整数 T 和 K（≤ 100），分别是系统在初始状态下赠送给玩家的筹码数、以及需要处理的游戏次数。随后 K 行，每行对应一次游戏，顺序给出 4 个数字：\n1n1 b t n2 其中 n1 和 n2 是计算机先后给出的两个[0, 9]内的整数，保证两个数字不相等。b 为 0 表示玩家赌小，为 1 表示玩家赌大。t 表示玩家下注的筹码数，保证在整型范围内。\n输出 对每一次游戏，根据下列情况对应输出（其中 t 是玩家下注量，x 是玩家当前持有的筹码量）：\n玩家赢，输出 Win t! Total = x.； 玩家输，输出 Lose t. Total = x.； 玩家下注超过持有的筹码量，输出 Not enough tokens. Total = x.； 玩家输光后，输出 Game Over. 并结束程序。 样例输入1 1100 4 28 0 100 2 33 1 50 1 45 1 200 6 57 0 200 8 样例输出 1Win 100! Total = 200. 2Lose 50. Total = 150. 3Not enough tokens. Total = 150. 4Not enough tokens. Total = 150. 样例输入2 1100 4 28 0 100 2 33 1 200 1 45 1 200 6 57 0 200 8 样例输出 1Win 100! Total = 200. 2Lose 200. Total = 0. 3Game Over. 提示 无\n思路 代码 1int main() 2{ 3 int sum, n; 4 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;sum, \u0026amp;n); 5 6 for(int i=0; i\u0026lt;n; i++) 7 { 8 int n1, b, t, n2; 9 scanf(\u0026#34;%d %d %d %d\u0026#34;, \u0026amp;n1, \u0026amp;b, \u0026amp;t, \u0026amp;n2); 10 if(t \u0026gt; sum) 11 { 12 printf(\u0026#34;Not enough tokens. Total = %d.\\n\u0026#34;, sum); 13 continue; 14 } 15 if(b == (n1\u0026lt;n2)) 16 { 17 sum += t; 18 printf(\u0026#34;Win %d! Total = %d.\\n\u0026#34;, t, sum); 19 } 20 else 21 { 22 sum -= t; 23 printf(\u0026#34;Lose %d. Total = %d.\\n\u0026#34;, t, sum); 24 } 25 if(sum == 0) 26 { 27 printf(\u0026#34;Game Over.\\n\u0026#34;); 28 break; 29 } 30 } 31 return 0; 32} ","permalink":"https://blog.lordash.de/posts/solution/patb-1071-%E5%B0%8F%E8%B5%8C%E6%80%A1%E6%83%85/","summary":"小赌怡情 (PATB-1071) 题面 常言道“小赌怡情”。这是一个很简单的小游戏：首先由计算机给出第一个整数；然后玩家下注赌第二个整数将会比第一个数大还是小；玩家下","title":"PATB-1071 小赌怡情"},{"content":"结绳 (PATB-1070) 题面 给定一段一段的绳子，你需要把它们串成一条绳。每次串连的时候，是把两段绳子对折，再如下图所示套接在一起。这样得到的绳子又被当成是另一段绳子，可以再次对折去跟另一段绳子串连。每次串连后，原来两段绳子的长度就会减半。\n给定 N 段绳子的长度，你需要找出它们能串成的绳子的最大长度。\n输入 每个输入包含 1 个测试用例。每个测试用例第 1 行给出正整数 N (2≤N≤10^4)；第 2 行给出 N 个正整数，即原始绳段的长度，数字间以空格分隔。所有整数都不超过10^4。\n输出 在一行中输出能够串成的绳子的最大长度。结果向下取整，即取为不超过最大长度的最近整数。\n样例输入 18 210 15 12 3 4 13 1 15 样例输出 114 提示 无\n思路 代码 1const int mxn = 1e4 + 5; 2DB a[mxn]; 3 4int main() 5{ 6 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 7 8 for(int i=0; i\u0026lt;n; i++) 9 scanf(\u0026#34;%lf\u0026#34;, \u0026amp;a[i]); 10 sort(a, a+n); 11 12 DB sum = a[0]; 13 for(int i=1; i\u0026lt;n; i++) 14 sum = sum/2 + a[i]/2; 15 printf(\u0026#34;%d\\n\u0026#34;, (int)sum); 16 17 return 0; 18} ","permalink":"https://blog.lordash.de/posts/solution/patb-1070-%E7%BB%93%E7%BB%B3/","summary":"结绳 (PATB-1070) 题面 给定一段一段的绳子，你需要把它们串成一条绳。每次串连的时候，是把两段绳子对折，再如下图所示套接在一起。这样得到的绳子又被当成是另一","title":"PATB-1070 结绳"},{"content":"微博转发抽奖 (PATB-1069) 题面 小明 PAT 考了满分，高兴之余决定发起微博转发抽奖活动，从转发的网友中按顺序每隔 N 个人就发出一个红包。请你编写程序帮助他确定中奖名单。\n输入 输入第一行给出三个正整数 M（≤ 1000）、N 和 S，分别是转发的总量、小明决定的中奖间隔、以及第一位中奖者的序号（编号从 1 开始）。随后 M 行，顺序给出转发微博的网友的昵称（不超过 20 个字符、不包含空格回车的非空字符串）。\n注意：可能有人转发多次，但不能中奖多次。所以如果处于当前中奖位置的网友已经中过奖，则跳过他顺次取下一位。\n输出 按照输入的顺序输出中奖名单，每个昵称占一行。如果没有人中奖，则输出 Keep going...。\n样例输入1 19 3 2 2Imgonnawin! 3PickMe 4PickMeMeMeee 5LookHere 6Imgonnawin! 7TryAgainAgain 8TryAgainAgain 9Imgonnawin! 10TryAgainAgain 样例输出1 1PickMe 2Imgonnawin! 3TryAgainAgain 样例输入2 12 3 5 2Imgonnawin! 3PickMe 样例输出2 1Keep going... 提示 无\n思路 代码 1ULL bkdr(char* s) 2{ 3 ULL seed = 131, h = 0; 4 while (*s) 5 h = h * seed + (*s++); 6 return h; 7} 8 9int main() 10{ 11 int m, n, s; 12 scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;m, \u0026amp;n, \u0026amp;s); 13 14 map\u0026lt;ULL, int\u0026gt; mmp; 15 int now=0, num=0; char t[25]; 16 17 for(int i=1; i\u0026lt;=m; i++) 18 { 19 scanf(\u0026#34;%s\u0026#34;, t); now++; 20 if(now\u0026gt;=s \u0026amp;\u0026amp; (now-s)%n==0) 21 { 22 int x = bkdr(t); 23 if(mmp.count(x) == 0) 24 { 25 printf(\u0026#34;%s\\n\u0026#34;, t); 26 num++, mmp[x]++; 27 } 28 else 29 now--; 30 } 31 } 32 if(num == 0) printf(\u0026#34;Keep going...\\n\u0026#34;); 33 34 return 0; 35} ","permalink":"https://blog.lordash.de/posts/solution/patb-1069-%E5%BE%AE%E5%8D%9A%E8%BD%AC%E5%8F%91%E6%8A%BD%E5%A5%96/","summary":"微博转发抽奖 (PATB-1069) 题面 小明 PAT 考了满分，高兴之余决定发起微博转发抽奖活动，从转发的网友中按顺序每隔 N 个人就发出一个红包。请你编写程序帮助他确定中奖","title":"PATB-1069 微博转发抽奖"},{"content":"万绿丛中一点红 (PATB-1068) 题面 对于计算机而言，颜色不过是像素点对应的一个 24 位的数值。现给定一幅分辨率为 M×N 的画，要求你找出万绿丛中的一点红，即有独一无二颜色的那个像素点，并且该点的颜色与其周围 8 个相邻像素的颜色差充分大。\n输入 输入第一行给出三个正整数，分别是 M 和 N（≤ 1000），即图像的分辨率；以及 TOL，是所求像素点与相邻点的颜色差阈值，色差超过 TOL 的点才被考虑。随后 N 行，每行给出 M 个像素的颜色值，范围在 [0,2^24) 内。所有同行数字间用空格或 TAB 分开。\n输出 在一行中按照 (x, y): color 的格式输出所求像素点的位置以及颜色值，其中位置 x 和 y 分别是该像素在图像矩阵中的列、行编号（从 1 开始编号）。如果这样的点不唯一，则输出 Not Unique；如果这样的点不存在，则输出 Not Exist。\n样例输入1 18 6 200 20 0 0 0 0 0 0 0 365280 65280 65280 16711479 65280 65280 65280 65280 416711479 65280 65280 65280 16711680 65280 65280 65280 565280 65280 65280 65280 65280 65280 165280 165280 665280 65280 16777015 65280 65280 165280 65480 165280 716777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215 样例输出1 1(5, 3): 16711680 样例输入2 14 5 2 20 0 0 0 30 0 3 0 40 0 0 0 50 5 0 0 60 0 0 0 样例输出2 1Not Unique 样例输入3 13 3 5 21 2 3 33 4 5 45 6 7 样例输出3 1Not Exist 提示 无\n思路 代码 1const int mxn = 1e3 + 5; 2int dir[][2] = { 3 {-1,-1}, {-1, 0}, {-1, 1}, 4 { 0,-1}, { 0, 1}, 5 { 1,-1}, { 1, 0}, { 1, 1}, 6}; 7int n, m, tol, a[mxn][mxn]; 8 9bool ok(int x, int y) 10{ 11 for(int i=0; i\u0026lt;8; i++) 12 { 13 int tx = x+dir[i][0]; 14 int ty = y+dir[i][1]; 15 if(tx \u0026lt; 0 || tx \u0026gt;= n) continue; 16 if(ty \u0026lt; 0 || ty \u0026gt;= m) continue; 17 if(Abs(a[x][y] - a[tx][ty]) \u0026lt;= tol) 18 return 0; 19 } 20 return 1; 21} 22 23int main() 24{ 25 scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;m, \u0026amp;n, \u0026amp;tol); 26 map\u0026lt;int, int\u0026gt; mmp; 27 28 for(int i=0; i\u0026lt;n; i++) 29 { 30 for(int j=0; j\u0026lt;m; j++) 31 { 32 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i][j]); 33 mmp[a[i][j]]++; 34 } 35 } 36 37 int di, dj, num = 0; 38 for(int i=0; i\u0026lt;n; i++) 39 { 40 for(int j=0; j\u0026lt;m; j++) 41 { 42 if(ok(i, j) \u0026amp;\u0026amp; mmp[a[i][j]]==1){ 43 num++; 44 if(num \u0026gt; 1) break; 45 di = i, dj = j; 46 } 47 } 48 if(num \u0026gt; 1) break; 49 } 50 51 if(num==0) 52 printf(\u0026#34;Not Exist\\n\u0026#34;); 53 else if(num==1) 54 printf(\u0026#34;(%d, %d): %d\\n\u0026#34;, dj+1, di+1, a[di][dj]); 55 else 56 printf(\u0026#34;Not Unique\\n\u0026#34;); 57 58 return 0; 59} ","permalink":"https://blog.lordash.de/posts/solution/patb-1068-%E4%B8%87%E7%BB%BF%E4%B8%9B%E4%B8%AD%E4%B8%80%E7%82%B9%E7%BA%A2/","summary":"万绿丛中一点红 (PATB-1068) 题面 对于计算机而言，颜色不过是像素点对应的一个 24 位的数值。现给定一幅分辨率为 M×N 的画，要求你找出万绿丛中的一点红，即有独一","title":"PATB-1068 万绿丛中一点红"},{"content":"试密码 (PATB-1067) 题面 当你试图登录某个系统却忘了密码时，系统一般只会允许你尝试有限多次，当超出允许次数时，账号就会被锁死。本题就请你实现这个小功能。\n输入 输入在第一行给出一个密码（长度不超过 20 的、不包含空格、Tab、回车的非空字符串）和一个正整数 N（≤ 10），分别是正确的密码和系统允许尝试的次数。随后每行给出一个以回车结束的非空字符串，是用户尝试输入的密码。输入保证至少有一次尝试。当读到一行只有单个 # 字符时，输入结束，并且这一行不是用户的输入。\n输出 对用户的每个输入，如果是正确的密码且尝试次数不超过 N，则在一行中输出 Welcome in，并结束程序；如果是错误的，则在一行中按格式输出 Wrong password: 用户输入的错误密码；当错误尝试达到 N 次时，再输出一行 Account locked，并结束程序。\n样例输入1 1Correct%pw 3 2correct%pw 3Correct@PW 4whatisthepassword! 5Correct%pw 6# 样例输出1 1Wrong password: correct%pw 2Wrong password: Correct@PW 3Wrong password: whatisthepassword! 4Account locked 样例输入2 1cool@gplt 3 2coolman@gplt 3coollady@gplt 4cool@gplt 5try again 6# 样例输出2 1Wrong password: coolman@gplt 2Wrong password: coollady@gplt 3Welcome in 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2char s[mxn], t[mxn]; 3 4int main() 5{ 6 int n, num = 0; 7 scanf(\u0026#34;%s %d%*c\u0026#34;, s, \u0026amp;n); 8 9 while(1) 10 { 11 fgets(t, mxn, stdin); 12 t[strlen(t)-1] = \u0026#39;\\0\u0026#39;; 13 if(strcmp(t, \u0026#34;#\u0026#34;)==0) break; 14 if(++num \u0026gt; n) continue; 15 if(strcmp(s, t)==0) 16 { 17 printf(\u0026#34;Welcome in\\n\u0026#34;); 18 break; 19 } 20 else 21 { 22 printf(\u0026#34;Wrong password: %s\\n\u0026#34;, t); 23 if (num == n){ 24 printf(\u0026#34;Account locked\\n\u0026#34;); 25 break; 26 } 27 } 28 } 29 return 0; 30} ","permalink":"https://blog.lordash.de/posts/solution/patb-1067-%E8%AF%95%E5%AF%86%E7%A0%81/","summary":"试密码 (PATB-1067) 题面 当你试图登录某个系统却忘了密码时，系统一般只会允许你尝试有限多次，当超出允许次数时，账号就会被锁死。本题就请你实现这个小功能。 输","title":"PATB-1067 试密码"},{"content":"图像过滤 (PATB-1066) 题面 图像过滤是把图像中不重要的像素都染成背景色，使得重要部分被凸显出来。现给定一幅黑白图像，要求你将灰度值位于某指定区间内的所有像素颜色都用一种指定的颜色替换。\n输入 输入在第一行给出一幅图像的分辨率，即两个正整数 M 和 N（0\u0026lt;M,N≤500），另外是待过滤的灰度值区间端点 A 和 B（0≤A\u0026lt;B≤255）、以及指定的替换灰度值。随后 M 行，每行给出 N 个像素点的灰度值，其间以空格分隔。所有灰度值都在 [0, 255] 区间内。\n输出 输出按要求过滤后的图像。即输出 M 行，每行 N 个像素灰度值，每个灰度值占 3 位（例如黑色要显示为 000），其间以一个空格分隔。行首尾不得有多余空格。\n样例输入 13 5 100 150 0 23 189 254 101 119 3150 233 151 99 100 488 123 149 0 255 样例输出 1003 189 254 000 000 2000 233 151 099 000 3088 000 000 000 255 提示 无\n思路 代码 1int main() 2{ 3 int n, m, l, r, x; 4 scanf(\u0026#34;%d %d %d %d %d\u0026#34;, \u0026amp;n, \u0026amp;m, \u0026amp;l, \u0026amp;r, \u0026amp;x); 5 6 for(int i=0; i\u0026lt;n; i++) 7 { 8 for(int j=0; j\u0026lt;m; j++) 9 { 10 int t; scanf(\u0026#34;%d\u0026#34;, \u0026amp;t); 11 if(j) printf(\u0026#34; \u0026#34;); 12 if(l\u0026lt;=t \u0026amp;\u0026amp; t\u0026lt;=r) 13 printf(\u0026#34;%03d\u0026#34;, x); 14 else 15 printf(\u0026#34;%03d\u0026#34;, t); 16 } 17 printf(\u0026#34;\\n\u0026#34;); 18 } 19 return 0; 20} ","permalink":"https://blog.lordash.de/posts/solution/patb-1066-%E5%9B%BE%E5%83%8F%E8%BF%87%E6%BB%A4/","summary":"图像过滤 (PATB-1066) 题面 图像过滤是把图像中不重要的像素都染成背景色，使得重要部分被凸显出来。现给定一幅黑白图像，要求你将灰度值位于某指定区间内的所有像","title":"PATB-1066 图像过滤"},{"content":"单身狗 (PATB-1065) 题面 “单身狗”是中文对于单身人士的一种爱称。本题请你从上万人的大型派对中找出落单的客人，以便给予特殊关爱。\n输入 输入第一行给出一个正整数 N（≤ 50 000），是已知夫妻/伴侣的对数；随后 N 行，每行给出一对夫妻/伴侣——为方便起见，每人对应一个 ID 号，为 5 位数字（从 00000 到 99999），ID 间以空格分隔；之后给出一个正整数 M（≤ 10 000），为参加派对的总人数；随后一行给出这 M 位客人的 ID，以空格分隔。题目保证无人重婚或脚踩两条船。\n输出 首先第一行输出落单客人的总人数；随后第二行按 ID 递增顺序列出落单的客人。ID 间用 1 个空格分隔，行的首尾不得有多余空格。\n样例输入 13 211111 22222 333333 44444 455555 66666 57 655555 44444 10000 88888 22222 11111 23333 样例输出 15 210000 23333 44444 55555 88888 提示 无\n思路 代码 1const int mxn = 1e6 + 5; 2int a[mxn], b[mxn], ans[mxn], vis[mxn]; 3 4int main() 5{ 6 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 7 memset(a, -1, sizeof a); 8 9 for(int i=0; i\u0026lt;n; i++) 10 { 11 int x, y; 12 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;x, \u0026amp;y); 13 a[x] = y; 14 a[y] = x; 15 } 16 int m, num = 0; 17 scanf(\u0026#34;%d\u0026#34;, \u0026amp;m); 18 19 for(int i=0; i\u0026lt;m; i++) 20 { 21 scanf(\u0026#34;%d\u0026#34;, \u0026amp;b[i]); 22 vis[b[i]] = 1; 23 } 24 for(int i=0; i\u0026lt;m; i++) 25 { 26 if(a[b[i]]==-1 || vis[a[b[i]]] == 0) 27 ans[num++] = b[i]; 28 } 29 sort(ans, ans+num); 30 31 printf(\u0026#34;%d\\n\u0026#34;, num); 32 for(int i=0; i\u0026lt;num; i++) 33 { 34 if(i) printf(\u0026#34; \u0026#34;); 35 printf(\u0026#34;%05d\u0026#34;, ans[i]); 36 } 37 38 return 0; 39} ","permalink":"https://blog.lordash.de/posts/solution/patb-1065-%E5%8D%95%E8%BA%AB%E7%8B%97/","summary":"单身狗 (PATB-1065) 题面 “单身狗”是中文对于单身人士的一种爱称。本题请你从上万人的大型派对中找出落单的客人，以便给予特殊关爱。 输入 输入第一行给出一个正整","title":"PATB-1065 单身狗"},{"content":"朋友数 (PATB-1064) 题面 如果两个整数各位数字的和是一样的，则被称为是“朋友数”，而那个公共的和就是它们的“朋友证号”。例如 123 和 51 就是朋友数，因为 1+2+3 = 5+1 = 6，而 6 就是它们的朋友证号。给定一些整数，要求你统计一下它们中有多少个不同的朋友证号。\n输入 输入第一行给出正整数 N。随后一行给出 N 个正整数，数字间以空格分隔。题目保证所有数字小于 10^4。\n输出 首先第一行输出给定数字中不同的朋友证号的个数；随后一行按递增顺序输出这些朋友证号，数字间隔一个空格，且行末不得有多余空格。\n样例输入 18 2123 899 51 998 27 33 36 12 样例输出 14 23 6 9 26 提示 无\n思路 代码 1int a[40]; 2 3int main() 4{ 5 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 6 7 int num = 0; 8 for(int i=0; i\u0026lt;n; i++) 9 { 10 int x, sum = 0; 11 scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 12 while(x){ 13 sum += x % 10; 14 x /= 10; 15 } 16 if(a[sum] == 0){ 17 a[sum]++; 18 num++; 19 } 20 } 21 22 printf(\u0026#34;%d\\n\u0026#34;, num); 23 int nf = 0; 24 for(int i=0; i\u0026lt;40; i++){ 25 if(a[i]) 26 { 27 if(nf) 28 printf(\u0026#34; \u0026#34;); 29 else 30 nf = 1; 31 printf(\u0026#34;%d\u0026#34;, i); 32 } 33 } 34 35 return 0; 36} ","permalink":"https://blog.lordash.de/posts/solution/patb-1064-%E6%9C%8B%E5%8F%8B%E6%95%B0/","summary":"朋友数 (PATB-1064) 题面 如果两个整数各位数字的和是一样的，则被称为是“朋友数”，而那个公共的和就是它们的“朋友证号”。例如 123 和 51 就是朋友数，因为 1+2+3 = 5+1 =","title":"PATB-1064 朋友数"},{"content":"计算谱半径 (PATB-1063) 题面 在数学中，矩阵的“谱半径”是指其特征值的模集合的上确界。换言之，对于给定的 n 个复数空间的特征值 { a1+b1i,⋯,an+bni }，它们的模为实部与虚部的平方和的开方，而“谱半径”就是最大模。\n现在给定一些复数空间的特征值，请你计算并输出这些特征值的谱半径。\n输入 输入第一行给出正整数 N（≤ 10 000）是输入的特征值的个数。随后 N 行，每行给出 1 个特征值的实部和虚部，其间以空格分隔。注意：题目保证实部和虚部均为绝对值不超过 1000 的整数。\n输出 在一行中输出谱半径，四舍五入保留小数点后 2 位。\n样例输入 15 20 1 32 0 4-1 0 53 3 60 -3 样例输出 14.24 提示 无\n思路 代码 1#define Sq(u) ((u) * (u)) 2typedef double DB; 3 4int main() 5{ 6 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 7 8 DB mx = 0; 9 for(int i=0; i\u0026lt;n; i++) 10 { 11 int a, b; 12 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;a, \u0026amp;b); 13 mx = max(mx, sqrt(Sq(a)+Sq(b))); 14 } 15 printf(\u0026#34;%.2lf\\n\u0026#34;, mx); 16 return 0; 17} ","permalink":"https://blog.lordash.de/posts/solution/patb-1063-%E8%AE%A1%E7%AE%97%E8%B0%B1%E5%8D%8A%E5%BE%84/","summary":"计算谱半径 (PATB-1063) 题面 在数学中，矩阵的“谱半径”是指其特征值的模集合的上确界。换言之，对于给定的 n 个复数空间的特征值 { a1+b1i,⋯,an+bn","title":"PATB-1063 计算谱半径"},{"content":"最简分数 (PATB-1062) 题面 一个分数一般写成两个整数相除的形式：N/M，其中 M 不为0。最简分数是指分子和分母没有公约数的分数表示形式。\n现给定两个不相等的正分数 N1/M1 和 N2/M2，要求你按从小到大的顺序列出它们之间分母为 K 的最简分数。\n输入 输入在一行中按 N/M 的格式给出两个正分数，随后是一个正整数分母 K，其间以空格分隔。题目保证给出的所有整数都不超过 1000。\n输出 在一行中按 N/M 的格式列出两个给定分数之间分母为 K 的所有最简分数，按从小到大的顺序，其间以 1 个空格分隔。行首尾不得有多余空格。题目保证至少有 1 个输出。\n样例输入 17/18 13/20 12 样例输出 15/12 7/12 提示 无\n思路 代码 1int gcd(int a, int b){ 2 return b ? gcd(b, a%b) : a; 3} 4 5int main() 6{ 7 int n1, m1, n2, m2, k; 8 scanf(\u0026#34;%d/%d %d/%d %d\u0026#34;, \u0026amp;n1, \u0026amp;m1, \u0026amp;n2, \u0026amp;m2, \u0026amp;k); 9 10 int g = gcd(k, gcd(m1, m2)); 11 int l = m1 / g * m2 / g * k; 12 13 int b=l/m1*n1, e=l/m2*n2, nf=0; 14 if(b \u0026gt; e) swap(b, e); 15 16 for(int i=b+1; i\u0026lt;e; i++) 17 { 18 if(i%(l/k)==0 \u0026amp;\u0026amp; gcd(i/(l/k), k)==1) 19 { 20 if(nf) 21 printf(\u0026#34; \u0026#34;); 22 else 23 nf = 1; 24 printf(\u0026#34;%d/%d\u0026#34;, i/(l/k), k); 25 i += l/k-1; 26 } 27 } 28 return 0; 29} ","permalink":"https://blog.lordash.de/posts/solution/patb-1062-%E6%9C%80%E7%AE%80%E5%88%86%E6%95%B0/","summary":"最简分数 (PATB-1062) 题面 一个分数一般写成两个整数相除的形式：N/M，其中 M 不为0。最简分数是指分子和分母没有公约数的分数表示形式。 现给定两个不相等的正","title":"PATB-1062 最简分数"},{"content":"判断题 (PATB-1061) 题面 判断题的评判很简单，本题就要求你写个简单的程序帮助老师判题并统计学生们判断题的得分。\n输入 输入在第一行给出两个不超过 100 的正整数 N 和 M，分别是学生人数和判断题数量。第二行给出 M 个不超过 5 的正整数，是每道题的满分值。第三行给出每道题对应的正确答案，0 代表“非”，1 代表“是”。随后 N 行，每行给出一个学生的解答。数字间均以空格分隔。\n输出 按照输入的顺序输出每个学生的得分，每个分数占一行。\n样例输入 13 6 22 1 3 3 4 5 30 0 1 0 1 1 40 1 1 0 0 1 51 0 1 0 1 0 61 1 0 0 1 1 样例输出 113 211 312 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2int p[mxn], a[mxn]; 3 4int main() 5{ 6 int n, m; 7 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 8 9 for(int i=0; i\u0026lt;m; i++) 10 scanf(\u0026#34;%d\u0026#34;, \u0026amp;p[i]); 11 for(int i=0; i\u0026lt;m; i++) 12 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); 13 14 while(n--) 15 { 16 int ans = 0, sum = 0; 17 for(int i=0; i\u0026lt;m; i++){ 18 scanf(\u0026#34;%d\u0026#34;, \u0026amp;ans); 19 sum += (a[i]==ans) ? p[i] : 0; 20 } 21 printf(\u0026#34;%d\\n\u0026#34;, sum); 22 } 23 return 0; 24} ","permalink":"https://blog.lordash.de/posts/solution/patb-1061-%E5%88%A4%E6%96%AD%E9%A2%98/","summary":"判断题 (PATB-1061) 题面 判断题的评判很简单，本题就要求你写个简单的程序帮助老师判题并统计学生们判断题的得分。 输入 输入在第一行给出两个不超过 100 的正整数 N 和","title":"PATB-1061 判断题"},{"content":"爱丁顿数 (PATB-1060) 题面 英国天文学家爱丁顿很喜欢骑车。据说他为了炫耀自己的骑车功力，还定义了一个“爱丁顿数” E ，即满足有 E 天骑车超过 E 英里的最大整数 E。据说爱丁顿自己的 E 等于87。\n现给定某人 N 天的骑车距离，请你算出对应的爱丁顿数 E（≤N）。\n输入 输入第一行给出一个正整数 N (≤10^5)，即连续骑车的天数；第二行给出 N 个非负整数，代表每天的骑车距离。\n输出 在一行中给出 N 天的爱丁顿数。\n样例输入 110 26 7 6 9 3 10 8 2 7 8 样例输出 16 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2int a[mxn]; 3 4bool cmp(int a, int b) 5{ 6 return a\u0026gt;b; 7} 8 9int main() 10{ 11 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 12 13 for(int i=1; i\u0026lt;=n; i++) 14 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); 15 sort(a+1, a+n+1, cmp); 16 17 int ans = 0; 18 for(int i=1; i\u0026lt;=n; i++) 19 { 20 if(a[i] \u0026gt; i) 21 ans = max(ans, i); 22 } 23 printf(\u0026#34;%d\\n\u0026#34;, ans); 24 return 0; 25} ","permalink":"https://blog.lordash.de/posts/solution/patb-1060-%E7%88%B1%E4%B8%81%E9%A1%BF%E6%95%B0/","summary":"爱丁顿数 (PATB-1060) 题面 英国天文学家爱丁顿很喜欢骑车。据说他为了炫耀自己的骑车功力，还定义了一个“爱丁顿数” E ，即满足有 E 天骑车超过 E 英里的最大整数 E","title":"PATB-1060 爱丁顿数"},{"content":"C语言竞赛 (PATB-1059) 题面 C 语言竞赛是浙江大学计算机学院主持的一个欢乐的竞赛。既然竞赛主旨是为了好玩，颁奖规则也就制定得很滑稽：\n0、冠军将赢得一份“神秘大奖”（比如很巨大的一本学生研究论文集……）。 1、排名为素数的学生将赢得最好的奖品 —— 小黄人玩偶！ 2、其他人将得到巧克力。 给定比赛的最终排名以及一系列参赛者的 ID，你要给出这些参赛者应该获得的奖品。\n输入 输入第一行给出一个正整数 N（≤10^4），是参赛者人数。随后 N 行给出最终排名，每行按排名顺序给出一位参赛者的 ID（4 位数字组成）。接下来给出一个正整数 K 以及 K 个需要查询的 ID。\n输出 对每个要查询的 ID，在一行中输出 ID: 奖品，其中奖品或者是 Mystery Award（神秘大奖）、或者是 Minion（小黄人）、或者是 Chocolate（巧克力）。如果所查 ID 根本不在排名里，打印 Are you kidding?（耍我呢？）。如果该 ID 已经查过了（即奖品已经领过了），打印 ID: Checked（不能多吃多占）。\n样例输入 16 21111 36666 48888 51234 65555 70001 86 98888 100001 111111 122222 138888 142222 样例输出 18888: Minion 20001: Chocolate 31111: Mystery Award 42222: Are you kidding? 58888: Checked 62222: Are you kidding? 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2int a[mxn]; 3 4bool isPrime(int n) 5{ 6 if (n \u0026lt; 2) return 0; 7 if (n == 2 || n == 3) return 1; 8 if (n % 6 != 1 \u0026amp;\u0026amp; n % 6 != 5) return 0; 9 10 int m = sqrt(n); 11 for (int i = 5; i \u0026lt;= m; i += 6) 12 { 13 if (n % i == 0 || n % (i + 2) == 0) 14 return 0; 15 } 16 return 1; 17} 18 19int main() 20{ 21 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 22 23 memset(a, -1, sizeof a); 24 for(int i=1; i\u0026lt;=n; i++) 25 { 26 int x; scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 27 a[x] = i; 28 } 29 30 int m; scanf(\u0026#34;%d\u0026#34;, \u0026amp;m); 31 for(int i=0; i\u0026lt;m; i++) 32 { 33 int x; scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 34 printf(\u0026#34;%04d: \u0026#34;, x); 35 if(a[x] == -1){ 36 printf(\u0026#34;Are you kidding?\\n\u0026#34;); 37 continue; 38 } 39 if(a[x] == -2) 40 printf(\u0026#34;Checked\\n\u0026#34;); 41 else if(a[x] == 1) 42 printf(\u0026#34;Mystery Award\\n\u0026#34;); 43 else if(isPrime(a[x])) 44 printf(\u0026#34;Minion\\n\u0026#34;); 45 else 46 printf(\u0026#34;Chocolate\\n\u0026#34;); 47 48 a[x] = -2; 49 } 50 51 return 0; 52} ","permalink":"https://blog.lordash.de/posts/solution/patb-1059-c%E8%AF%AD%E8%A8%80%E7%AB%9E%E8%B5%9B/","summary":"C语言竞赛 (PATB-1059) 题面 C 语言竞赛是浙江大学计算机学院主持的一个欢乐的竞赛。既然竞赛主旨是为了好玩，颁奖规则也就制定得很滑稽： 0、冠军将赢得一份“神","title":"PATB-1059 C语言竞赛"},{"content":"选择题 (PATB-1058) 题面 批改多选题是比较麻烦的事情，本题就请你写个程序帮助老师批改多选题，并且指出哪道题错的人最多。\n输入 输入在第一行给出两个正整数 N（≤ 1000）和 M（≤ 100），分别是学生人数和多选题的个数。随后 M 行，每行顺次给出一道题的满分值（不超过 5 的正整数）、选项个数（不少于 2 且不超过 5 的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母 a 开始顺次排列。各项间以 1 个空格分隔。最后 N 行，每行给出一个学生的答题情况，其每题答案格式为 (选中的选项个数 选项1 ……)，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。\n输出 按照输入的顺序给出每个学生的得分，每个分数占一行。注意判题时只有选择全部正确才能得到该题的分数。最后一行输出错得最多的题目的错误次数和编号（题目按照输入的顺序从 1 开始编号）。如果有并列，则按编号递增顺序输出。数字间用空格分隔，行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出 Too simple。\n样例输入 13 4 23 4 2 a c 32 5 1 b 45 3 2 b c 51 5 4 a b d e 6(2 a c) (2 b d) (2 a c) (3 a b e) 7(2 a c) (1 b) (2 a b) (4 a b d e) 8(2 b d) (1 e) (2 b c) (4 a b c d) 样例输出 13 26 35 42 2 3 4 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2struct P { 3 int s, t; 4}a[mxn]; 5 6int p[] = {1, 2, 4, 8, 16}; 7int err[mxn]; 8 9int main() 10{ 11 int n, m; 12 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 13 14 int x; char ch; 15 for(int i=1; i\u0026lt;=m; i++) 16 { 17 scanf(\u0026#34;%d %*d %d\u0026#34;, \u0026amp;a[i].s, \u0026amp;x); 18 for(int j=0; j\u0026lt;x; j++) 19 { 20 scanf(\u0026#34; %c\u0026#34;, \u0026amp;ch); 21 a[i].t += p[ch-\u0026#39;a\u0026#39;]; 22 } 23 } 24 getchar(); 25 for(int i=0; i\u0026lt;n; i++) 26 { 27 int sum = 0, ans = 0, num = 0; 28 while(scanf(\u0026#34;%c\u0026#34;, \u0026amp;ch) \u0026amp;\u0026amp; ch != \u0026#39;\\n\u0026#39;) 29 { 30 if(ch == \u0026#39;)\u0026#39;) 31 { 32 if(ans==a[++num].t) 33 sum += a[num].s; 34 else 35 err[num]++; 36 ans = 0; 37 } 38 if(isalpha(ch)) ans += p[ch-\u0026#39;a\u0026#39;]; 39 } 40 printf(\u0026#34;%d\\n\u0026#34;, sum); 41 } 42 43 int mx = 0; 44 for(int i=1; i\u0026lt;=m; i++) 45 if(mx \u0026lt; err[i]) mx = err[i]; 46 47 if(mx == 0) 48 { 49 printf(\u0026#34;Too simple\\n\u0026#34;); 50 return 0; 51 } 52 printf(\u0026#34;%d\u0026#34;, mx); 53 for(int i=1; i\u0026lt;=m; i++) 54 if(mx == err[i]) printf(\u0026#34; %d\u0026#34;, i); 55 56 return 0; 57} ","permalink":"https://blog.lordash.de/posts/solution/patb-1058-%E9%80%89%E6%8B%A9%E9%A2%98/","summary":"选择题 (PATB-1058) 题面 批改多选题是比较麻烦的事情，本题就请你写个程序帮助老师批改多选题，并且指出哪道题错的人最多。 输入 输入在第一行给出两个正整数 N（≤","title":"PATB-1058 选择题"},{"content":"数零壹 (PATB-1057) 题面 给定一串长度不超过 10^5 的字符串，本题要求你将其中所有英文字母的序号（字母 a-z 对应序号 1-26，不分大小写）相加，得到整数 N，然后再分析一下 N 的二进制表示中有多少 0、多少 1。例如给定字符串 PAT (Basic)，其字母序号之和为：16+1+20+2+1+19+9+3=71，而 71 的二进制是 1000111，即有 3 个 0、4 个 1。\n输入 输入在一行中给出长度不超过 10^5、以回车结束的字符串。\n输出 在一行中先后输出 0 的个数和 1 的个数，其间以空格分隔。\n样例输入 1PAT (Basic) 样例输出 13 4 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2char s[mxn]; 3 4int main() 5{ 6 fgets(s, mxn, stdin); 7 int len = strlen(s); 8 9 LL sum = 0; 10 for(int i=0; i\u0026lt;len; i++) 11 sum += isalpha(s[i]) ? (tolower(s[i])-\u0026#39;a\u0026#39;+1) : 0; 12 13 int a=0, b=0; 14 while(sum){ 15 if(sum \u0026amp; 1) 16 b++; 17 else 18 a++; 19 sum \u0026gt;\u0026gt;= 1; 20 } 21 printf(\u0026#34;%d %d\\n\u0026#34;, a, b); 22 return 0; 23} ","permalink":"https://blog.lordash.de/posts/solution/patb-1057-%E6%95%B0%E9%9B%B6%E5%A3%B9/","summary":"数零壹 (PATB-1057) 题面 给定一串长度不超过 10^5 的字符串，本题要求你将其中所有英文字母的序号（字母 a-z 对应序号 1-26，不分大小写）相加，得到整数 N，然后再分","title":"PATB-1057 数零壹"},{"content":"组合数的和 (PATB-1056) 题面 给定 N 个非 0 的个位数字，用其中任意 2 个数字都可以组合成 1 个 2 位的数字。要求所有可能组合出来的 2 位数字的和。例如给定 2、5、8，则可以组合出：25、28、52、58、82、85，它们的和为330。\n输入 输入在一行中先给出 N（1 \u0026lt; N \u0026lt; 10），随后给出 N 个不同的非 0 个位数字。数字间以空格分隔。\n输出 输出所有可能组合出来的2位数字的和。\n样例输入 13 2 8 5 样例输出 1330 提示 无\n思路 代码 1int main() 2{ 3 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 4 5 int ans = 0, m; 6 for(int i=0; i\u0026lt;n; i++) 7 { 8 scanf(\u0026#34;%d\u0026#34;, \u0026amp;m); 9 ans += m * (n-1) * 11; 10 } 11 printf(\u0026#34;%d\\n\u0026#34;, ans); 12 return 0; 13} ","permalink":"https://blog.lordash.de/posts/solution/patb-1056-%E7%BB%84%E5%90%88%E6%95%B0%E7%9A%84%E5%92%8C/","summary":"组合数的和 (PATB-1056) 题面 给定 N 个非 0 的个位数字，用其中任意 2 个数字都可以组合成 1 个 2 位的数字。要求所有可能组合出来的 2 位数字的和。例如给定 2、5、8","title":"PATB-1056 组合数的和"},{"content":"集体照 (PATB-1055) 题面 拍集体照时队形很重要，这里对给定的 N 个人 K 排的队形设计排队规则如下：\n每排人数为 N/K（向下取整），多出来的人全部站在最后一排； 后排所有人的个子都不比前排任何人矮； 每排中最高者站中间（中间位置为 m/2+1，其中 m 为该排人数，除法向下取整）； 每排其他人以中间人为轴，按身高非增序，先右后左交替入队站在中间人的两侧（例如5人身高为190、188、186、175、170，则队形为175、188、190、186、170。这里假设你面对拍照者，所以你的左边是中间人的右边）； 若多人身高相同，则按名字的字典序升序排列。这里保证无重名。 现给定一组拍照人，请编写程序输出他们的队形。\n输入 每个输入包含 1 个测试用例。每个测试用例第 1 行给出两个正整数 N（≤10^4，总人数）和 K（≤10，总排数）。随后 N 行，每行给出一个人的名字（不包含空格、长度不超过 8 个英文字母）和身高（[30, 300] 区间内的整数）。\n输出 输出拍照的队形。即K排人名，其间以空格分隔，行末不得有多余空格。注意：假设你面对拍照者，后排的人输出在上方，前排输出在下方。\n样例输入 110 3 2Tom 188 3Mike 170 4Eva 168 5Tim 160 6Joe 190 7Ann 168 8Bob 175 9Nick 186 10Amy 160 11John 159 样例输出 1Bob Tom Joe Nick 2Ann Mike Eva 3Tim Amy John 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2struct P{ 3 char s[10]; 4 int t; 5}a[mxn]; 6 7int li[mxn]; 8 9bool cmp(P a, P b) 10{ 11 if(a.t == b.t) 12 return strcmp(a.s, b.s) \u0026lt; 0; 13 return a.t \u0026gt; b.t; 14} 15 16int main() 17{ 18 int n, k; 19 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;k); 20 21 for(int i=0; i\u0026lt;n; i++) 22 scanf(\u0026#34;%s %d\u0026#34;, a[i].s, \u0026amp;a[i].t); 23 sort(a, a+n, cmp); 24 25 int id = 0; 26 for(int i=0; i\u0026lt;k; i++) 27 { 28 int m = n / k, f = 1; 29 if(!i) m += n % k; 30 int now = m/2 + 1; 31 for(int j=1; j\u0026lt;=m; j++) 32 { 33 li[now] = id++; 34 f = -f; 35 now += f*j; 36 } 37 for(int j=1; j\u0026lt;=m; j++) 38 { 39 if(j\u0026gt;1) printf(\u0026#34; \u0026#34;); 40 printf(\u0026#34;%s\u0026#34;, a[li[j]].s); 41 } 42 printf(\u0026#34;\\n\u0026#34;); 43 } 44 return 0; 45} ","permalink":"https://blog.lordash.de/posts/solution/patb-1055-%E9%9B%86%E4%BD%93%E7%85%A7/","summary":"集体照 (PATB-1055) 题面 拍集体照时队形很重要，这里对给定的 N 个人 K 排的队形设计排队规则如下： 每排人数为 N/K（向下取整），多出来的人全部站在最后一排； 后","title":"PATB-1055 集体照"},{"content":"求平均值 (PATB-1054) 题面 本题的基本要求非常简单：给定 N 个实数，计算它们的平均值。但复杂的是有些输入数据可能是非法的。一个“合法”的输入是 [−1000,1000] 区间内的实数，并且最多精确到小数点后 2 位。当你计算平均值的时候，不能把那些非法的数据算在内。\n输入 输入第一行给出正整数 N（≤100）。随后一行给出 N 个实数，数字间以一个空格分隔。\n输出 对每个非法输入，在一行中输出 ERROR: X is not a legal number，其中 X 是输入。最后在一行中输出结果：The average of K numbers is Y，其中 K 是合法输入的个数，Y 是它们的平均值，精确到小数点后 2 位。如果平均值无法计算，则用 Undefined 替换 Y。如果 K 为 1，则输出 The average of 1 number is Y。\n样例输入1 17 25 -3.2 aaa 9999 2.3.4 7.123 2.35 样例输出1 1ERROR: aaa is not a legal number 2ERROR: 9999 is not a legal number 3ERROR: 2.3.4 is not a legal number 4ERROR: 7.123 is not a legal number 5The average of 3 numbers is 1.38 样例输入2 12 2aaa -9999 样例输出2 1ERROR: aaa is not a legal number 2ERROR: -9999 is not a legal number 3The average of 0 numbers is Undefined 提示 无\n思路 代码 1typedef double DB; 2const int mxn = 1e5 + 5; 3char s[mxn], t[mxn]; 4 5int main() 6{ 7 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 8 9 int num=0; DB sum=0, x; 10 for(int i=0; i\u0026lt;n; i++) 11 { 12 int f = 0; 13 scanf(\u0026#34;%s\u0026#34;, s); 14 if(sscanf(s, \u0026#34;%lf\u0026#34;, \u0026amp;x) == 0) 15 f = 1; 16 else 17 { 18 sprintf(t, \u0026#34;%.2lf\u0026#34;, x); 19 if(strlen(s)\u0026gt;strlen(t) || x\u0026lt;-1000 || x\u0026gt;1000) 20 f = 1; 21 else 22 sum += x, num++; 23 } 24 if(f) 25 printf(\u0026#34;ERROR: %s is not a legal number\\n\u0026#34;, s); 26 } 27 if(num\u0026gt;1) 28 printf(\u0026#34;The average of %d numbers is %.2lf\\n\u0026#34;, num, sum/num); 29 else if(num==1) 30 printf(\u0026#34;The average of 1 number is %.2lf\\n\u0026#34;, sum); 31 else 32 printf(\u0026#34;The average of 0 numbers is Undefined\\n\u0026#34;); 33 34 return 0; 35} ","permalink":"https://blog.lordash.de/posts/solution/patb-1054-%E6%B1%82%E5%B9%B3%E5%9D%87%E5%80%BC/","summary":"求平均值 (PATB-1054) 题面 本题的基本要求非常简单：给定 N 个实数，计算它们的平均值。但复杂的是有些输入数据可能是非法的。一个“合法”的输入是 [−1000,","title":"PATB-1054 求平均值"},{"content":"住房空置率 (PATB-1053) 题面 在不打扰居民的前提下，统计住房空置率的一种方法是根据每户用电量的连续变化规律进行判断。判断方法如下：\n在观察期内，若存在超过一半的日子用电量低于某给定的阈值 e，则该住房为“可能空置”； 若观察期超过某给定阈值 D 天，且满足上一个条件，则该住房为“空置”。 现给定某居民区的住户用电量数据，请你统计“可能空置”的比率和“空置”比率，即以上两种状态的住房占居民区住房总套数的百分比。\n输入 输入第一行给出正整数 N（≤1000），为居民区住房总套数；正实数 e，即低电量阈值；正整数 D，即观察期阈值。随后 N 行，每行按以下格式给出一套住房的用电量数据：\nK E1 E2 \u0026hellip; EK\n其中 K 为观察的天数，Ei 为第 i 天的用电量。\n输出 在一行中输出“可能空置”的比率和“空置”比率的百分比值，其间以一个空格分隔，保留小数点后 1 位。\n样例输入 15 0.5 10 26 0.3 0.4 0.5 0.2 0.8 0.6 310 0.0 0.1 0.2 0.3 0.0 0.8 0.6 0.7 0.0 0.5 45 0.4 0.3 0.5 0.1 0.7 511 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 611 2 2 2 1 1 0.1 1 0.1 0.1 0.1 0.1 样例输出 140.0% 20.0% 提示 样例解释：第2、3户为“可能空置”，第4户为“空置”，其他户不是空置。\n思路 代码 1int main() 2{ 3 int n, d; DB e; 4 scanf(\u0026#34;%d %lf %d\u0026#34;, \u0026amp;n, \u0026amp;e, \u0026amp;d); 5 6 int x=0, y=0; 7 for(int i=0; i\u0026lt;n; i++) 8 { 9 int m, num=0; 10 scanf(\u0026#34;%d\u0026#34;, \u0026amp;m); 11 for(int j=0; j\u0026lt;m; j++) 12 { 13 DB t; scanf(\u0026#34;%lf\u0026#34;, \u0026amp;t); 14 if(t\u0026lt;e) num++; 15 } 16 if(num*2\u0026gt;m) 17 if(m\u0026gt;d) y++; 18 else x++; 19 } 20 printf(\u0026#34;%.1lf%% %.1lf%%\\n\u0026#34;, 100.0*x/n, 100.0*y/n); 21 return 0; 22} ","permalink":"https://blog.lordash.de/posts/solution/patb-1053-%E4%BD%8F%E6%88%BF%E7%A9%BA%E7%BD%AE%E7%8E%87/","summary":"住房空置率 (PATB-1053) 题面 在不打扰居民的前提下，统计住房空置率的一种方法是根据每户用电量的连续变化规律进行判断。判断方法如下： 在观察期内，若存在超过一","title":"PATB-1053 住房空置率"},{"content":"卖个萌 (PATB-1052) 题面 萌萌哒表情符号通常由“手”、“眼”、“口”三个主要部分组成。简单起见，我们假设一个表情符号是按下列格式输出的：\n1[左手]([左眼][口][右眼])[右手] 现给出可选用的符号集合，请你按用户的要求输出表情。\n输入 输入首先在前三行顺序对应给出手、眼、口的可选符号集。每个符号括在一对方括号 []内。题目保证每个集合都至少有一个符号，并不超过 10 个符号；每个符号包含 1 到 4 个非空字符。\n之后一行给出一个正整数 K，为用户请求的个数。随后 K 行，每行给出一个用户的符号选择，顺序为左手、左眼、口、右眼、右手——这里只给出符号在相应集合中的序号（从 1 开始），数字间以空格分隔。\n输出 对每个用户请求，在一行中输出生成的表情。若用户选择的序号不存在，则输出 Are you kidding me? @\\/@。\n样例输入 1[╮][╭][o][~\\][/~] [\u0026lt;][\u0026gt;] 2 [╯][╰][^][-][=][\u0026gt;][\u0026lt;][@][⊙] 3[Д][▽][_][ε][^] ... 44 51 1 2 2 2 66 8 1 5 5 73 3 4 3 3 82 10 3 9 3 样例输出 1╮(╯▽╰)╭ 2\u0026lt;(@Д=)/~ 3o(^ε^)o 4Are you kidding me? @\\/@ 提示 无\n思路 代码 1const int mxn = 10 + 5; 2char a[mxn][20], b[mxn][20], c[mxn][20]; 3 4int main() 5{ 6 int an=0, bn=0, cn=0, ch; 7 while((ch = getchar()) != \u0026#39;\\n\u0026#39;) 8 { 9 if(ch == \u0026#39;[\u0026#39;) 10 scanf(\u0026#34;%[^]]\u0026#34;, a[++an]); 11 } 12 while((ch = getchar()) != \u0026#39;\\n\u0026#39;) 13 { 14 if(ch == \u0026#39;[\u0026#39;) 15 scanf(\u0026#34;%[^]]\u0026#34;, b[++bn]); 16 } 17 while((ch = getchar()) != \u0026#39;\\n\u0026#39;) 18 { 19 if(ch == \u0026#39;[\u0026#39;) 20 scanf(\u0026#34;%[^]]\u0026#34;, c[++cn]); 21 } 22 int k, t[5]; 23 scanf(\u0026#34;%d\u0026#34;, \u0026amp;k); 24 25 while(k--){ 26 for(int i=0; i\u0026lt;5; i++) 27 scanf(\u0026#34;%d\u0026#34;, \u0026amp;t[i]); 28 int f = 0; 29 if(t[0]\u0026lt;1 || t[0]\u0026gt;an) f = 1; 30 if(t[1]\u0026lt;1 || t[1]\u0026gt;bn) f = 1; 31 if(t[2]\u0026lt;1 || t[2]\u0026gt;cn) f = 1; 32 if(t[3]\u0026lt;1 || t[3]\u0026gt;bn) f = 1; 33 if(t[4]\u0026lt;1 || t[4]\u0026gt;an) f = 1; 34 if(f){ 35 printf(\u0026#34;Are you kidding me? @\\\\/@\\n\u0026#34;); 36 continue; 37 } 38 printf(\u0026#34;%s(%s%s%s)%s\\n\u0026#34;, a[t[0]], b[t[1]], c[t[2]], b[t[3]], a[t[4]]); 39 } 40 return 0; 41} ","permalink":"https://blog.lordash.de/posts/solution/patb-1052-%E5%8D%96%E4%B8%AA%E8%90%8C/","summary":"卖个萌 (PATB-1052) 题面 萌萌哒表情符号通常由“手”、“眼”、“口”三个主要部分组成。简单起见，我们假设一个表情符号是按下列格式输出的： 1[左手]([左眼","title":"PATB-1052 卖个萌"},{"content":"复数乘法 (PATB-1051) 题面 复数可以写成 (A+Bi) 的常规形式，其中 A 是实部，B 是虚部，i 是虚数单位，满足 i^2=−1；也可以写成极坐标下的指数形式 (R×e^(Pi))，其中 R 是复数模，P 是辐角，i 是虚数单位，其等价于三角形式 R(cos(P)+isin(P))。\n现给定两个复数的 R 和 P，要求输出两数乘积的常规形式。\n输入 输入在一行中依次给出两个复数的 R1, P1, R2, P2，数字间以空格分隔。\n输出 在一行中按照 A+Bi 的格式输出两数乘积的常规形式，实部和虚部均保留 2 位小数。注意：如果 B 是负数，则应该写成 A-|B|i 的形式。\n样例输入 12.3 3.5 5.2 0.4 样例输出 1-8.68-8.23i 提示 无\n思路 代码 1#define Sg(u) ((u) \u0026gt; eps ? 1 : ((u) \u0026lt; -eps ? -1 : 0)) 2#define Abs(u) (Sg(u) \u0026gt;= 0 ? (u) : -(u)) 3#define Ze(u) (!Sg(u)) 4typedef double DB; 5const DB eps = 5e-3; 6 7int main() 8{ 9 DB r1, p1, r2, p2; 10 scanf(\u0026#34;%lf %lf %lf %lf\u0026#34;, \u0026amp;r1, \u0026amp;p1, \u0026amp;r2, \u0026amp;p2); 11 12 DB a = r1*cos(p1) * r2*cos(p2) - r1*sin(p1) * r2*sin(p2); 13 DB b = r1*cos(p1) * r2*sin(p2) + r2*cos(p2) * r1*sin(p1); 14 15 if(Ze(a)) 16 a = 0.0; 17 printf(\u0026#34;%.2lf\u0026#34;, a); 18 19 if(Ze(b)) 20 b = 0.0; 21 22 if(Sg(b) \u0026gt;= 0) 23 printf(\u0026#34;+\u0026#34;); 24 25 printf(\u0026#34;%.2lfi\\n\u0026#34;, b); 26 27 return 0; 28} ","permalink":"https://blog.lordash.de/posts/solution/patb-1051-%E5%A4%8D%E6%95%B0%E4%B9%98%E6%B3%95/","summary":"复数乘法 (PATB-1051) 题面 复数可以写成 (A+Bi) 的常规形式，其中 A 是实部，B 是虚部，i 是虚数单位，满足 i^2=−1；也可以写成极坐标下的指数形式 (R×e^(Pi","title":"PATB-1051 复数乘法"},{"content":"螺旋矩阵 (PATB-1050) 题面 本题要求将给定的 N 个正整数按非递增的顺序，填入“螺旋矩阵”。所谓“螺旋矩阵”，是指从左上角第 1 个格子开始，按顺时针螺旋方向填充。要求矩阵的规模为 m 行 n 列，满足条件：m×n 等于 N；m≥n；且 m−n 取所有可能值中的最小值。\n输入 输入在第 1 行中给出一个正整数 N，第 2 行给出 N 个待填充的正整数。所有数字不超过 10^4，相邻数字以空格分隔。\n输出 输出螺旋矩阵。每行 n 个数字，共 m 行。相邻数字以 1 个空格分隔，行末不得有多余空格。\n样例输入 112 237 76 20 98 76 42 53 95 60 81 58 93 样例输出 198 95 93 242 37 81 353 20 76 458 60 76 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2int a[mxn], ans[mxn]; 3 4int main() 5{ 6 int t; scanf(\u0026#34;%d\u0026#34;, \u0026amp;t); 7 8 int n, m; 9 for(int i=sqrt(t); i; i--){ 10 if(t%i == 0){ 11 m = i; 12 n = t/m; 13 break; 14 } 15 } 16 for(int i=0; i\u0026lt;t; i++) 17 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); 18 sort(a, a+t); 19 20 int x=0, y=-1; 21 for(t--; t\u0026gt;=0;) 22 { 23 while(y+1\u0026lt;m \u0026amp;\u0026amp; *(ans+x*m+y+1) == 0){ 24 ++y; *(ans+x*m+y) = a[t--]; 25 } 26 27 while(x+1\u0026lt;n \u0026amp;\u0026amp; *(ans+(x+1)*m+y) == 0){ 28 ++x; *(ans+x*m+y) = a[t--]; 29 } 30 31 while(y-1\u0026gt;=0 \u0026amp;\u0026amp; *(ans+x*m+y-1) == 0){ 32 --y; *(ans+x*m+y) = a[t--]; 33 } 34 35 while(x-1\u0026gt;=0 \u0026amp;\u0026amp; *(ans+(x-1)*m+y) == 0){ 36 --x; *(ans+x*m+y) = a[t--]; 37 } 38 } 39 40 for(int i=0; i\u0026lt;n; i++) 41 { 42 for(int j=0; j\u0026lt;m; j++) 43 { 44 if(j) printf(\u0026#34; \u0026#34;); 45 printf(\u0026#34;%d\u0026#34;, *(ans+i*m+j)); 46 } 47 printf(\u0026#34;\\n\u0026#34;); 48 } 49 50 return 0; 51} ","permalink":"https://blog.lordash.de/posts/solution/patb-1050-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/","summary":"螺旋矩阵 (PATB-1050) 题面 本题要求将给定的 N 个正整数按非递增的顺序，填入“螺旋矩阵”。所谓“螺旋矩阵”，是指从左上角第 1 个格子开始，按顺时针螺旋方向填充","title":"PATB-1050 螺旋矩阵"},{"content":"数列的片段和 (PATB-1049) 题面 给定一个正数数列，我们可以从中截取任意的连续的几个数，称为片段。例如，给定数列 { 0.1, 0.2, 0.3, 0.4 }，我们有 (0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2, 0.3) (0.2, 0.3, 0.4) (0.3) (0.3, 0.4) (0.4) 这 10 个片段。\n给定正整数数列，求出全部片段包含的所有的数之和。如本例中 10 个片段总和是 0.1 + 0.3 + 0.6 + 1.0 + 0.2 + 0.5 + 0.9 + 0.3 + 0.7 + 0.4 = 5.0。\n输入 输入第一行给出一个不超过 10^5 的正整数 N，表示数列中数的个数，第二行给出 N 个不超过 1.0 的正数，是数列中的数，其间以空格分隔。\n输出 在一行中输出该序列所有片段包含的数之和，精确到小数点后 2 位。\n样例输入 14 20.1 0.2 0.3 0.4 样例输出 15.00 提示 无\n思路 代码 1int main() 2{ 3 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 4 5 LL ans = 0; DB m; 6 for(int i=0; i\u0026lt;n; i++) 7 { 8 scanf(\u0026#34;%lf\u0026#34;, \u0026amp;m); 9 ans += (LL)(m * (i+1) * (n-i) * 1000.0); 10 } 11 printf(\u0026#34;%.2lf\\n\u0026#34;, ans / 1000.0); 12 return 0; 13} ","permalink":"https://blog.lordash.de/posts/solution/patb-1049-%E6%95%B0%E5%88%97%E7%9A%84%E7%89%87%E6%AE%B5%E5%92%8C/","summary":"数列的片段和 (PATB-1049) 题面 给定一个正数数列，我们可以从中截取任意的连续的几个数，称为片段。例如，给定数列 { 0.1, 0.2, 0.3, 0.4 }，我们有 (0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2,","title":"PATB-1049 数列的片段和"},{"content":"数字加密 (PATB-1048) 题面 本题要求实现一种数字加密方法。首先固定一个加密用正整数 A，对任一正整数 B，将其每 1 位数字与 A 的对应位置上的数字进行以下运算：对奇数位，对应位的数字相加后对 13 取余——这里用 J 代表 10、Q 代表 11、K 代表 12；对偶数位，用 B 的数字减去 A 的数字，若结果为负数，则再加 10。这里令个位为第 1 位。\n输入 输入在一行中依次给出 A 和 B，均为不超过 100 位的正整数，其间以空格分隔。\n输出 在一行中输出加密后的结果。\n样例输入 11234567 368782971 样例输出 13695Q8118 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2char s[mxn], t[mxn], ans[mxn]; 3char p[] = \u0026#34;0123456789JQK\u0026#34;; 4 5int main() 6{ 7 scanf(\u0026#34;%s %s\u0026#34;, s+1, t+1); 8 9 s[0] = t[0] = \u0026#39;0\u0026#39;; 10 int n = 0, f = 1; 11 int i = strlen(s+1), j = strlen(t+1); 12 13 while(i\u0026gt;0 || j\u0026gt;0) 14 { 15 if(f) 16 ans[n++] = p[(t[j]-\u0026#39;0\u0026#39;+s[i]-\u0026#39;0\u0026#39;)%13]; 17 else{ 18 int x = t[j] - s[i]; 19 ans[n++] = p[x\u0026lt;0 ? x+10 : x]; 20 } 21 if(i) i--; 22 if(j) j--; 23 f = !f; 24 } 25 26 for(int i=n-1; i\u0026gt;=0; i--) 27 printf(\u0026#34;%c\u0026#34;, ans[i]); 28 29 return 0; 30} ","permalink":"https://blog.lordash.de/posts/solution/patb-1048-%E6%95%B0%E5%AD%97%E5%8A%A0%E5%AF%86/","summary":"数字加密 (PATB-1048) 题面 本题要求实现一种数字加密方法。首先固定一个加密用正整数 A，对任一正整数 B，将其每 1 位数字与 A 的对应位置上的数字进行以下运算：对","title":"PATB-1048 数字加密"},{"content":"编程团体赛 (PATB-1047) 题面 编程团体赛的规则为：每个参赛队由若干队员组成；所有队员独立比赛；参赛队的成绩为所有队员的成绩和；成绩最高的队获胜。\n现给定所有队员的比赛成绩，请你编写程序找出冠军队。\n输入 输入第一行给出一个正整数 N（≤10^4），即所有参赛队员总数。随后 N 行，每行给出一位队员的成绩，格式为：队伍编号-队员编号 成绩，其中队伍编号为 1 到 1000 的正整数，队员编号为 1 到 10 的正整数，成绩为 0 到 100 的整数。\n输出 在一行中输出冠军队的编号和总成绩，其间以一个空格分隔。注意：题目保证冠军队是唯一的。\n样例输入 16 23-10 99 311-5 87 4102-1 0 5102-3 100 611-9 89 73-2 61 样例输出 111 176 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2int a[mxn]; 3 4int main() 5{ 6 int n; scanf(\u0026#34;%d%\u0026#34;, \u0026amp;n); 7 8 for(int i=0; i\u0026lt;n; i++) 9 { 10 int x, y, z; 11 scanf(\u0026#34;%d-%d %d\u0026#34;, \u0026amp;x, \u0026amp;y, \u0026amp;z); 12 a[x] += z; 13 } 14 int mx = 0, id = 0; 15 for(int i=1; i\u0026lt;=1000; i++) 16 { 17 if(mx \u0026lt; a[i]) 18 { 19 mx = a[i]; 20 id = i; 21 } 22 } 23 printf(\u0026#34;%d %d\\n\u0026#34;, id, mx); 24 return 0; 25} ","permalink":"https://blog.lordash.de/posts/solution/patb-1047-%E7%BC%96%E7%A8%8B%E5%9B%A2%E4%BD%93%E8%B5%9B/","summary":"编程团体赛 (PATB-1047) 题面 编程团体赛的规则为：每个参赛队由若干队员组成；所有队员独立比赛；参赛队的成绩为所有队员的成绩和；成绩最高的队获胜。 现给定所有","title":"PATB-1047 编程团体赛"},{"content":"划拳 (PATB-1046) 题面 划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就赢了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。\n下面给出甲、乙两人的划拳记录，请你统计他们最后分别喝了多少杯酒。\n输入 输入第一行先给出一个正整数 N（≤100），随后 N 行，每行给出一轮划拳的记录，格式为：\n1甲喊 甲划 乙喊 乙划 其中喊是喊出的数字，划是划出的数字，均为不超过 100 的正整数（两只手一起划）。\n输出 在一行中先后输出甲、乙两人喝酒的杯数，其间以一个空格分隔。\n样例输入 15 28 10 9 12 35 10 5 10 43 8 5 12 512 18 1 13 64 16 12 15 样例输出 11 2 提示 无\n思路 代码 1int main() 2{ 3 int n; scanf(\u0026#34;%d%\u0026#34;, \u0026amp;n); 4 5 int sa = 0, sb = 0; 6 for(int i=0; i\u0026lt;n; i++) 7 { 8 int a, b, c, d; 9 scanf(\u0026#34;%d %d %d %d\u0026#34;, \u0026amp;a, \u0026amp;b, \u0026amp;c, \u0026amp;d); 10 if(b == d) continue; 11 if(b == a + c) sb++; 12 if(d == a + c) sa++; 13 } 14 printf(\u0026#34;%d %d\\n\u0026#34;, sa, sb); 15 return 0; 16} ","permalink":"https://blog.lordash.de/posts/solution/patb-1046-%E5%88%92%E6%8B%B3/","summary":"划拳 (PATB-1046) 题面 划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字","title":"PATB-1046 划拳"},{"content":"快速排序 (PATB-1045) 题面 著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，比主元大的元素放到它的右边。 给定划分后的 N 个互不相同的正整数的排列，请问有多少个元素可能是划分前选取的主元？\n例如给定 $N = 5$, 排列是1、3、2、4、5。则：\n1 的左边没有元素，右边的元素都比它大，所以它可能是主元； 尽管 3 的左边元素都比它小，但其右边的 2 比它小，所以它不能是主元； 尽管 2 的右边元素都比它大，但其左边的 3 比它大，所以它不能是主元； 类似原因，4 和 5 都可能是主元。 因此，有 3 个元素可能是主元。\n输入 输入在第 1 行中给出一个正整数 N（≤105）； 第 2 行是空格分隔的 N 个不同的正整数，每个数不超过 10^9。\n输出 在第 1 行中输出有可能是主元的元素个数；在第 2 行中按递增顺序输出这些元素，其间以 1 个空格分隔，行首尾不得有多余空格。\n样例输入 15 21 3 2 4 5 样例输出 13 21 4 5 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2int a[mxn], b[mxn]; 3int ans[mxn]; 4 5int main() 6{ 7 int n; scanf(\u0026#34;%d%\u0026#34;, \u0026amp;n); 8 9 for(int i=0; i\u0026lt;n; i++) 10 { 11 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); 12 b[i] = a[i]; 13 } 14 sort(b, b+n); 15 16 int mx = 0, num = 0; 17 for(int i=0; i\u0026lt;n; i++) 18 { 19 if(a[i]==b[i] \u0026amp;\u0026amp; b[i]\u0026gt;mx) 20 ans[num++] = a[i]; 21 mx = max(mx, a[i]); 22 } 23 printf(\u0026#34;%d\\n\u0026#34;, num); 24 for(int i=0; i\u0026lt;num; i++) 25 { 26 if(i) printf(\u0026#34; \u0026#34;); 27 printf(\u0026#34;%d\u0026#34;, ans[i]); 28 } 29 printf(\u0026#34;\\n\u0026#34;); 30 return 0; 31} ","permalink":"https://blog.lordash.de/posts/solution/patb-1045-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/","summary":"快速排序 (PATB-1045) 题面 著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，比主","title":"PATB-1045 快速排序"},{"content":"火星数字 (PATB-1044) 题面 火星人是以 13 进制计数的：\n地球人的 0 被火星人称为 tret。 地球人数字 1 到 12 的火星文分别为：jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec。 火星人将进位以后的 12 个高位数字分别称为：tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou。 例如地球人的数字 29 翻译成火星文就是 hel mar；而火星文 elo nov 对应地球数字 115。为了方便交流，请你编写程序实现地球和火星数字之间的互译。\n输入 输入第一行给出一个正整数 N（\u0026lt;100），随后 N 行，每行给出一个 [0, 169) 区间内的数字 —— 或者是地球文，或者是火星文。\n输出 对应输入的每一行，在一行中输出翻译后的另一种语言的数字。\n样例输入 14 229 35 4elo nov 5tam 样例输出 1hel mar 2may 3115 413 提示 无\n思路 代码 1char a[][5] = { 2 \u0026#34;tret\u0026#34;, \u0026#34;jan\u0026#34;, \u0026#34;feb\u0026#34;, \u0026#34;mar\u0026#34;, \u0026#34;apr\u0026#34;, \u0026#34;may\u0026#34;, \u0026#34;jun\u0026#34;, 3 \u0026#34;jly\u0026#34;, \u0026#34;aug\u0026#34;, \u0026#34;sep\u0026#34;, \u0026#34;oct\u0026#34;, \u0026#34;nov\u0026#34;, \u0026#34;dec\u0026#34; 4}; 5char b[][5] = { 6 \u0026#34; \u0026#34;, \u0026#34;tam\u0026#34;, \u0026#34;hel\u0026#34;, \u0026#34;maa\u0026#34;, \u0026#34;huh\u0026#34;, \u0026#34;tou\u0026#34;, \u0026#34;kes\u0026#34;, 7 \u0026#34;hei\u0026#34;, \u0026#34;elo\u0026#34;, \u0026#34;syy\u0026#34;, \u0026#34;lok\u0026#34;, \u0026#34;mer\u0026#34;, \u0026#34;jou\u0026#34; 8}; 9char s[100]; 10 11int main() 12{ 13 int n; scanf(\u0026#34;%d%*c\u0026#34;, \u0026amp;n); 14 while(n--) 15 { 16 fgets(s, 100, stdin); 17 if(isdigit(s[0])) 18 { 19 int t = 0; sscanf(s, \u0026#34;%d\u0026#34;, \u0026amp;t); 20 if(t/13) printf(\u0026#34;%s\u0026#34;, b[t/13]); 21 if(t/13 \u0026amp;\u0026amp; t%13) printf(\u0026#34; \u0026#34;); 22 if(t%13 || t==0) printf(\u0026#34;%s\u0026#34;, a[t%13]); 23 printf(\u0026#34;\\n\u0026#34;); continue; 24 } 25 26 char t1[10], t2[10]; 27 int ans = 0; 28 if(strlen(s) \u0026gt; 5) 29 sscanf(s, \u0026#34;%s %s\u0026#34;, t1, t2); 30 else{ 31 sscanf(s, \u0026#34;%s\u0026#34;, t1); strcpy(t2, t1); 32 } 33 34 for(int i=0; i\u0026lt;13; i++) 35 { 36 if(strcmp(a[i], t2) == 0) 37 ans += i; 38 if(strcmp(b[i], t1) == 0) 39 ans += i * 13; 40 } 41 printf(\u0026#34;%d\\n\u0026#34;, ans); 42 } 43 44 return 0; 45} ","permalink":"https://blog.lordash.de/posts/solution/patb-1044-%E7%81%AB%E6%98%9F%E6%95%B0%E5%AD%97/","summary":"火星数字 (PATB-1044) 题面 火星人是以 13 进制计数的： 地球人的 0 被火星人称为 tret。 地球人数字 1 到 12 的火星文分别为：jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec。 火","title":"PATB-1044 火星数字"},{"content":"输出PATest (PATB-1043) 题面 给定一个长度不超过 10^4 的、仅由英文字母构成的字符串。请将字符重新调整顺序，按 PATestPATest.... 这样的顺序输出，并忽略其它字符。当然，六种字符的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按 PATest 的顺序打印，直到所有字符都被输出。\n输入 输入在一行中给出一个长度不超过 10^4 的、仅由英文字母构成的非空字符串。\n输出 在一行中按题目要求输出排序后的字符串。题目保证输出非空。\n样例输入 1redlesPayBestPATTopTeePHPereatitAPPT 样例输出 1PATestPATestPTetPTePePee 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2char s[mxn], t[]=\u0026#34;PATest\u0026#34;; 3int a[7]; 4 5int main() 6{ 7 scanf(\u0026#34;%s\u0026#34;, s); 8 int sl = strlen(s); 9 10 for(int i=0; i\u0026lt;sl; i++) 11 { 12 if(strchr(t, s[i]) != NULL) 13 a[strchr(t, s[i])-t]++; 14 } 15 16 int sum = 0; 17 for(int i=0; i\u0026lt;6; i++) 18 sum += a[i]; 19 20 while(sum) 21 { 22 for(int i=0; i\u0026lt;6; i++) 23 { 24 if(a[i]){ 25 printf(\u0026#34;%c\u0026#34;, t[i]); 26 a[i]--; sum--; 27 } 28 } 29 } 30 31 return 0; 32} ","permalink":"https://blog.lordash.de/posts/solution/patb-1043-%E8%BE%93%E5%87%BApatest/","summary":"输出PATest (PATB-1043) 题面 给定一个长度不超过 10^4 的、仅由英文字母构成的字符串。请将字符重新调整顺序，按 PATestPATest.... 这样的顺序输出，并忽略其它字符。当然，六种","title":"PATB-1043 输出PATest"},{"content":"字符统计 (PATB-1042) 题面 请编写程序，找出一段给定文字中出现最频繁的那个英文字母。\n输入 输入在一行中给出一个长度不超过 1000 的字符串。字符串由 ASCII 码表中任意可见字符及空格组成，至少包含 1 个英文字母，以回车结束（回车不算在内）。\n输出 在一行中输出出现频率最高的那个英文字母及其出现次数，其间以空格分隔。如果有并列，则输出按字母序最小的那个字母。统计时不区分大小写，输出小写字母。\n样例输入 1This is a simple TEST. There ARE numbers and other symbols 1\u0026amp;2\u0026amp;3........... 样例输出 1e 7 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2char s[mxn]; 3int t[26]; 4 5int main() 6{ 7 fgets(s, mxn, stdin); 8 int sl = strlen(s); 9 10 for(int i=0; i\u0026lt;sl; i++) 11 { 12 if(isalpha(s[i])) 13 { 14 if(isupper(s[i])) 15 s[i] = tolower(s[i]); 16 t[s[i]-\u0026#39;a\u0026#39;]++; 17 } 18 } 19 int mx = 0, id = 0; 20 for(int i=0; i\u0026lt;26; i++) 21 { 22 if(mx \u0026lt; t[i]) 23 { 24 mx = t[i]; 25 id = i; 26 } 27 } 28 printf(\u0026#34;%c %d\\n\u0026#34;, id+\u0026#39;a\u0026#39;, mx); 29 30 return 0; 31} ","permalink":"https://blog.lordash.de/posts/solution/patb-1042-%E5%AD%97%E7%AC%A6%E7%BB%9F%E8%AE%A1/","summary":"字符统计 (PATB-1042) 题面 请编写程序，找出一段给定文字中出现最频繁的那个英文字母。 输入 输入在一行中给出一个长度不超过 1000 的字符串。字符串由 ASCII 码表中任意可见","title":"PATB-1042 字符统计"},{"content":"考试座位号 (PATB-1041) 题面 每个 PAT 考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。\n输入 输入第一行给出一个正整数 N（≤1000），随后 N 行，每行给出一个考生的信息：准考证号 试机座位号 考试座位号。其中准考证号由 16 位数字组成，座位从 1 到 N 编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。\n考生信息之后，给出一个正整数 M（≤N），随后一行中给出 M 个待查询的试机座位号码，以空格分隔。\n输出 对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用 1 个空格分隔。\n样例输入 14 23310120150912233 2 4 33310120150912119 4 1 43310120150912126 1 3 53310120150912002 3 2 62 73 4 样例输出 13310120150912002 2 23310120150912119 1 提示 无\n思路 代码 1struct P{ 2 char s[20]; 3 int t; 4}; 5 6int main() 7{ 8 int n, m; 9 scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 10 11 map\u0026lt;int, P\u0026gt; mmp; 12 for(int i=0; i\u0026lt;n; i++) 13 { 14 int x; P y; 15 scanf(\u0026#34;%s %d %d\u0026#34;, y.s, \u0026amp;x, \u0026amp;y.t); 16 mmp[x] = y; 17 } 18 scanf(\u0026#34;%d\u0026#34;, \u0026amp;m); 19 for(int i=0; i\u0026lt;m; i++) 20 { 21 int x; scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 22 printf(\u0026#34;%s %d\\n\u0026#34;, mmp[x].s, mmp[x].t); 23 } 24 25 return 0; 26} ","permalink":"https://blog.lordash.de/posts/solution/patb-1041-%E8%80%83%E8%AF%95%E5%BA%A7%E4%BD%8D%E5%8F%B7/","summary":"考试座位号 (PATB-1041) 题面 每个 PAT 考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座","title":"PATB-1041 考试座位号"},{"content":"有几个PAT (PATB-1040) 题面 字符串 APPAPT 中包含了两个单词 PAT，其中第一个 PAT 是第 2 位(P)，第 4 位(A)，第 6 位(T)；第二个 PAT 是第 3 位(P)，第 4 位(A)，第 6 位(T)。\n现给定字符串，问一共可以形成多少个 PAT？\n输入 输入只有一行，包含一个字符串，长度不超过105，只包含 P、A、T 三种字母。\n输出 在一行中输出给定字符串中包含多少个 PAT。由于结果可能比较大，只输出对 1000000007 取余数的结果。\n样例输入 1APPAPT 样例输出 12 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2char s[mxn]; 3 4int main() 5{ 6 scanf(\u0026#34;%s\u0026#34;, s); 7 int sl = strlen(s); 8 9 LL p=0, a=0, t=0, mod=1000000007; 10 for(int i=0; i\u0026lt;sl; i++) 11 { 12 if(s[i]==\u0026#39;P\u0026#39;) 13 p++; 14 else if(s[i]==\u0026#39;A\u0026#39;) 15 a += p; 16 else if(s[i]==\u0026#39;T\u0026#39;) 17 t += a; 18 } 19 printf(\u0026#34;%d\\n\u0026#34;, t%mod); 20 21 return 0; 22} ","permalink":"https://blog.lordash.de/posts/solution/patb-1040-%E6%9C%89%E5%87%A0%E4%B8%AApat/","summary":"有几个PAT (PATB-1040) 题面 字符串 APPAPT 中包含了两个单词 PAT，其中第一个 PAT 是第 2 位(P)，第 4 位(A)，第 6 位(T)；第二个 PAT 是第 3 位(P)，第 4 位(A","title":"PATB-1040 有几个PAT"},{"content":"到底买不买 (PATB-1039) 题面 小红想买些珠子做一串自己喜欢的珠串。卖珠子的摊主有很多串五颜六色的珠串，但是不肯把任何一串拆散了卖。于是小红要你帮忙判断一下，某串珠子里是否包含了全部自己想要的珠子？如果是，那么告诉她有多少多余的珠子；如果不是，那么告诉她缺了多少珠子。\n为方便起见，我们用[0-9]、[a-z]、[A-Z]范围内的字符来表示颜色。例如在图1中，第3串是小红想做的珠串；那么第1串可以买，因为包含了全部她想要的珠子，还多了8颗不需要的珠子；第2串不能买，因为没有黑色珠子，并且少了一颗红色的珠子。\n图 1\n输入 每个输入包含 1 个测试用例。每个测试用例分别在 2 行中先后给出摊主的珠串和小红想做的珠串，两串都不超过 1000 个珠子。\n输出 如果可以买，则在一行中输出 Yes 以及有多少多余的珠子；如果不可以买，则在一行中输出 No 以及缺了多少珠子。其间以 1 个空格分隔。\n样例输入1 1ppRYYGrrYBR2258 2YrR8RrY 样例输出1 1Yes 8 样例输入2 1ppRYYGrrYB225 2YrR8RrY 样例输出2 1No 2 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2char s[mxn], t[mxn]; 3int a[mxn], b[mxn]; 4 5int main() 6{ 7 scanf(\u0026#34;%s %s\u0026#34;, s, t); 8 int sl = strlen(s), tl = strlen(t); 9 10 for(int i=0; i\u0026lt;sl; i++) 11 a[s[i]]++; 12 for(int i=0; i\u0026lt;tl; i++) 13 b[t[i]]++; 14 15 int sa = 0, sb = 0; 16 for(int i=1; i\u0026lt;=256; i++) 17 { 18 sa += a[i]-b[i] \u0026gt; 0 ? a[i]-b[i] : 0; 19 sb += b[i]-a[i] \u0026gt; 0 ? b[i]-a[i] : 0; 20 } 21 if(sb) 22 printf(\u0026#34;No %d\\n\u0026#34;, sb); 23 else 24 printf(\u0026#34;Yes %d\\n\u0026#34;, sa); 25 26 return 0; 27} ","permalink":"https://blog.lordash.de/posts/solution/patb-1039-%E5%88%B0%E5%BA%95%E4%B9%B0%E4%B8%8D%E4%B9%B0/","summary":"到底买不买 (PATB-1039) 题面 小红想买些珠子做一串自己喜欢的珠串。卖珠子的摊主有很多串五颜六色的珠串，但是不肯把任何一串拆散了卖。于是小红要你帮忙判断一下","title":"PATB-1039 到底买不买"},{"content":"统计同成绩学生 (PATB-1038) 题面 本题要求读入 N 名学生的成绩，将获得某一给定分数的学生人数输出。\n输入 输入在第 1 行给出不超过 10^5 的正整数 N，即学生总人数。随后一行给出 N 名学生的百分制整数成绩，中间以空格分隔。最后一行给出要查询的分数个数 K（不超过 N 的正整数），随后是 K 个分数，中间以空格分隔。\n输出 在一行中按查询顺序给出得分等于指定分数的学生人数，中间以空格分隔，但行末不得有多余空格。\n样例输入 110 260 75 90 55 75 99 82 90 75 50 33 75 90 88 样例输出 13 2 0 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2int a[mxn], b[mxn]; 3 4int main() 5{ 6 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 7 8 for(int i=0; i\u0026lt;n; i++) 9 { 10 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); 11 b[a[i]]++; 12 } 13 14 int k, t; scanf(\u0026#34;%d\u0026#34;, \u0026amp;k); 15 for(int i=0; i\u0026lt;k; i++){ 16 scanf(\u0026#34;%d\u0026#34;, \u0026amp;t); 17 if(i) printf(\u0026#34; \u0026#34;); 18 printf(\u0026#34;%d\u0026#34;, b[t]); 19 } 20 21 return 0; 22} ","permalink":"https://blog.lordash.de/posts/solution/patb-1038-%E7%BB%9F%E8%AE%A1%E5%90%8C%E6%88%90%E7%BB%A9%E5%AD%A6%E7%94%9F/","summary":"统计同成绩学生 (PATB-1038) 题面 本题要求读入 N 名学生的成绩，将获得某一给定分数的学生人数输出。 输入 输入在第 1 行给出不超过 10^5 的正整数 N，即学生总人数。随后","title":"PATB-1038 统计同成绩学生"},{"content":"在霍格沃茨找零钱 (PATB-1037) 题面 如果你是哈利·波特迷，你会知道魔法世界有它自己的货币系统 —— 就如海格告诉哈利的：“十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可，很容易。”现在，给定哈利应付的价钱 P 和他实付的钱 A，你的任务是写一个程序来计算他应该被找的零钱。\n输入 输入在 1 行中分别给出 P 和 A，格式为 Galleon.Sickle.Knut，其间用 1 个空格分隔。这里 Galleon 是 [0, 107] 区间内的整数，Sickle 是 [0, 17) 区间内的整数，Knut 是 [0, 29) 区间内的整数。\n输出 在一行中用与输入同样的格式输出哈利应该被找的零钱。如果他没带够钱，那么输出的应该是负数。\n样例输入1 110.16.27 14.1.28 样例输出1 13.2.1 样例输入2 114.1.28 10.16.27 样例输出2 1-3.2.1 提示 无\n思路 代码 1#define Sg(u) ((u) \u0026gt; eps ? 1 : ((u) \u0026lt; -eps ? -1 : 0)) 2#define Abs(u) (Sg(u) \u0026gt;= 0 ? (u) : -(u)) 3 4int main() 5{ 6 LL ag, as, ak, bg, bs, bk; 7 scanf(\u0026#34;%lld.%lld.%lld\u0026#34;, \u0026amp;ag, \u0026amp;as, \u0026amp;ak); 8 scanf(\u0026#34;%lld.%lld.%lld\u0026#34;, \u0026amp;bg, \u0026amp;bs, \u0026amp;bk); 9 10 LL a = ag * 493 + as * 29 + ak; 11 LL b = bg * 493 + bs * 29 + bk; 12 LL c = Abs(b - a); 13 14 if(Sg(b - a) \u0026lt; 0) printf(\u0026#34;-\u0026#34;); 15 printf(\u0026#34;%lld.%lld.%lld\\n\u0026#34;, c/493, c/29%17, c%29); 16 17 return 0; 18} ","permalink":"https://blog.lordash.de/posts/solution/patb-1037-%E5%9C%A8%E9%9C%8D%E6%A0%BC%E6%B2%83%E8%8C%A8%E6%89%BE%E9%9B%B6%E9%92%B1/","summary":"在霍格沃茨找零钱 (PATB-1037) 题面 如果你是哈利·波特迷，你会知道魔法世界有它自己的货币系统 —— 就如海格告诉哈利的：“十七个银西可(Sickle)兑一个加","title":"PATB-1037 在霍格沃茨找零钱"},{"content":"跟奥巴马一起编程 (PATB-1036) 题面 美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014 年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！\n输入 输入在一行中给出正方形边长 N（3≤N≤20）和组成正方形边的某种字符 C，间隔一个空格。\n输出 输出由给定字符 C 画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的 50%（四舍五入取整）。\n样例输入 110 a 样例输出 1aaaaaaaaaa 2a a 3a a 4a a 5aaaaaaaaaa 提示 无\n思路 代码 1int main() 2{ 3 int n; char c; 4 scanf(\u0026#34;%d %c\u0026#34;, \u0026amp;n, \u0026amp;c); 5 int m = round(n*0.5); 6 7 for(int i=0; i\u0026lt;m; i++) 8 { 9 for(int j=0; j\u0026lt;n; j++) 10 { 11 if(i==0 || i==m-1) 12 printf(\u0026#34;%c\u0026#34;, c); 13 else if(j==0 || j==n-1) 14 printf(\u0026#34;%c\u0026#34;, c); 15 else 16 printf(\u0026#34; \u0026#34;); 17 } 18 printf(\u0026#34;\\n\u0026#34;); 19 } 20 21 return 0; 22} ","permalink":"https://blog.lordash.de/posts/solution/patb-1036-%E8%B7%9F%E5%A5%A5%E5%B7%B4%E9%A9%AC%E4%B8%80%E8%B5%B7%E7%BC%96%E7%A8%8B/","summary":"跟奥巴马一起编程 (PATB-1036) 题面 美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014 年底，为","title":"PATB-1036 跟奥巴马一起编程"},{"content":"插入与归并 (PATB-1035) 题面 根据维基百科的定义：\n插入排序是迭代算法，逐一获得输入数据，逐步产生有序的输出序列。每步迭代中，算法从输入序列中取出一元素，将之插入有序序列中正确的位置。如此迭代直到全部元素有序。\n归并排序进行如下迭代操作：首先将原始序列看成 N 个只包含 1 个元素的有序子序列，然后每次迭代归并两个相邻的有序子序列，直到最后只剩下 1 个有序的序列。\n现给定原始序列和由某排序算法产生的中间序列，请你判断该算法究竟是哪种排序算法？\n输入 输入在第一行给出正整数 N (≤100)；随后一行给出原始序列的 N 个整数；最后一行给出由某排序算法产生的中间序列。这里假设排序的目标序列是升序。数字间以空格分隔。\n输出 首先在第 1 行中输出Insertion Sort表示插入排序、或Merge Sort表示归并排序；然后在第 2 行中输出用该排序算法再迭代一轮的结果序列。题目保证每组测试的结果是唯一的。数字间以空格分隔，且行首尾不得有多余空格。\n样例输入1 110 23 1 2 8 7 5 9 4 6 0 31 2 3 7 8 5 9 4 6 0 样例输出1 1Insertion Sort 21 2 3 5 7 8 9 4 6 0 样例输入2 110 23 1 2 8 7 5 9 4 0 6 31 3 2 8 5 7 4 9 0 6 样例输出2 1Merge Sort 21 2 3 8 4 5 7 9 0 6 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2int a[mxn], b[mxn]; 3 4int main() 5{ 6 int n; scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 7 8 for(int i=0; i\u0026lt;n; i++) 9 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); 10 for(int i=0; i\u0026lt;n; i++) 11 scanf(\u0026#34;%d\u0026#34;, \u0026amp;b[i]); 12 13 int x = 1, flag = 1; 14 while(x\u0026lt;n \u0026amp; b[x-1]\u0026lt;=b[x]) x++; 15 for(int i=x; i\u0026lt;n; i++) 16 { 17 if(a[i] != b[i]){ 18 flag = 0; 19 break; 20 } 21 } 22 23 if(flag) 24 { 25 printf(\u0026#34;Insertion Sort\\n\u0026#34;); 26 sort(a, a+x+1); 27 for(int i=0; i\u0026lt;n; i++) 28 { 29 if(i) printf(\u0026#34; \u0026#34;); 30 printf(\u0026#34;%d\u0026#34;, a[i]); 31 } 32 return 0; 33 } 34 35 printf(\u0026#34;Merge Sort\\n\u0026#34;); 36 int k = 1; 37 while(1) 38 { 39 flag = 1; 40 for(int i=0; i\u0026lt;n; i++){ 41 if(a[i]!=b[i]){ 42 flag = 0; 43 break; 44 } 45 } 46 k *= 2; 47 for(int i=0; i\u0026lt;n/k; i++) 48 sort(a+i*k, a+i*k+k); 49 sort(a+n/k*k, a+n); 50 51 if(flag) break; 52 } 53 for(int i=0; i\u0026lt;n; i++) 54 { 55 if(i) printf(\u0026#34; \u0026#34;); 56 printf(\u0026#34;%d\u0026#34;, a[i]); 57 } 58 59 return 0; 60} ","permalink":"https://blog.lordash.de/posts/solution/patb-1035-%E6%8F%92%E5%85%A5%E4%B8%8E%E5%BD%92%E5%B9%B6/","summary":"插入与归并 (PATB-1035) 题面 根据维基百科的定义： 插入排序是迭代算法，逐一获得输入数据，逐步产生有序的输出序列。每步迭代中，算法从输入序列中取出一元素，将","title":"PATB-1035 插入与归并"},{"content":"有理数四则运算 (PATB-1034) 题面 本题要求编写程序，计算 2 个有理数的和、差、积、商。\n输入 输入在一行中按照 a1/b1 a2/b2 的格式给出两个分数形式的有理数，其中分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为 0。\n输出 分别在 4 行中按照 有理数1 运算符 有理数2 = 结果 的格式顺序输出 2 个有理数的和、差、积、商。注意输出的每个有理数必须是该有理数的最简形式 k a/b，其中 k 是整数部分，a/b 是最简分数部分；若为负数，则须加括号；若除法分母为 0，则输出 Inf。题目保证正确的输出中没有超过整型范围的整数。\n样例输入1 12/3 -4/2 样例输出1 12/3 + (-2) = (-1 1/3) 22/3 - (-2) = 2 2/3 32/3 * (-2) = (-1 1/3) 42/3 / (-2) = (-1/3) 样例输入2 15/3 0/6 样例输出2 11 2/3 + 0 = 1 2/3 21 2/3 - 0 = 1 2/3 31 2/3 * 0 = 0 41 2/3 / 0 = Inf 提示 无\n思路 代码 1typedef long long LL; 2typedef double DB; 3const DB eps = 1e-8; 4#define Sg(u) ((u) \u0026gt; eps ? 1 : ((u) \u0026lt; -eps ? -1 : 0)) 5#define Abs(u) (Sg(u) \u0026gt;= 0 ? (u) : -(u)) 6 7LL gcd(LL a, LL b) { 8 return b ? gcd(b, a%b) : a; 9} 10 11void print(LL x, LL y) 12{ 13 if(!x || !y){ 14 printf(\u0026#34;%s\u0026#34;, x ? \u0026#34;Inf\u0026#34; : \u0026#34;0\u0026#34;); 15 return; 16 } 17 int flag = Sg(Sg(x)*Sg(y)); 18 x = Abs(x) * flag; 19 y = Abs(y); 20 21 if(flag\u0026lt;0) printf(\u0026#34;(\u0026#34;); 22 if(x/y) 23 printf(\u0026#34;%lld\u0026#34;, x/y); 24 if(x%y) { 25 LL t = Abs(gcd(x, y)); 26 if(x/y){ 27 x = Abs(x%y); 28 printf(\u0026#34; \u0026#34;); 29 } 30 printf(\u0026#34;%lld/%lld\u0026#34;, x/t, y/t); 31 } 32 if(flag\u0026lt;0) printf(\u0026#34;)\u0026#34;); 33} 34 35int main() 36{ 37 LL x1, x2, y1, y2; 38 scanf(\u0026#34;%lld/%lld %lld/%lld\u0026#34;, \u0026amp;x1, \u0026amp;x2, \u0026amp;y1, \u0026amp;y2); 39 40 print(x1, x2); printf(\u0026#34; + \u0026#34;); print(y1, y2); printf(\u0026#34; = \u0026#34;); 41 print(x1*y2+x2*y1, x2*y2); printf(\u0026#34;\\n\u0026#34;); 42 43 print(x1, x2); printf(\u0026#34; - \u0026#34;); print(y1, y2); printf(\u0026#34; = \u0026#34;); 44 print(x1*y2-x2*y1, x2*y2); printf(\u0026#34;\\n\u0026#34;); 45 46 print(x1, x2); printf(\u0026#34; * \u0026#34;); print(y1, y2); printf(\u0026#34; = \u0026#34;); 47 print(x1*y1, x2*y2); printf(\u0026#34;\\n\u0026#34;); 48 49 print(x1, x2); printf(\u0026#34; / \u0026#34;); print(y1, y2); printf(\u0026#34; = \u0026#34;); 50 print(x1*y2, x2*y1); printf(\u0026#34;\\n\u0026#34;); 51 52 return 0; 53} ","permalink":"https://blog.lordash.de/posts/solution/patb-1034-%E6%9C%89%E7%90%86%E6%95%B0%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97/","summary":"有理数四则运算 (PATB-1034) 题面 本题要求编写程序，计算 2 个有理数的和、差、积、商。 输入 输入在一行中按照 a1/b1 a2/b2 的格式给出两个分数形式的有理数，其中分子和分母","title":"PATB-1034 有理数四则运算"},{"content":"旧键盘打字 (PATB-1033) 题面 旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及坏掉的那些键，打出的结果文字会是怎样？\n输入 输入在 2 行中分别给出坏掉的那些键、以及应该输入的文字。其中对应英文字母的坏键以大写给出；每段文字是不超过 10^5 个字符的串。可用的字符包括字母 [a-z, A-Z]、数字 0-9、以及下划线 _（代表空格）、,、.、-、+（代表上档键）。题目保证第 2 行输入的文字串非空。\n注意：如果上档键坏掉了，那么大写的英文字母无法被打出。\n输出 在一行中输出能够被打出的结果文字。如果没有一个字符能被打出，则输出空行。\n样例输入 17+IE. 27_This_is_a_test. 样例输出 1_hs_s_a_tst 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2int a[mxn]; 3char s[mxn]; 4 5int main() 6{ 7 fgets(s, mxn, stdin); 8 for(int i=0; s[i]; i++) 9 { 10 if(isalpha(s[i])){ 11 a[toupper(s[i])]++; 12 a[tolower(s[i])]++; 13 }else 14 a[s[i]]++; 15 } 16 17 fgets(s, mxn, stdin); 18 for(int i=0; s[i]; i++) 19 { 20 if(a[s[i]]) 21 continue; 22 if(isupper(s[i]) \u0026amp;\u0026amp; a[\u0026#39;+\u0026#39;]) 23 continue; 24 printf(\u0026#34;%c\u0026#34;, s[i]); 25 } 26 printf(\u0026#34;\\n\u0026#34;); 27 28 return 0; 29} ","permalink":"https://blog.lordash.de/posts/solution/patb-1033-%E6%97%A7%E9%94%AE%E7%9B%98%E6%89%93%E5%AD%97/","summary":"旧键盘打字 (PATB-1033) 题面 旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及坏掉的那些键，打出的结果文","title":"PATB-1033 旧键盘打字"},{"content":"挖掘机技术哪家强 (PATB-1032) 题面 为了用事实说明挖掘机技术到底哪家强，PAT 组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。\n输入 输入在第 1 行给出不超过 10^5 的正整数 N，即参赛人数。随后 N 行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从 1 开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。\n输出 在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。\n样例输入 16 23 65 32 80 41 100 52 70 63 40 73 0 样例输出 12 150 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2int a[mxn]; 3 4int main() 5{ 6 int n; 7 scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 8 9 int num = 0, x, y; 10 for(int i = 0; i\u0026lt;n; i++) 11 { 12 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;x, \u0026amp;y); 13 a[x] += y; 14 num = max(num, x); 15 } 16 int mx = 0, id = 0; 17 for(int i=1; i\u0026lt;=num; i++) 18 { 19 if(a[i]\u0026gt;mx) { 20 mx = a[i]; 21 id = i; 22 } 23 } 24 printf(\u0026#34;%d %d\\n\u0026#34;, id, a[id]); 25 26 return 0; 27} ","permalink":"https://blog.lordash.de/posts/solution/patb-1032-%E6%8C%96%E6%8E%98%E6%9C%BA%E6%8A%80%E6%9C%AF%E5%93%AA%E5%AE%B6%E5%BC%BA/","summary":"挖掘机技术哪家强 (PATB-1032) 题面 为了用事实说明挖掘机技术到底哪家强，PAT 组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。 输入 输","title":"PATB-1032 挖掘机技术哪家强"},{"content":"查验身份证 (PATB-1031) 题面 一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：\n首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值Z；最后按照以下关系对应Z值与校验码M的值：\n1Z：0 1 2 3 4 5 6 7 8 9 10 2M：1 0 X 9 8 7 6 5 4 3 2 现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。\n输入 输入第一行给出正整数N（≤100）是输入的身份证号码的个数。随后N行，每行给出1个18位身份证号码。\n输出 按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出All passed。\n样例输入 14 2320124198808240056 312010X198901011234 4110108196711301866 537070419881216001X 样例输出 112010X198901011234 2110108196711301866 337070419881216001X 样例输入 12 2320124198808240056 3110108196711301862 样例输出 1All passed 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2int p[] = {7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2}; 3char m[] = \u0026#34;10X98765432\u0026#34;, s[mxn]; 4 5int main() 6{ 7 int n; 8 scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 9 10 int ans = 0; 11 for(int cs = 0; cs\u0026lt;n; cs++) 12 { 13 scanf(\u0026#34;%s\u0026#34;, s); 14 15 int z = 0, err = 0; 16 for(int i=0; i\u0026lt;17; i++) 17 if(isdigit(s[i])) 18 z += (s[i]-\u0026#39;0\u0026#39;) * p[i]; 19 else{ 20 err = 1; break; 21 } 22 23 if(!err \u0026amp;\u0026amp; s[17] == m[z%11]) 24 ans++; 25 else 26 printf(\u0026#34;%s\\n\u0026#34;, s); 27 } 28 if(ans == n) 29 printf(\u0026#34;All passed\\n\u0026#34;); 30 31 return 0; 32} ","permalink":"https://blog.lordash.de/posts/solution/patb-1031-%E6%9F%A5%E9%AA%8C%E8%BA%AB%E4%BB%BD%E8%AF%81/","summary":"查验身份证 (PATB-1031) 题面 一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下： 首先对前17位数字加权求和，权重","title":"PATB-1031 查验身份证"},{"content":"完美数列 (PATB-1030) 题面 给定一个正整数数列，和正整数 p，设这个数列中的最大值是 M，最小值是 m，如果 M≤mp，则称这个数列是完美数列。\n现在给定参数 p 和一些正整数，请你从中选择尽可能多的数构成一个完美数列\n输入 输入第一行给出两个正整数 N 和 p，其中 N（≤10^5）是输入的正整数的个数，p（≤10^9）是给定的参数。第二行给出 N 个正整数，每个数不超过 10^9。\n输出 在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。\n样例输入 110 8 22 3 20 4 5 1 6 7 8 9 样例输出 18 提示 无\n思路 代码 1typedef long long LL; 2const int mxn = 1e5 + 5; 3LL a[mxn]; 4 5int main() 6{ 7 int n, p; 8 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;p); 9 10 for(int i=0; i\u0026lt;n; i++) 11 scanf(\u0026#34;%lld\u0026#34;, \u0026amp;a[i]); 12 sort(a, a+n); 13 14 int ans = 1; 15 for(int i=0; i\u0026lt;n; i++) 16 { 17 int count = ans - 1; 18 for(int j=i+count; j\u0026lt;n; j++) 19 { 20 if(a[j] \u0026lt;= p*a[i]) 21 count++; 22 else 23 break; 24 } 25 ans = max(ans, count); 26 27 if(i+count \u0026gt; n) 28 break; 29 } 30 printf(\u0026#34;%d\\n\u0026#34;, ans); 31 return 0; 32} ","permalink":"https://blog.lordash.de/posts/solution/patb-1030-%E5%AE%8C%E7%BE%8E%E6%95%B0%E5%88%97/","summary":"完美数列 (PATB-1030) 题面 给定一个正整数数列，和正整数 p，设这个数列中的最大值是 M，最小值是 m，如果 M≤mp，则称这个数列是完美数列。 现在给定参数 p 和一","title":"PATB-1030 完美数列"},{"content":"旧键盘 (PATB-1029) 题面 旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及实际被输入的文字，请你列出肯定坏掉的那些键。\n输入 输入在 2 行中分别给出应该输入的文字、以及实际被输入的文字。每段文字是不超过 80 个字符的串，由字母 A-Z（包括大、小写）、数字 0-9、以及下划线 _（代表空格）组成。题目保证 2 个字符串均非空。\n输出 按照发现顺序，在一行中输出坏掉的键。其中英文字母只输出大写，每个坏键只输出一次。题目保证至少有 1 个坏键。\n样例输入 17_This_is_a_test 2_hs_s_a_es 样例输出 17TI 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2char s[mxn], t[mxn]; 3int a[mxn]; 4 5int main() 6{ 7 scanf(\u0026#34;%s %s\u0026#34;, s, t); 8 int sl = strlen(s); 9 int tl = strlen(t); 10 11 for(int i=0; i\u0026lt;tl; i++) 12 { 13 if(isalpha(t[i])) 14 a[toupper(t[i])]++; 15 else 16 a[t[i]]++; 17 } 18 19 for(int i=0; i\u0026lt;sl; i++) 20 { 21 if(isalpha(s[i])) 22 s[i] = toupper(s[i]); 23 if(a[s[i]] == 0) 24 { 25 printf(\u0026#34;%c\u0026#34;, s[i]); 26 a[s[i]]++; 27 } 28 } 29 return 0; 30} ","permalink":"https://blog.lordash.de/posts/solution/patb-1029-%E6%97%A7%E9%94%AE%E7%9B%98/","summary":"旧键盘 (PATB-1029) 题面 旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及实际被输入的文字，请你列出肯定","title":"PATB-1029 旧键盘"},{"content":"人口普查 (PATB-1028) 题面 某城镇进行人口普查，得到了全体居民的生日。现请你写个程序，找出镇上最年长和最年轻的人。\n这里确保每个输入的日期都是合法的，但不一定是合理的——假设已知镇上没有超过 200 岁的老人，而今天是 2014 年 9 月 6 日，所以超过 200 岁的生日和未出生的生日都是不合理的，应该被过滤掉。\n输入 输入在第一行给出正整数 N，取值在(0,105]；随后 N 行，每行给出 1 个人的姓名（由不超过 5 个英文字母组成的字符串）、以及按 yyyy/mm/dd（即年/月/日）格式给出的生日。题目保证最年长和最年轻的人没有并列。\n输出 在一行中顺序输出有效生日的个数、最年长人和最年轻人的姓名，其间以空格分隔。\n样例输入 15 2John 2001/05/12 3Tom 1814/09/06 4Ann 2121/01/30 5James 1814/09/05 6Steve 1967/11/20 样例输出 13 Tom John 提示 无\n思路 代码 1struct P{ 2 char s[15], t[15]; 3}tmp, mx, mi; 4 5int main() 6{ 7 int n; 8 scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 9 10 int num = 0; 11 for(int i=0; i\u0026lt;n; i++) 12 { 13 scanf(\u0026#34;%s %s\u0026#34;, tmp.s, tmp.t); 14 15 if(strcmp(tmp.t, \u0026#34;1814/09/06\u0026#34;) \u0026lt; 0) 16 continue; 17 if(strcmp(tmp.t, \u0026#34;2014/09/06\u0026#34;) \u0026gt; 0) 18 continue; 19 num++; 20 21 if(num==1) 22 { 23 strcpy(mi.s, tmp.s); strcpy(mi.t, tmp.t); 24 strcpy(mx.s, tmp.s); strcpy(mx.t, tmp.t); 25 continue; 26 } 27 28 if(strcmp(tmp.t, mi.t) \u0026lt; 0) { 29 strcpy(mi.s, tmp.s); strcpy(mi.t, tmp.t); 30 } 31 32 if(strcmp(tmp.t, mx.t) \u0026gt; 0) { 33 strcpy(mx.s, tmp.s); strcpy(mx.t, tmp.t); 34 } 35 } 36 if(num) 37 printf(\u0026#34;%d %s %s\\n\u0026#34;, num, mi.s, mx.s); 38 else 39 printf(\u0026#34;0\\n\u0026#34;); 40 41 return 0; 42} ","permalink":"https://blog.lordash.de/posts/solution/patb-1028-%E4%BA%BA%E5%8F%A3%E6%99%AE%E6%9F%A5/","summary":"人口普查 (PATB-1028) 题面 某城镇进行人口普查，得到了全体居民的生日。现请你写个程序，找出镇上最年长和最年轻的人。 这里确保每个输入的日期都是合法的，但不一","title":"PATB-1028 人口普查"},{"content":"打印沙漏 (PATB-1027) 题面 本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印\n1***** 2 *** 3 * 4 *** 5***** 所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。\n给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。\n输入 输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。\n输出 首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。\n样例输入 119 * 样例输出 1***** 2 *** 3 * 4 *** 5***** 62 提示 无\n思路 代码 1int main() 2{ 3 int n; char c; 4 scanf(\u0026#34;%d %c\u0026#34;, \u0026amp;n, \u0026amp;c); 5 6 int x, num=0; 7 for(x=1; ; x++) 8 { 9 if(n \u0026lt; 2*x*x-1) 10 { 11 x--; 12 num = 2*x*x-1; 13 break; 14 } 15 } 16 int flag = 1, m = 2*x-1; 17 int a = 0, b = m; 18 19 for(int i=1; i\u0026lt;=m; i++) 20 { 21 for(int j=0; j\u0026lt;a; j++) printf(\u0026#34; \u0026#34;); 22 for(int j=0; j\u0026lt;b; j++) printf(\u0026#34;%c\u0026#34;, c); 23 printf(\u0026#34;\\n\u0026#34;); 24 if(i==x) flag = 0; 25 26 if(flag) 27 a++, b-=2; 28 else 29 a--, b+=2; 30 } 31 printf(\u0026#34;%d\\n\u0026#34;, n-num); 32 33 return 0; 34} ","permalink":"https://blog.lordash.de/posts/solution/patb-1027-%E6%89%93%E5%8D%B0%E6%B2%99%E6%BC%8F/","summary":"打印沙漏 (PATB-1027) 题面 本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印 1***** 2 *** 3 * 4 *** 5***** 所谓“沙漏形状”，是指","title":"PATB-1027 打印沙漏"},{"content":"程序运行时间 (PATB-1026) 题面 要获得一个 C 语言程序的运行时间，常用的方法是调用头文件 time.h，其中提供了 clock() 函数，可以捕捉从程序开始运行到 clock() 被调用时所耗费的时间。这个时间单位是 clock tick，即“时钟打点”。同时还有一个常数 CLK_TCK，给出了机器时钟每秒所走的时钟打点数。于是为了获得一个函数 f 的运行时间，我们只要在调用 f 之前先调用 clock()，获得一个时钟打点数 C1；在 f 执行完成后再调用 clock()，获得另一个时钟打点数 C2；两次获得的时钟打点数之差 (C2-C1) 就是 f 运行所消耗的时钟打点数，再除以常数 CLK_TCK，就得到了以秒为单位的运行时间。\n这里不妨简单假设常数 CLK_TCK 为 100。现给定被测函数前后两次获得的时钟打点数，请你给出被测函数运行的时间。\n输入 输入在一行中顺序给出 2 个整数 C1 和 C2。注意两次获得的时钟打点数肯定不相同，即 C1 \u0026lt; C2，并且取值在 [0,10^7]。\n输出 在一行中输出被测函数运行的时间。运行时间必须按照 hh:mm:ss（即2位的 时:分:秒）格式输出；不足 1 秒的时间四舍五入到秒。\n样例输入 1123 4577973 样例输出 112:42:59 提示 无\n思路 代码 1int main() 2{ 3 int c1, c2; 4 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;c1, \u0026amp;c2); 5 6 int t = (c2-c1) / 100; 7 int x = (c2-c1) % 100 \u0026gt;= 50 ? 1 : 0; 8 printf(\u0026#34;%02d:%02d:%02d\\n\u0026#34;, t/3600, t%3600/60, t%60+x); 9 10 return 0; 11} ","permalink":"https://blog.lordash.de/posts/solution/patb-1026-%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/","summary":"程序运行时间 (PATB-1026) 题面 要获得一个 C 语言程序的运行时间，常用的方法是调用头文件 time.h，其中提供了 clock() 函数，可以捕捉从程序开始运行到 clock() 被调用时所","title":"PATB-1026 程序运行时间"},{"content":"反转链表 (PATB-1025) 题面 给定一个常数 K 以及一个单链表 L，请编写程序将 L 中每 K 个结点反转。例如：给定 L 为 1→2→3→4→5→6，K 为 3，则输出应该为 3→2→1→6→5→4；如果 K 为 4，则输出应该为 4→3→2→1→5→6，即最后不到 K 个元素不反转。\n输入 每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 N (≤10^5)、以及正整数 K (≤N)，即要求反转的子链结点的个数。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。\n接下来有 N 行，每行格式为：\n1Address Data Next 其中 Address 是结点地址，Data 是该结点保存的整数数据，Next 是下一结点的地址。\n输出 对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。\n样例输入 100100 6 4 200000 4 99999 300100 1 12309 468237 6 -1 533218 3 00000 699999 5 68237 712309 2 33218 样例输出 100000 4 33218 233218 3 12309 312309 2 00100 400100 1 99999 599999 5 68237 668237 6 -1 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2int val[mxn], nxt[mxn], ans[mxn]; 3 4int main() 5{ 6 int s, n, k, x; 7 scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;s, \u0026amp;n, \u0026amp;k); 8 9 for (int i=0; i\u0026lt;n; i++) 10 { 11 scanf(\u0026#34;%d\u0026#34;, \u0026amp;x); 12 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;val[x], \u0026amp;nxt[x]); 13 } 14 15 int num = 0; 16 for (int t=s; t!=-1; t=nxt[t]) { 17 ans[num++] = t; 18 } 19 20 for (int i=0; i\u0026lt;(num-num%k); i+=k) 21 reverse(begin(ans)+i, begin(ans)+i+k); 22 23 for (int i=0; i\u0026lt;num-1; i++) 24 printf(\u0026#34;%05d %d %05d\\n\u0026#34;, ans[i], val[ans[i]], ans[i+1]); 25 26 printf(\u0026#34;%05d %d -1\u0026#34;, ans[num-1], val[ans[num-1]]); 27 return 0; 28} ","permalink":"https://blog.lordash.de/posts/solution/patb-1025-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/","summary":"反转链表 (PATB-1025) 题面 给定一个常数 K 以及一个单链表 L，请编写程序将 L 中每 K 个结点反转。例如：给定 L 为 1→2→3→4→5→6，K 为 3，则输出应该为 3→","title":"PATB-1025 反转链表"},{"content":" 关于 个人 相册 分享 游戏 普普通通工科男，本科毕业于河南某双非，软件工程专业。目前是某公司的Linux应用开发工程师。\n或许，我们有些共同话题：\n运动 热爱跑步，SB：2KM7min、5KM20min、10KM43min。待郑州4年没抽到郑开。\n跆拳道品势黑带一段。不会竞技，不会特技，也没参加过比赛。\n音乐 真·五音不全。\n喜欢电音，Avicii鸽迷。\n自学半音阶口琴中……\n游戏 3D眩晕\nFPS：人间地狱、CSGO、战地1\nMOBA：英雄联盟\nARPG：上古卷轴5：天际、塞尔达传说：旷野之息、鬼泣系列\n其它联机：饥荒、Minecraft、原神\n厨艺 会煮泡面和挂面。还会做红烧排骨、可乐鸡翅、麻辣虾尾……\n其它 蒟蒻毕业时的真·简历 ","permalink":"https://blog.lordash.de/f/personal/","summary":"关于 个人 相册 分享 游戏 普普通通工科男，本科毕业于河南某双非，软件工程专业。目前是某公司的Linux应用开发工程师。 或许，我们有些共同话题： 运动","title":"个人"},{"content":" 关于 个人 相册 分享 游戏 最初是在校期间参加算法竞赛时，为了记录和分享解题过程而搭建的博客。但是现在毕业沦为社畜了，于是打算加入一些非技术类的随笔和生活感悟之类的。\n本博客使用Hexo博客引擎和NexT主题搭建，具体版本如下：\n1os: win32 10.0.19044 2node: 16.14.2 3v8: 9.4.146.24-node.20 4hexo: 6.1.0 5hexo-cli: 4.3.0 6NexT version 8.11.1 基本的搭建和优化过程可以参考【配置】Windows10使用Hexo和Pages服务搭建个人博客和【配置】Hexo以及NexT8主题的配置这两篇文章。\n目前部署在Vercel和Github Pages上，可以通过以下链接访问：\nblog.lordash.de gh1656409967.github.io 访问卡顿，推荐使用科学上网 ","permalink":"https://blog.lordash.de/f/about/","summary":"关于 个人 相册 分享 游戏 最初是在校期间参加算法竞赛时，为了记录和分享解题过程而搭建的博客。但是现在毕业沦为社畜了，于是打算加入一些非技术类的随笔","title":"关于"},{"content":"科学计数法 (PATB-1024) 题面 科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式[+-][1-9].[0-9]+E[+-][0-9]+，即数字的整数部分只有 1 位，小数部分至少有 1 位，该数字及其指数部分的正负号即使对正数也必定明确给出。\n现以科学计数法的格式给出实数 A，请编写程序按普通数字表示法输出 A，并保证所有有效位都被保留。\n输入 每个输入包含 1 个测试用例，即一个以科学计数法表示的实数 A。该数字的存储长度不超过 9999 字节，且其指数的绝对值不超过 9999。\n输出 对每个测试用例，在一行中按普通数字表示法输出 A，并保证所有有效位都被保留，包括末尾的 0。\n样例输入1 1+1.23400E-03 样例输出1 10.00123400 样例输入2 1-1.2E+10 样例输出2 1-12000000000 提示 无\n思路 代码 1char s[mxn]; 2 3int main() 4{ 5 while(~ scanf(\u0026#34;%s\u0026#34;, s) ) 6 { 7 char* t = strchr(s, \u0026#39;E\u0026#39;); 8 int len = t - s - 3, l, r; 9 sscanf(t + 1, \u0026#34;%d\u0026#34;, \u0026amp;r); 10 *(t) = \u0026#39;\\0\u0026#39;; 11 t = strchr(s, \u0026#39;.\u0026#39;) + 1; 12 sscanf(s+1, \u0026#34;%d\u0026#34;, \u0026amp;l); 13 14 if (s[0] == \u0026#39;-\u0026#39;) 15 printf(\u0026#34;-\u0026#34;); 16 17 if (r \u0026gt; 0) 18 { 19 if (r \u0026gt; len) 20 { 21 printf(\u0026#34;%d%s\u0026#34;, l, t); 22 for (int i = 0; i \u0026lt; r - len; i++) 23 printf(\u0026#34;0\u0026#34;); 24 } 25 else 26 { 27 printf(\u0026#34;%d\u0026#34;, l); 28 int len2 = strlen(t); 29 for (int i = 0; i \u0026lt; len2; i++) 30 { 31 if (i == r) 32 printf(\u0026#34;.\u0026#34;); 33 printf(\u0026#34;%c\u0026#34;, t[i]); 34 } 35 } 36 } 37 else 38 { 39 printf(\u0026#34;0.\u0026#34;); 40 for (int i = 0; i + r + 1 \u0026lt; 0; i++) 41 printf(\u0026#34;0\u0026#34;); 42 printf(\u0026#34;%d%s\u0026#34;, l, t); 43 } 44 45 printf(\u0026#34;\\n\u0026#34;); 46 } 47 return 0; 48} ","permalink":"https://blog.lordash.de/posts/solution/patb-1024-%E7%A7%91%E5%AD%A6%E8%AE%A1%E6%95%B0%E6%B3%95/","summary":"科学计数法 (PATB-1024) 题面 科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式[+-][1-9].[0-9]+E[+-][0-","title":"PATB-1024 科学计数法"},{"content":"组个最小数 (PATB-1023) 题面 给定数字 0-9 各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）。例如：给定两个 0，两个 1，三个 5，一个 8，我们得到的最小的数就是 10015558。\n现给定数字，请编写程序输出能够组成的最小的数。\n输入 输入在一行中给出 10 个非负整数，顺序表示我们拥有数字 0、数字 1、……数字 9 的个数。整数间用一个空格分隔。10 个数字的总个数不超过 50，且至少拥有 1 个非 0 的数字。\n输出 1在一行中输出能够组成的最小的数。 样例输入 12 2 0 0 0 3 0 0 1 0 样例输出 110015558 提示 无\n思路 代码 1int a[15]; 2 3int main() 4{ 5 for (int i = 0; i \u0026lt; 10; i++) 6 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); 7 8 for (int i = 1; i \u0026lt; 10; i++) 9 { 10 if (a[i]) 11 { 12 printf(\u0026#34;%d\u0026#34;, i); 13 a[i]--; 14 break; 15 } 16 } 17 18 for (int i = 0; i \u0026lt; 10; i++) 19 { 20 while (a[i]) 21 { 22 printf(\u0026#34;%d\u0026#34;, i); 23 a[i]--; 24 } 25 } 26 27 printf(\u0026#34;\\n\u0026#34;); 28 return 0; 29} ","permalink":"https://blog.lordash.de/posts/solution/patb-1023-%E7%BB%84%E4%B8%AA%E6%9C%80%E5%B0%8F%E6%95%B0/","summary":"组个最小数 (PATB-1023) 题面 给定数字 0-9 各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）。例如：","title":"PATB-1023 组个最小数"},{"content":"D进制的A+B (PATB-1022) 题面 输入两个非负 10 进制整数 A 和 B (≤2^30−1)，输出 A+B 的 D (1\u0026lt;D≤10)进制数。\n输入 输入在一行中依次给出 3 个整数 A、B 和 D。\n输出 输出 A+B 的 D 进制数。\n样例输入 1123 456 8 样例输出 11103 提示 无\n思路 代码 1int n, m; 2char s[mxn]; 3 4int main() 5{ 6 LL a, b, d; 7 scanf(\u0026#34;%lld %lld %lld\u0026#34;, \u0026amp;a, \u0026amp;b, \u0026amp;d); 8 9 LL t = a + b; 10 11 for (n = 0; t; t/=d) 12 s[++n] = \u0026#34;0123456789\u0026#34;[t % d]; 13 14 if (!n) 15 printf(\u0026#34;0\u0026#34;); 16 17 for(; n; n--) 18 printf(\u0026#34;%c\u0026#34;, s[n]); 19 20 printf(\u0026#34;\\n\u0026#34;); 21 return 0; 22} ","permalink":"https://blog.lordash.de/posts/solution/patb-1022-d%E8%BF%9B%E5%88%B6%E7%9A%84a+b/","summary":"D进制的A+B (PATB-1022) 题面 输入两个非负 10 进制整数 A 和 B (≤2^30−1)，输出 A+B 的 D (1\u0026lt;D≤10)进制数。 输入 输入在一行中依次给出 3 个整数","title":"PATB-1022 D进制的A+B"},{"content":"个位数统计 (PATB-1021) 题面 给定一个 k 位整数 N=dk−1×10^(k−1)+⋯+d1×10^1+d0 (0≤di≤9, i=0,⋯,k−1, dk−1\u0026gt;0)，请编写程序统计每种不同的个位数字出现的次数。例如：给定 N=100311，则有 2 个 0，3 个 1，和 1 个 3。\n输入 每个输入包含 1 个测试用例，即一个不超过 1000 位的正整数 N。\n输出 对 N 中每一种不同的个位数字，以 D:M 的格式在一行中输出该位数字 D 及其在 N 中出现的次数 M。要求按 D 的升序输出。\n样例输入 1100311 样例输出 10:2 21:3 33:1 提示 无\n思路 代码 1int n, m; 2int a[15]; 3 4int main() 5{ 6 char t[mxm]; 7 scanf(\u0026#34;%s\u0026#34;, t); 8 int len = strlen(t); 9 for (int i = 0; i \u0026lt; len; i++) 10 { 11 a[t[i] - \u0026#39;0\u0026#39;]++; 12 } 13 for (int i = 0; i \u0026lt;= 9; i++) 14 { 15 if (a[i]) 16 printf(\u0026#34;%d:%d\\n\u0026#34;, i, a[i]); 17 } 18 19 return 0; 20} ","permalink":"https://blog.lordash.de/posts/solution/patb-1021-%E4%B8%AA%E4%BD%8D%E6%95%B0%E7%BB%9F%E8%AE%A1/","summary":"个位数统计 (PATB-1021) 题面 给定一个 k 位整数 N=dk−1×10^(k−1)+⋯+d1×10^1+d0 (0≤di≤9, i=0,⋯,k−1, dk−1\u0026gt;","title":"PATB-1021 个位数统计"},{"content":"月饼 (PATB-1020) 题面 月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。\n注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45/2 = 94.5（亿元）。\n输入 每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 N 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 D 表示市场最大需求量。随后一行给出 N 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 N 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。\n输出 对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。\n样例输入 13 20 218 15 10 375 72 45 样例输出 194.50 提示 无\n思路 代码 1int n, m; 2 3struct P { 4 DB num, price; 5}a[mxn]; 6 7bool cmp(P x, P y) 8{ 9 return x.price / x.num \u0026gt; y.price / y.num; 10} 11 12int main() 13{ 14 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 15 for (int i = 0; i \u0026lt; n; i++) 16 scanf(\u0026#34;%lf\u0026#34;, \u0026amp;a[i].num); 17 18 for (int i = 0; i \u0026lt; n; i++) 19 scanf(\u0026#34;%lf\u0026#34;, \u0026amp;a[i].price); 20 21 sort(a, a + n, cmp); 22 23 DB ans = 0; 24 for (int i = 0; i \u0026lt; n; i++) 25 { 26 if (m \u0026gt; a[i].num) 27 { 28 ans += a[i].price; 29 m -= a[i].num; 30 } 31 else 32 { 33 ans += m * (a[i].price / a[i].num); 34 break; 35 } 36 } 37 printf(\u0026#34;%.2lf\\n\u0026#34;, ans); 38 39 return 0; 40} ","permalink":"https://blog.lordash.de/posts/solution/patb-1020-%E6%9C%88%E9%A5%BC/","summary":"月饼 (PATB-1020) 题面 月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，","title":"PATB-1020 月饼"},{"content":"数字黑洞 (PATB-1019) 题面 给定任一个各位数字不完全相同的 4 位正整数，如果我们先把 4 个数字按非递增排序，再按非递减排序，然后用第 1 个数字减第 2 个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的 6174，这个神奇的数字也叫 Kaprekar 常数。\n例如，我们从6767开始，将得到\n17766 - 6677 = 1089 29810 - 0189 = 9621 39621 - 1269 = 8352 48532 - 2358 = 6174 57641 - 1467 = 6174 6... ... 现给定任意 4 位正整数，请编写程序演示到达黑洞的过程。\n输入 输入给出一个 (0,10^4) 区间内的正整数 N。\n输出 如果 N 的 4 位数字全相等，则在一行内输出 N - N = 0000；否则将计算的每一步在一行内输出，直到 6174 作为差出现，输出格式见样例。注意每个数字按 4 位数格式输出。\n样例输入1 16767 样例输出1 17766 - 6677 = 1089 29810 - 0189 = 9621 39621 - 1269 = 8352 48532 - 2358 = 6174 样例输入2 12222 样例输出2 12222 - 2222 = 0000 提示 无\n思路 代码 1int n, m; 2 3void strrev(char* s, char* t) 4{ 5 int len = strlen(s); 6 for (int i = 0; i \u0026lt; len; i++) 7 { 8 t[i] = s[len - i - 1]; 9 } 10 t[len] = \u0026#39;\\0\u0026#39;; 11} 12 13int main() 14{ 15 scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 16 char t1[15], t2[15], t3[15]; 17 while (1) 18 { 19 sprintf(t2, \u0026#34;%04d\u0026#34;, n); 20 sort(t2, t2 + 4); 21 strrev(t2, t1); 22 sscanf(t1, \u0026#34;%d\u0026#34;, \u0026amp;n); 23 sscanf(t2, \u0026#34;%d\u0026#34;, \u0026amp;m); 24 n = n - m; 25 sprintf(t3, \u0026#34;%04d\u0026#34;, n); 26 printf(\u0026#34;%s - %s = %s\\n\u0026#34;, t1, t2, t3); 27 if (n == 0 || n == 6174) 28 break; 29 } 30 31 return 0; 32} ","permalink":"https://blog.lordash.de/posts/solution/patb-1019-%E6%95%B0%E5%AD%97%E9%BB%91%E6%B4%9E/","summary":"数字黑洞 (PATB-1019) 题面 给定任一个各位数字不完全相同的 4 位正整数，如果我们先把 4 个数字按非递增排序，再按非递减排序，然后用第 1 个数字减第 2 个数字，将得","title":"PATB-1019 数字黑洞"},{"content":"锤子剪刀布 (PATB-1018) 题面 大家应该都会玩“锤子剪刀布”的游戏：两人同时给出手势，胜负规则如图所示：\n现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。\n输入 输入第 1 行给出正整数 N（≤10^5），即双方交锋的次数。随后 N 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。C 代表“锤子”、J 代表“剪刀”、B 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。\n输出 输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。\n样例输入 110 2C J 3J B 4C B 5B B 6B C 7C C 8C B 9J B 10B C 11J J 样例输出 15 3 2 22 3 5 3B B 提示 无\n思路 代码 1int n, m; 2 3char s[] = \u0026#34; BCJ\u0026#34;; 4int a[10], b[10]; 5 6int main() 7{ 8 scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 9 10 char x, y; 11 for (int i = 0; i \u0026lt; n; i++) 12 { 13 scanf(\u0026#34; %c %c\u0026#34;, \u0026amp;x, \u0026amp;y); 14 if (x == y) 15 { 16 a[5]++, b[5]++; 17 continue; 18 } 19 if (x == \u0026#39;B\u0026#39; \u0026amp;\u0026amp; y == \u0026#39;C\u0026#39;) 20 a[1]++, a[4]++, b[6]++; 21 else if (x == \u0026#39;B\u0026#39; \u0026amp;\u0026amp; y == \u0026#39;J\u0026#39;) 22 b[3]++, a[6]++, b[4]++; 23 else if (x == \u0026#39;C\u0026#39; \u0026amp;\u0026amp; y == \u0026#39;J\u0026#39;) 24 a[2]++, a[4]++, b[6]++; 25 else if (x == \u0026#39;C\u0026#39; \u0026amp;\u0026amp; y == \u0026#39;B\u0026#39;) 26 b[1]++, a[6]++, b[4]++; 27 else if (y == \u0026#39;B\u0026#39;) 28 a[3]++, a[4]++, b[6]++; 29 else 30 b[2]++, a[6]++, b[4]++; 31 } 32 33 printf(\u0026#34;%d %d %d\\n\u0026#34;, a[4], a[5], a[6]); 34 printf(\u0026#34;%d %d %d\\n\u0026#34;, b[4], b[5], b[6]); 35 int idx1 = 1, idx2 = 1; 36 for (int i = 1; i \u0026lt;= 3; i++) 37 { 38 if (a[idx1] \u0026lt; a[i]) 39 idx1 = i; 40 if (b[idx2] \u0026lt; b[i]) 41 idx2 = i; 42 } 43 printf(\u0026#34;%c %c\\n\u0026#34;, s[idx1], s[idx2]); 44 45 return 0; 46} ","permalink":"https://blog.lordash.de/posts/solution/patb-1018-%E9%94%A4%E5%AD%90%E5%89%AA%E5%88%80%E5%B8%83/","summary":"锤子剪刀布 (PATB-1018) 题面 大家应该都会玩“锤子剪刀布”的游戏：两人同时给出手势，胜负规则如图所示： 现给出两人的交锋记录，请统计双方的胜、平、负次数，并","title":"PATB-1018 锤子剪刀布"},{"content":" 关于 个人 相册 分享 游戏 你若眉梢嘴角带着笑，何处不是风景\n","permalink":"https://blog.lordash.de/f/gallery/scenery/","summary":"关于 个人 相册 分享 游戏 你若眉梢嘴角带着笑，何处不是风景","title":"风景"},{"content":" 关于 个人 相册 分享 游戏 一星陨落，黯淡不了星空灿烂；一花凋零，荒芜不了整个春天。\n-证书-\n-锻炼-\n-风景-\n-曲谱-\n-菜谱-\n","permalink":"https://blog.lordash.de/f/gallery/","summary":"关于 个人 相册 分享 游戏 一星陨落，黯淡不了星空灿烂；一花凋零，荒芜不了整个春天。 -证书- -锻炼- -风景- -曲谱- -菜谱-","title":"相册"},{"content":"A除以B (PATB-1017) 题面 本题要求计算 A/B，其中 A 是不超过 1000 位的正整数，B 是 1 位正整数。你需要输出商数 Q 和余数 R，使得 A=B×Q+R 成立。\n输入 输入在一行中依次给出 A 和 B，中间以 1 空格分隔。\n输出 在一行中依次输出 Q 和 R，中间以 1 空格分隔。\n样例输入 1123456789050987654321 7 样例输出 117636684150141093474 3 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2char a[mxn]; 3int b; 4 5int main() 6{ 7 scanf(\u0026#34;%s %d\u0026#34;, a, \u0026amp;b); 8 int len = strlen(a), t = 0; 9 for (int i = 0; i \u0026lt; len; i++) 10 { 11 t = t * 10 + a[i] - \u0026#39;0\u0026#39;; 12 if (i || t / b || len \u0026lt;= 1) 13 printf(\u0026#34;%d\u0026#34;, t / b); 14 t %= b; 15 } 16 17 printf(\u0026#34; %d\\n\u0026#34;, t); 18 return 0; 19} ","permalink":"https://blog.lordash.de/posts/solution/patb-1017-a%E9%99%A4%E4%BB%A5b/","summary":"A除以B (PATB-1017) 题面 本题要求计算 A/B，其中 A 是不超过 1000 位的正整数，B 是 1 位正整数。你需要输出商数 Q 和余数 R，使得 A=B×Q+R 成立。 输入 输入在一","title":"PATB-1017 A除以B"},{"content":"部分A+B (PATB-1016) 题面 正整数 A 的“DA（为 1 位整数）部分”定义为由 A 中所有 DA 组成的新整数 PA。例如：给定 A=3862767，DA=6，则 A 的“6 部分”PA 是 66，因为 A 中有 2 个 6。\n现给定 A、DA、B、DB，请编写程序计算 PA+PB。\n输入 输入在一行中依次给出 A、DA、B、DB，中间以空格分隔，其中 0\u0026lt;A,B\u0026lt;10^10。\n输出 在一行中输出 PA+PB 的值。\n样例输入1 13862767 6 13530293 3 样例输出1 1399 样例输入2 13862767 1 13530293 8 样例输出2 10 提示 无\n思路 代码 1int a, b, da, db; 2 3int main() 4{ 5 scanf(\u0026#34;%d %d %d %d\u0026#34;, \u0026amp;a, \u0026amp;da, \u0026amp;b, \u0026amp;db); 6 int ta = 0, tb = 0; 7 while (a) 8 { 9 if (a % 10 == da) 10 ta = ta * 10 + da; 11 a /= 10; 12 } 13 while (b) 14 { 15 if (b % 10 == db) 16 tb = tb * 10 + db; 17 b /= 10; 18 } 19 20 printf(\u0026#34;%d\\n\u0026#34;, ta + tb); 21 return 0; 22} ","permalink":"https://blog.lordash.de/posts/solution/patb-1016-%E9%83%A8%E5%88%86a+b/","summary":"部分A+B (PATB-1016) 题面 正整数 A 的“DA（为 1 位整数）部分”定义为由 A 中所有 DA 组成的新整数 PA。例如：给定 A=3862767，DA=6，则 A 的“6 部","title":"PATB-1016 部分A+B"},{"content":"德才论 (PATB-1015) 题面 宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”\n现给出一批考生的德才分数，请根据司马光的理论给出录取排名。\n输入 输入第一行给出 3 个正整数，分别为：N（≤10^5），即考生总数；L（≥60），为录取最低分数线，即德分和才分均不低于 L 的考生才有资格被考虑录取；H（\u0026lt;100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 H，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 L 的考生也按总分排序，但排在第三类考生之后。\n随后 N 行，每行给出一位考生的信息，包括：准考证号 德分 才分，其中准考证号为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。\n输出 输出第一行首先给出达到最低分数线的考生人数 M，随后 M 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。\n样例输入 114 60 80 210000001 64 90 310000002 90 60 410000011 85 80 510000003 85 80 610000004 80 85 710000005 82 77 810000006 83 76 910000007 90 78 1010000008 75 79 1110000009 59 90 1210000010 88 45 1310000012 80 100 1410000013 90 99 1510000014 66 60 样例输出 112 210000013 90 99 310000012 80 100 410000003 85 80 510000011 85 80 610000004 80 85 710000007 90 78 810000006 83 76 910000005 82 77 1010000002 90 60 1110000014 66 60 1210000008 75 79 1310000001 64 90 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2int n, m; 3 4struct P { 5 int num, d, c; 6 int lv; 7} a[mxn]; 8 9bool cmp(P x, P y) 10{ 11 if (x.lv != y.lv) 12 return x.lv \u0026lt; y.lv; 13 if (x.d + x.c != y.d + y.c) 14 return x.d + x.c \u0026gt; y.d + y.c; 15 if (x.d != y.d) 16 return x.d \u0026gt; y.d; 17 return x.num \u0026lt; y.num; 18} 19 20int l, h; 21 22int main() 23{ 24 scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;n, \u0026amp;l, \u0026amp;h); 25 memset(a, 0, sizeof a); 26 27 int num = n; 28 for (int i = 0; i \u0026lt; n; i++) 29 { 30 scanf(\u0026#34;%d %d %d\u0026#34;, \u0026amp;a[i].num, \u0026amp;a[i].d, \u0026amp;a[i].c); 31 if (a[i].d \u0026gt;= h \u0026amp;\u0026amp; a[i].c \u0026gt;= h) 32 a[i].lv = 1; 33 else if (a[i].d \u0026gt;= h \u0026amp;\u0026amp; a[i].c \u0026gt;= l) 34 a[i].lv = 2; 35 else if (a[i].d \u0026gt;= a[i].c \u0026amp;\u0026amp; a[i].d \u0026gt;= l \u0026amp;\u0026amp; a[i].c \u0026gt;= l) 36 a[i].lv = 3; 37 else if (a[i].d \u0026gt;= l \u0026amp;\u0026amp; a[i].c \u0026gt;= l) 38 a[i].lv = 4; 39 else 40 { 41 a[i].lv = 5; 42 num--; 43 } 44 } 45 sort(a, a + n, cmp); 46 47 printf(\u0026#34;%d\\n\u0026#34;, num); 48 for (int i = 0; i \u0026lt; num; i++) 49 printf(\u0026#34;%d %d %d\\n\u0026#34;, a[i].num, a[i].d, a[i].c); 50 51 return 0; 52} ","permalink":"https://blog.lordash.de/posts/solution/patb-1015-%E5%BE%B7%E6%89%8D%E8%AE%BA/","summary":"德才论 (PATB-1015) 题面 宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人","title":"PATB-1015 德才论"},{"content":"福尔摩斯的约会 (PATB-1014) 题面 大侦探福尔摩斯接到一张奇怪的字条：我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s\u0026amp;hgsfdk d\u0026amp;Hyscvnm。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间星期四 14:04，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 D，代表星期四；第 2 对相同的字符是 E ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 A 到 N 表示）；后面两字符串第 1 对相同的英文字母 s 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。\n输入 输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。\n输出 在一行中输出约会的时间，格式为 DAY HH:MM，其中 DAY 是某星期的 3 字符缩写，即 MON 表示星期一，TUE 表示星期二，WED 表示星期三，THU 表示星期四，FRI 表示星期五，SAT 表示星期六，SUN 表示星期日。题目输入保证每个测试存在唯一解。\n样例输入 13485djDkxh4hhGE 22984akDfkkkkggEdsb 3s\u0026amp;hgsfdk 4d\u0026amp;Hyscvnm 样例输出 1THU 14:04 提示 无\n思路 代码 1int n, m; 2 3char day[][5] = { \u0026#34;MON\u0026#34;,\u0026#34;TUE\u0026#34;,\u0026#34;WED\u0026#34;,\u0026#34;THU\u0026#34;,\u0026#34;FRI\u0026#34;,\u0026#34;SAT\u0026#34;,\u0026#34;SUN\u0026#34; }; 4char HH[] = \u0026#34;0123456789ABCDEFGHIJKLMN\u0026#34;; 5char s1[105], s2[105], s3[105], s4[105]; 6 7int main() 8{ 9 scanf(\u0026#34;%s %s %s %s\u0026#34;, s1, s2, s3, s4); 10 11 int len = min(strlen(s1), strlen(s2)), flag = 1; 12 for (int i = 0; i \u0026lt; len; i++) 13 { 14 if (s1[i] == s2[i]) 15 { 16 if (\u0026#39;A\u0026#39; \u0026lt;= s1[i] \u0026amp;\u0026amp; s1[i] \u0026lt;= \u0026#39;G\u0026#39; \u0026amp;\u0026amp; flag) 17 { 18 printf(\u0026#34;%s \u0026#34;, day[s1[i] - \u0026#39;A\u0026#39;]); 19 flag = 0; 20 } 21 else if ((isdigit(s1[i]) || (\u0026#39;A\u0026#39; \u0026lt;= s1[i] \u0026amp;\u0026amp; s1[i] \u0026lt;= \u0026#39;N\u0026#39;)) \u0026amp;\u0026amp; !flag) 22 { 23 printf(\u0026#34;%02d:\u0026#34;, strchr(HH, s1[i]) - HH); 24 break; 25 } 26 } 27 } 28 29 len = min(strlen(s3), strlen(s4)); 30 for (int i = 0; i \u0026lt; len; i++) 31 { 32 if (isalpha(s3[i]) \u0026amp;\u0026amp; s3[i] == s4[i]) 33 { 34 printf(\u0026#34;%02d\\n\u0026#34;, i); 35 break; 36 } 37 } 38 39 return 0; 40} ","permalink":"https://blog.lordash.de/posts/solution/patb-1014-%E7%A6%8F%E5%B0%94%E6%91%A9%E6%96%AF%E7%9A%84%E7%BA%A6%E4%BC%9A/","summary":"福尔摩斯的约会 (PATB-1014) 题面 大侦探福尔摩斯接到一张奇怪的字条：我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s\u0026amp;hgsfdk d\u0026amp;Hyscvnm。大侦探很快就明白了，字条上奇怪的乱码实际","title":"PATB-1014 福尔摩斯的约会"},{"content":"数素数 (PATB-1013) 题面 令 Pi 表示第 i 个素数。现任给两个正整数 M≤N≤10^4，请输出 PM 到 PN 的所有素数。\n输入 输入在一行中给出 M 和 N，其间以空格分隔。\n输出 输出从 PM 到 PN 的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。\n样例输入 15 27 样例输出 111 13 17 19 23 29 31 37 41 43 247 53 59 61 67 71 73 79 83 89 397 101 103 提示 无\n思路 代码 1const int mxn = 1e6 + 5; 2bool isP[mxn]; 3int prime[mxn]; 4 5int euler(int n) 6{ 7 memset(isP, 1, sizeof isP); 8 isP[0] = isP[1] = 0; 9 10 int cnt = 0; 11 for (int i = 2; i \u0026lt;= n; i++) 12 { 13 if (isP[i]) prime[++cnt] = i; 14 for (int j = 1; j \u0026lt;= cnt; j++) 15 { 16 if (i * prime[j] \u0026gt; n) break; 17 isP[i * prime[j]] = 0; 18 if (i % prime[j] == 0) break; 19 } 20 } 21 return cnt; 22} 23 24int n, m; 25 26int main() 27{ 28 int cnt = euler(N); 29 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 30 31 int nf = 0, lc = 0; 32 for (int i = n; i \u0026lt;= m; i++) 33 { 34 if (nf) 35 printf(\u0026#34; \u0026#34;); 36 else 37 nf = 1; 38 39 printf(\u0026#34;%d\u0026#34;, prime[i]); 40 lc++; 41 42 if (lc % 10 == 0) 43 { 44 nf = 0; 45 printf(\u0026#34;\\n\u0026#34;); 46 } 47 } 48 49 return 0; 50} ","permalink":"https://blog.lordash.de/posts/solution/patb-1013-%E6%95%B0%E7%B4%A0%E6%95%B0/","summary":"数素数 (PATB-1013) 题面 令 Pi 表示第 i 个素数。现任给两个正整数 M≤N≤10^4，请输出 PM 到 PN 的所有素数。 输入 输入在一行中给出 M 和 N，其间以空格分隔。 输出 输","title":"PATB-1013 数素数"},{"content":"数字分类 (PATB-1012) 题面 给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：\nA1 = 能被 5 整除的数字中所有偶数的和； A2 = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 n1−n2+n3−n4⋯； A3 = 被 5 除后余 2 的数字的个数； A4 = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位； A5 = 被 5 除后余 4 的数字中最大数字。 输入 每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 N，随后给出 N 个不超过 1000 的待分类的正整数。数字间以空格分隔。\n输出 对给定的 N 个正整数，按题目要求计算 A1~A5 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。\n若其中某一类数字不存在，则在相应位置输出 N。\n样例输入1 113 1 2 3 4 5 6 7 8 9 10 20 16 18 样例输出1 130 11 2 9.7 9 样例输入2 18 1 2 4 5 6 7 9 16 样例输出2 1N 11 2 N 9 提示 无\n思路 代码 1int n, m; 2 3int main() 4{ 5 scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 6 7 int a1 = 0, a2 = 0, a3 = 0, a5 = 0; 8 int c1 = 0, c2 = 0, c4 = 0, c5 = 0; 9 DB a4 = 0; 10 11 for (int i = 0; i \u0026lt; n; i++) 12 { 13 scanf(\u0026#34;%d\u0026#34;, \u0026amp;m); 14 switch (m % 5) 15 { 16 case 0: 17 if (m % 2 == 0) 18 { 19 c1++; 20 a1 += m; 21 } 22 break; 23 case 1: 24 c2++; 25 a2 = a2 + m * ((c2 \u0026amp; 1) ? 1 : -1); 26 break; 27 case 2: 28 a3++; 29 break; 30 case 3: 31 c4++, a4 += m; 32 break; 33 case 4: 34 c5++; 35 a5 = max(a5, m); 36 } 37 } 38 if (c1) 39 printf(\u0026#34;%d\u0026#34;, a1); 40 else 41 printf(\u0026#34;N\u0026#34;); 42 43 if (c2) 44 printf(\u0026#34; %d\u0026#34;, a2); 45 else 46 printf(\u0026#34; N\u0026#34;); 47 48 if (a3) 49 printf(\u0026#34; %d\u0026#34;, a3); 50 else 51 printf(\u0026#34; N\u0026#34;); 52 53 if (c4) 54 printf(\u0026#34; %.1lf\u0026#34;, a4 / c4); 55 else 56 printf(\u0026#34; N\u0026#34;); 57 58 if (c5) 59 printf(\u0026#34; %d\u0026#34;, a5); 60 else 61 printf(\u0026#34; N\u0026#34;); 62 63 return 0; 64} ","permalink":"https://blog.lordash.de/posts/solution/patb-1012-%E6%95%B0%E5%AD%97%E5%88%86%E7%B1%BB/","summary":"数字分类 (PATB-1012) 题面 给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字： A1 = 能被 5 整除的数字中所有偶数的和； A2 = 将被 5 除后余 1 的数字按给","title":"PATB-1012 数字分类"},{"content":"A+B 和 C (PATB-1011) 题面 给定区间 [−2^31,2^31] 内的 3 个整数 A、B 和 C，请判断 A+B 是否大于 C。\n输入 输入第 1 行给出正整数 T (≤10)，是测试用例的个数。随后给出 T 组测试用例，每组占一行，顺序给出 A、B 和 C。整数间以空格分隔。\n输出 对每组测试用例，在一行中输出 Case #X: true 如果 A+B\u0026gt;C，否则输出 Case #X: false，其中 X 是测试用例的编号（从 1 开始）。\n样例输入 14 21 2 3 32 3 4 42147483647 0 2147483646 50 -2147483648 -2147483647 样例输出 1Case #1: false 2Case #2: true 3Case #3: true 4Case #4: false 提示 无\n思路 代码 1int n, m; 2 3int main() 4{ 5 scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 6 for (int i = 1; i \u0026lt;= n; i++) 7 { 8 LL a, b, c; 9 scanf(\u0026#34;%lld %lld %lld\u0026#34;, \u0026amp;a, \u0026amp;b, \u0026amp;c); 10 printf(\u0026#34;Case #%d: \u0026#34;, i); 11 if (a + b \u0026gt; c) 12 printf(\u0026#34;true\\n\u0026#34;); 13 else 14 printf(\u0026#34;false\\n\u0026#34;); 15 } 16 return 0; 17} ","permalink":"https://blog.lordash.de/posts/solution/patb-1011-a+b-%E5%92%8C-c/","summary":"A+B 和 C (PATB-1011) 题面 给定区间 [−2^31,2^31] 内的 3 个整数 A、B 和 C，请判断 A+B 是否大于 C。 输入 输入第 1 行给出正整数 T (≤10)，是测试用例的个","title":"PATB-1011 A+B 和 C"},{"content":"一元多项式求导 (PATB-1010) 题面 设计函数求一元多项式的导数。（注：x^n（n为整数）的一阶导数为nx^n−1。）\n输入 以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。\n输出 以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 0 0。\n样例输入 13 4 -5 2 6 1 -2 0 样例输出 112 3 -10 1 6 0 提示 无\n思路 代码 1int n, m; 2 3int main() 4{ 5 int nf = 0; 6 while (~scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;n, \u0026amp;m) \u0026amp;\u0026amp; m) 7 { 8 if (nf) 9 printf(\u0026#34; \u0026#34;); 10 else 11 nf = 1; 12 printf(\u0026#34;%d %d\u0026#34;, n * m, m - 1); 13 } 14 if (!nf) 15 printf(\u0026#34;0 0\u0026#34;); 16 17 printf(\u0026#34;\\n\u0026#34;); 18 return 0; 19} ","permalink":"https://blog.lordash.de/posts/solution/patb-1010-%E4%B8%80%E5%85%83%E5%A4%9A%E9%A1%B9%E5%BC%8F%E6%B1%82%E5%AF%BC/","summary":"一元多项式求导 (PATB-1010) 题面 设计函数求一元多项式的导数。（注：x^n（n为整数）的一阶导数为nx^n−1。） 输入 以指数递降方式输入多项式非零项系数和","title":"PATB-1010 一元多项式求导"},{"content":"说反话 (PATB-1009) 题面 给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。\n输入 测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。\n输出 每个测试用例的输出占一行，输出倒序后的句子。\n样例输入 1Hello World Here I Come 样例输出 1Come I Here World Hello 提示 无\n思路 代码 1int n, m; 2 3char s[105][105]; 4 5int main() 6{ 7 for (n = 0; ~scanf(\u0026#34;%s\u0026#34;, s[n]); n++); 8 for (int i=n-1; i \u0026gt;= 0; i--) 9 { 10 if (i != n - 1) 11 printf(\u0026#34; \u0026#34;); 12 printf(\u0026#34;%s\u0026#34;, s[i]); 13 } 14 15 printf(\u0026#34;\\n\u0026#34;); 16 return 0; 17} ","permalink":"https://blog.lordash.de/posts/solution/patb-1009-%E8%AF%B4%E5%8F%8D%E8%AF%9D/","summary":"说反话 (PATB-1009) 题面 给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。 输入 测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字","title":"PATB-1009 说反话"},{"content":"数组元素循环右移问题 (PATB-1008) 题面 一个数组A中存有N（\u0026gt;0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移M（≥0）个位置，即将A中的数据由（A0A1⋯AN−1）变换为（AN−M⋯AN−1A0A1⋯AN−M−1）（最后M个数循环移至最前面的M个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？\n输入 每个输入包含一个测试用例，第1行输入N（1≤N≤100）和M（≥0）；第2行输入N个整数，之间用空格分隔。\n输出 在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。\n样例输入 16 2 21 2 3 4 5 6 样例输出 15 6 1 2 3 4 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2int a[mxn]; 3 4int main() 5{ 6 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m); 7 for (int i = 0; i \u0026lt; n; i++) 8 { 9 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); 10 } 11 12 int nf = 0, t = n - (m % n); 13 for (int i = t; i \u0026lt; n; i++) 14 { 15 if (nf) 16 printf(\u0026#34; \u0026#34;); 17 else 18 nf = 1; 19 printf(\u0026#34;%d\u0026#34;, a[i]); 20 } 21 for (int i = 0; i \u0026lt; t; i++) 22 { 23 if (nf) 24 printf(\u0026#34; \u0026#34;); 25 else 26 nf = 1; 27 printf(\u0026#34;%d\u0026#34;, a[i]); 28 } 29 30 printf(\u0026#34;\\n\u0026#34;); 31 return 0; 32} ","permalink":"https://blog.lordash.de/posts/solution/patb-1008-%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E5%BE%AA%E7%8E%AF%E5%8F%B3%E7%A7%BB%E9%97%AE%E9%A2%98/","summary":"数组元素循环右移问题 (PATB-1008) 题面 一个数组A中存有N（\u0026gt;0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移M（≥0）个位置，即将A","title":"PATB-1008 数组元素循环右移问题"},{"content":"素数对猜想 (PATB-1007) 题面 让我们定义dn为：dn=pn+1−pn，其中pi是第i个素数。显然有d1=1，且对于n\u0026gt;1有dn是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。\n现给定任意正整数N(\u0026lt;10^5)，请计算不超过N的满足猜想的素数对的个数。\n输入 输入在一行给出正整数N。\n输出 在一行中输出不超过N的满足猜想的素数对的个数。\n样例输入 120 样例输出 14 提示 无\n思路 代码 1const int mxn = 1e5 + 5; 2int n, m; 3 4bool isP[mxn]; 5int prime[mxn]; 6 7int euler(int n) 8{ 9 memset(isP, 1, sizeof isP); 10 isP[0] = isP[1] = 0; 11 12 int cnt = 0; 13 for (int i = 2; i \u0026lt;= n; i++) 14 { 15 if (isP[i]) prime[++cnt] = i; 16 for (int j = 1; j \u0026lt;= cnt; j++) 17 { 18 if (i * prime[j] \u0026gt; n) break; 19 isP[i * prime[j]] = 0; 20 if (i % prime[j] == 0) break; 21 } 22 } 23 return cnt; 24} 25 26int a[mxn]; 27 28int main() 29{ 30 int cnt = euler(N); 31 memset(a, 0, sizeof a); 32 for (int i = 3; i \u0026lt;= N; i++) 33 { 34 if (isP[i] \u0026amp;\u0026amp; isP[i - 2]) 35 a[i] = a[i - 1] + 1; 36 else 37 a[i] = a[i - 1]; 38 } 39 scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 40 printf(\u0026#34;%d\\n\u0026#34;, a[n]); 41 return 0; 42} ","permalink":"https://blog.lordash.de/posts/solution/patb-1007-%E7%B4%A0%E6%95%B0%E5%AF%B9%E7%8C%9C%E6%83%B3/","summary":"素数对猜想 (PATB-1007) 题面 让我们定义dn为：dn=pn+1−pn，其中pi是第i个素数。显然有d1=1，且对于n\u0026gt;1有dn是偶数。“素数对猜想”","title":"PATB-1007 素数对猜想"},{"content":"换个格式输出整数 (PATB-1006) 题面 让我们用字母 B 来表示“百”、字母 S 表示“十”，用 12...n 来表示不为零的个位数字 n（\u0026lt;10），换个格式来输出任一个不超过 3 位的正整数。例如 234 应该被输出为 BBSSS1234，因为它有 2 个“百”、3 个“十”、以及个位的 4。\n输入 每个测试输入包含 1 个测试用例，给出正整数 n（\u0026lt;1000）。\n输出 每个测试用例的输出占一行，用规定的格式输出 n。\n样例输入1 1234 样例输出1 1BBSSS1234 样例输入2 123 样例输出2 1SS123 提示 无\n思路 代码 1int n, m; 2 3int main() 4{ 5 scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 6 int b = n / 100; 7 for (int i = 0; i \u0026lt; b; i++) 8 printf(\u0026#34;B\u0026#34;); 9 int s = n / 10 % 10; 10 for (int i = 0; i \u0026lt; s; i++) 11 printf(\u0026#34;S\u0026#34;); 12 int x = n % 10; 13 for (int i = 1; i \u0026lt;= x; i++) 14 printf(\u0026#34;%d\u0026#34;, i); 15 16 printf(\u0026#34;\\n\u0026#34;); 17 return 0; 18} ","permalink":"https://blog.lordash.de/posts/solution/patb-1006-%E6%8D%A2%E4%B8%AA%E6%A0%BC%E5%BC%8F%E8%BE%93%E5%87%BA%E6%95%B4%E6%95%B0/","summary":"换个格式输出整数 (PATB-1006) 题面 让我们用字母 B 来表示“百”、字母 S 表示“十”，用 12...n 来表示不为零的个位数字 n（\u0026lt;10），换个格式来输出任一个不超过","title":"PATB-1006 换个格式输出整数"},{"content":"继续(3n+1)猜想 (PATB-1005) 题面 卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。\n当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 n=3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 n=5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 n 为“关键数”，如果 n 不能被数列中的其他数字所覆盖。\n现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。\n输入 每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 K (\u0026lt;100)，第 2 行给出 K 个互不相同的待验证的正整数 n (1\u0026lt;n≤100)的值，数字间用空格隔开。\n输出 每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。\n样例输入 16 23 5 6 7 8 11 样例输出 17 6 提示 无\n思路 代码 1int n, m; 2 3int vis[105]; 4 5int main() 6{ 7 memset(vis, 0, sizeof vis); 8 scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 9 for (int i = 0; i \u0026lt; n; i++) 10 { 11 scanf(\u0026#34;%d\u0026#34;, \u0026amp;m); 12 vis[m] = 1; 13 } 14 15 for (int i = 100; i \u0026gt;= 1; i--) 16 { 17 if (!vis[i]) 18 continue; 19 20 for (int t = i; t != 1;) 21 { 22 if (t \u0026amp; 1) 23 t = (3 * t + 1) / 2; 24 else 25 t = t / 2; 26 27 if (t \u0026lt;= 100) 28 vis[t] = 0; 29 } 30 } 31 int nf = 0; 32 for (int i = 100; i \u0026gt;= 1; i--) 33 { 34 if (vis[i]) 35 { 36 if (nf) 37 printf(\u0026#34; \u0026#34;); 38 else 39 nf = 1; 40 printf(\u0026#34;%d\u0026#34;, i); 41 } 42 } 43 44 printf(\u0026#34;\\n\u0026#34;); 45 return 0; 46} ","permalink":"https://blog.lordash.de/posts/solution/patb-1005-%E7%BB%A7%E7%BB%AD3n+1%E7%8C%9C%E6%83%B3/","summary":"继续(3n+1)猜想 (PATB-1005) 题面 卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。 当我们验证卡拉兹猜想的时候","title":"PATB-1005 继续(3n+1)猜想"},{"content":"成绩排名 (PATB-1004) 题面 读入 n（\u0026gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。\n输入 每个测试输入包含 1 个测试用例，格式为\n1第 1 行：正整数 n 2第 2 行：第 1 个学生的姓名 学号 成绩 3第 3 行：第 2 个学生的姓名 学号 成绩 4 ... ... ... 5第 n+1 行：第 n 个学生的姓名 学号 成绩 其中姓名和学号均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。\n输出 对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。\n样例输入 13 2Joe Math990112 89 3Mike CS991301 100 4Mary EE990830 95 样例输出 1Mike CS991301 2Joe Math990112 提示 无\n思路 代码 1int n, m; 2 3struct P { 4 char a[15]; 5 char b[15]; 6 int c; 7}; 8 9int main(void) 10{ 11 scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 12 P t; 13 scanf(\u0026#34;%s %s %d\u0026#34;, t.a, t.b, \u0026amp;t.c); 14 P mx = t, mi = t; 15 n--; 16 17 while (n--) 18 { 19 scanf(\u0026#34;%s %s %d\u0026#34;, t.a, t.b, \u0026amp;t.c); 20 if (t.c \u0026gt; mx.c) 21 mx = t; 22 if (t.c \u0026lt; mi.c) 23 mi = t; 24 } 25 printf(\u0026#34;%s %s\\n\u0026#34;, mx.a, mx.b); 26 printf(\u0026#34;%s %s\\n\u0026#34;, mi.a, mi.b); 27} ","permalink":"https://blog.lordash.de/posts/solution/patb-1004-%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D/","summary":"成绩排名 (PATB-1004) 题面 读入 n（\u0026gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。 输入 每个测试输入包含 1 个测试用例，格","title":"PATB-1004 成绩排名"},{"content":"我要通过！ (PATB-1003) 题面 “答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出“答案正确”，否则输出“答案错误”。\n得到“答案正确”的条件是：\n字符串中必须仅有 P、 A、 T这三种字符，不可以包含其它字符； 任意形如 xPATx 的字符串都可以获得“答案正确”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串； 如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a、 b、 c 均或者是空字符串，或者是仅由字母 A 组成的字符串。 现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“答案正确”的。\n输入 每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 n (\u0026lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。\n输出 每个字符串的检测结果占一行，如果该字符串可以获得“答案正确”，则输出 YES，否则输出 NO。\n样例输入 18 2PAT 3PAAT 4AAPATAA 5AAPAATAAAA 6xPATx 7PT 8Whatever 9APAAATAA 样例输出 1YES 2YES 3YES 4YES 5NO 6NO 7NO 8NO 提示 无\n思路 代码 1int n, m; 2 3char s[105]; 4 5int main(void) 6{ 7 scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 8 while (n--) 9 { 10 int err = 0, p = 0, t = 0; 11 int la = 0, ma = 0, ra = 0; 12 13 scanf(\u0026#34;%s\u0026#34;, s); 14 int len = strlen(s); 15 16 for (int i = 0; i \u0026lt; len; i++) 17 { 18 if (s[i] == \u0026#39;P\u0026#39;) 19 { 20 p++; 21 } 22 else if (s[i] == \u0026#39;A\u0026#39;) 23 { 24 if (!p) 25 la++; 26 else if (!t) 27 ma++; 28 else if (t) 29 ra++; 30 } 31 else if (s[i] == \u0026#39;T\u0026#39;) 32 { 33 if (p \u0026amp;\u0026amp; ma) 34 t++; 35 else 36 err = 1; 37 } 38 else 39 { 40 err = 1; 41 } 42 } 43 44 if (p != 1 || ma == 0 || t != 1 || la * ma != ra) 45 { 46 err = 1; 47 } 48 49 if (err) 50 printf(\u0026#34;NO\\n\u0026#34;); 51 else 52 printf(\u0026#34;YES\\n\u0026#34;); 53 } 54} ","permalink":"https://blog.lordash.de/posts/solution/patb-1003-%E6%88%91%E8%A6%81%E9%80%9A%E8%BF%87/","summary":"我要通过！ (PATB-1003) 题面 “答案正确”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“答案正确”大派送 —— 只要读入的字符串满足下列条件，系统就输出","title":"PATB-1003 我要通过！"},{"content":"写出这个数 (PATB-1002) 题面 读入一个正整数 n，计算其各位数字之和，用汉语拼音写出和的每一位数字。\n输入 每个测试输入包含 1 个测试用例，即给出自然数 n 的值。这里保证 n 小于 10^100。\n输出 在一行内输出 n 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。\n样例输入 11234567890987654321123456789 样例输出 1yi san wu 提示 无\n思路 代码 1int T; 2int n, m; 3 4char s[][5] = { 5 \u0026#34;ling\u0026#34;, \u0026#34;yi\u0026#34;, \u0026#34;er\u0026#34;, \u0026#34;san\u0026#34;, \u0026#34;si\u0026#34;, 6 \u0026#34;wu\u0026#34;, \u0026#34;liu\u0026#34;, \u0026#34;qi\u0026#34;, \u0026#34;ba\u0026#34;, \u0026#34;jiu\u0026#34; 7}; 8 9char c; 10 11int main() 12{ 13 n = 0; 14 while (~scanf(\u0026#34;%c\u0026#34;, \u0026amp;c) \u0026amp;\u0026amp; c != \u0026#39;\\n\u0026#39;) 15 { 16 n += c - \u0026#39;0\u0026#39;; 17 } 18 char t[5] = \u0026#34;\u0026#34;; 19 sprintf(t, \u0026#34;%d\u0026#34;, n); 20 int len = strlen(t); 21 for (int i = 0; i \u0026lt; len; i++) 22 { 23 if (i) 24 printf(\u0026#34; \u0026#34;); 25 printf(\u0026#34;%s\u0026#34;, s[t[i] - \u0026#39;0\u0026#39;]); 26 } 27} ","permalink":"https://blog.lordash.de/posts/solution/patb-1002-%E5%86%99%E5%87%BA%E8%BF%99%E4%B8%AA%E6%95%B0/","summary":"写出这个数 (PATB-1002) 题面 读入一个正整数 n，计算其各位数字之和，用汉语拼音写出和的每一位数字。 输入 每个测试输入包含 1 个测试用例，即给出自然数 n 的值。这","title":"PATB-1002 写出这个数"},{"content":"害死人不偿命的(3n+1)猜想 (PATB-1001) 题面 卡拉兹(Callatz)猜想：\n对任何一个正整数 n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3n+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 n=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……\n我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 n，简单地数一下，需要多少步（砍几下）才能得到 n=1？\n输入 每个测试输入包含 1 个测试用例，即给出正整数 n 的值。\n输出 输出从 n 计算到 1 需要的步数。\n样例输入 13 样例输出 15 提示 无\n思路 代码 1int T; 2int n, m; 3 4int main() 5{ 6 scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 7 m = 0; 8 9 while (n != 1) 10 { 11 if (n \u0026amp; 1) 12 n = (3 * n + 1) / 2; 13 else 14 n /= 2; 15 m++; 16 } 17 printf(\u0026#34;%d\\n\u0026#34;, m); 18 return 0; 19} ","permalink":"https://blog.lordash.de/posts/solution/patb-1001-%E5%AE%B3%E6%AD%BB%E4%BA%BA%E4%B8%8D%E5%81%BF%E5%91%BD%E7%9A%843n+1%E7%8C%9C%E6%83%B3/","summary":"害死人不偿命的(3n+1)猜想 (PATB-1001) 题面 卡拉兹(Callatz)猜想： 对任何一个正整数 n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3n+1)","title":"PATB-1001 害死人不偿命的(3n+1)猜想"},{"content":"一、准备 基本信息\n操作系统: Windows10 jdk版本: 1.8 Hadoop版本: 2.9.2 下载并解压\nApache Hadoop: 官网 或者 清华源\nwinutils: github/cdarlint\n二、配置 环境变量 新建系统变量 HADOOP_HOME 至所在目录，如 D:\\environment\\hadoop-2.9.2\n在 path 中添加 %HADOOP_HOME%\\bin 及 %HADOOP_HOME%\\sbin 并以 ; (英文分号)与其他项隔开。\nHadoop配置文件 均在 %HADOOP_HOME%\\etc\\hadoop\\ 下面:\n修改 hadoop-env.cmd ，查找 set JAVA_HOME ，将后面内容改为JDK目录。\n1@rem The java implementation to use. Required. 2@rem set JAVA_HOME=%JAVA_HOME% 3set JAVA_HOME=D:\\environment\\Java\\jdk1.8.0_201 修改 core-site.xml\n1\u0026lt;configuration\u0026gt; 2 \u0026lt;property\u0026gt; 3 \u0026lt;name\u0026gt;fs.defaultFS\u0026lt;/name\u0026gt; 4 \u0026lt;value\u0026gt;hdfs://localhost:9000\u0026lt;/value\u0026gt; 5 \u0026lt;/property\u0026gt; 6\u0026lt;/configuration\u0026gt; 修改 hdfs-site.xml\n1\u0026lt;configuration\u0026gt; 2 \u0026lt;property\u0026gt; 3 \u0026lt;name\u0026gt;dfs.replication\u0026lt;/name\u0026gt; 4 \u0026lt;value\u0026gt;1\u0026lt;/value\u0026gt; 5 \u0026lt;/property\u0026gt; 6 \u0026lt;property\u0026gt; 7 \u0026lt;name\u0026gt;dfs.namenode.name.dir\u0026lt;/name\u0026gt; 8 \u0026lt;value\u0026gt;/D:/environment/hadoop-2.9.2/data/namenode\u0026lt;/value\u0026gt; 9 \u0026lt;/property\u0026gt; 10 \u0026lt;property\u0026gt; 11 \u0026lt;name\u0026gt;dfs.datanode.data.dir\u0026lt;/name\u0026gt; 12 \u0026lt;value\u0026gt;/D:/environment/hadoop-2.9.2/data/datanode\u0026lt;/value\u0026gt; 13 \u0026lt;/property\u0026gt; 14\u0026lt;/configuration\u0026gt; 修改 yarn-site.xml\n1\u0026lt;configuration\u0026gt; 2 \u0026lt;property\u0026gt; 3 \u0026lt;name\u0026gt;yarn.nodemanager.aux-services\u0026lt;/name\u0026gt; 4 \u0026lt;value\u0026gt;mapreduce_shuffle\u0026lt;/value\u0026gt; 5 \u0026lt;/property\u0026gt; 6\u0026lt;/configuration\u0026gt; winutils 把之前下载的 winutils 解压，找到对应版本，将内容覆盖到 hadoop-2.9.2\\bin 中。\n格式化namenode 以管理员权限启动命令行，运行 hdfs namenode -format ，这项命令只用在第一次启动前执行。如果结果中看到有 successfully ，说明以上配置成功。\n三、测试 以管理员权限启动命令行，如果之前没有在 path 中配置 sbin ，那么 cd 至 %HADOOP_HOME%\\sbin 中，运行 start-all 启动，出现以下四个窗口：\n即对应运行 jps 显示以下五个进程名称：\n访问 http://localhost:8088 查看集群状态：\n访问 http://localhost:50070 查看Hadoop状态：\n命令行运行 stop-all 关闭。\n","permalink":"https://blog.lordash.de/posts/configure/4f05172528ab13b7/","summary":"一、准备 基本信息 操作系统: Windows10 jdk版本: 1.8 Hadoop版本: 2.9.2 下载并解压 Apache Hadoop: 官网 或者 清华源 winutils: github/cdarlint 二、配置 环境变量 新建系统变量 HADOOP_HOME 至所在目录，如 D:\\environment\\hadoop-2.9.2","title":"Win10配置Hadoop2.9.2单机版"},{"content":"一、准备 下载并安装以下两项:\nGpg4win\nThunderbird\n二、配置Gpg4win 一路next安装。\n新建密钥对，按提示进行。\n可以点击 导出... 导出 .asc文件。\n三、配置Thunderbird 一路next安装。\n开启邮箱的IMAP服务。以QQ邮箱为例，启动QQ邮箱网页版，打开 设置 \u0026gt; 账户 下拉找到该项，并选择开启IMAP/SMTP服务。\n保存提示中的授权码\n在Thunderbird中配置邮箱，密码一栏中填写授权码即可。\n点开 显示菜单 找到 附加组件 ，搜索并安装 Enigmail 插件。\n重启应用后，在Thunderbird菜单栏中找到 Enigmail \u0026gt; 密钥管理 ，点击 文件 \u0026gt; 从文件导入密钥 可以导入某个邮箱地址的公钥文件，或者在搜索框中通过输入邮箱地址或密钥ID在公钥服务器上搜索对应的公钥，也可以是邮件等方式传递的Gpg4win导出的 .asc 文件。\n四、发送\u0026amp;接收邮件 发送邮件\n假设我们需要向XXX@XXX.XXX这个电子邮件地址发送GPG加密邮件，首先应该导入XXX@XXX.XXX对应的公钥文件（该文件将用于加密邮件），或者通过邮件地址XXX@XXX.XXX或对方的密钥ID在公钥服务器上搜索其公钥，搜索到的公钥需要进行指纹验证以确保该公钥不是伪造的。\n在新建邮件界面选中 加密 和 签名邮件 按钮即可。\n接收邮件\n打开接收到的加密邮件，会提示验证密码，验证完即可查看内容。\n附、疑难解决 问: Thunderbird添加新邮箱时提示 接受服务器已存在 如何解决？ 答: 彻底退出Thunderbird ( 包括关闭后台进程 )，再重新打开即可。 ","permalink":"https://blog.lordash.de/posts/essays/%E4%BD%BF%E7%94%A8gpg4win%E5%8A%A0%E5%AF%86%E9%82%AE%E4%BB%B6/","summary":"一、准备 下载并安装以下两项: Gpg4win Thunderbird 二、配置Gpg4win 一路next安装。 新建密钥对，按提示进行。 可以点击 导出... 导出 .asc文件。 三、配置","title":"使用Gpg4win加密邮件"},{"content":"一、恺撒密码简介 在密码学中，恺撒密码（英语：Caesar cipher），或称恺撒加密、恺撒变换、变换加密，是一种最简单且最广为人知的加密技术。它是一种替换加密的技术，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例如，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推。这个加密方法是以罗马共和时期恺撒的名字命名的，当年恺撒曾用此方法与其将军们进行联系。\n根据偏移量的不同，还存在若干特定的恺撒密码名称：\n偏移量为10：Avocat(A→K) 偏移量为13：ROT13 偏移量为-5：Cassis (K 6) 偏移量为-6：Cassette (K 7) 二、C++简单实现 1#include \u0026lt;bits/stdc++.h\u0026gt; 2using namespace std; 3 4const int SIZ = 100000; 5char src[SIZ], enc[SIZ]; 6 7void caesar(char src[], char enc[], int key) 8{ 9 key %= 26; 10 for (int i=0; src[i]; i++) 11 { 12 if ((src[i]\u0026lt;\u0026#39;A\u0026#39;) || (src[i]\u0026gt;\u0026#39;Z\u0026#39; \u0026amp;\u0026amp; src[i]\u0026lt;\u0026#39;a\u0026#39;) || src[i]\u0026gt;\u0026#39;z\u0026#39;) { 13 enc[i] = src[i]; continue; 14 } 15 16 if (src[i] \u0026gt;= \u0026#39;a\u0026#39;) 17 enc[i] = (src[i] - \u0026#39;a\u0026#39; + key + 26) % 26 + \u0026#39;a\u0026#39;; 18 else 19 enc[i] = (src[i] - \u0026#39;A\u0026#39; + key + 26) % 26 + \u0026#39;A\u0026#39;; 20 } 21} 22 23int main() 24{ 25 system(\u0026#34;chcp 65001\u0026#34;); 26 while (1) 27 { 28 printf(\u0026#34;-- 凯撒密码 加/解密 -- \\n\u0026#34;); 29 printf(\u0026#34;1. 加密 \\n2. 解密 \\n3. 退出 \\n\u0026#34;); 30 31 int select, key; scanf(\u0026#34;%d\u0026#34;, \u0026amp;select); 32 if (select == 3) break; 33 34 printf(\u0026#34;请输入原文: \u0026#34;); scanf(\u0026#34;%s\u0026#34;, src); 35 printf(\u0026#34;请输入密钥: \u0026#34;); scanf(\u0026#34;%d\u0026#34;, \u0026amp;key); 36 37 if (select == 2) key = -key; 38 memset(enc, 0, sizeof(enc)); 39 40 caesar(src, enc, key); printf(\u0026#34;密文: %s\\n\u0026#34;, enc); 41 system(\u0026#34;pause\u0026#34;); system(\u0026#34;cls\u0026#34;); 42 } 43 return 0; 44} 45 46/* 47abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ 48*/ ","permalink":"https://blog.lordash.de/posts/essays/%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/","summary":"一、恺撒密码简介 在密码学中，恺撒密码（英语：Caesar cipher），或称恺撒加密、恺撒变换、变换加密，是一种最简单且最广为人知的加密技术","title":"凯撒密码的简单实现"},{"content":"一、怎么吃都不胖的原因 基因表达，身体倾向于将多余的营养代谢而不是储存\n饮食习惯，客观上吃得少\n身体不需要\n二、增重为什么要增肌 增肌：肌肉增长可控，锻炼哪增哪\n增脂：脂肪增长不可控，增长的位置由基因决定\n三、怎么练容易显壮 增肌的基本原理就是通过力量训练，不断刺激肌肉，让肌纤维撕裂，让肌糖原消耗，然后补充足够的营养，让肌肉进行超量恢复，同时负荷渐进。关于增肌有以下要点：\n优先练胸、背、臀腿等大肌群。\n{% fold 查看详细 %}\n一方面，大肌群的肌肉量占比大，增肌对体型变化的效果更加明显（肩部、手臂、腰腹、小腿则为小肌群，但是由于三角肌在身体两侧，练大了，从正面看人会马上变宽，所以肩部也可以和大肌群在前期安排优先的训练）。另一方面，大肌群的训练会带动小肌群，大部分练胸背的动作，手臂都是有一起参与发力的。很多练臀腿的动作，由于对核心稳定的要求非常高，腰腹核心肌群都是会被一起练到的。\n{% endfold %}\n使用大重量训练。\n{% fold 查看详细 %}\n何谓“大”，一般来说一口气能做5~10个的动作的重量就足够了。肌肉分为两种，红肌纤维（力量小、耐力强、体积小、体积增长潜力小），白肌纤维（力量大、耐力差、体积大、体积增长潜力大）。所以快速增重，需要增长白肌纤维，也就是使用大重量去刺激。\n{% endfold %}\n以复合动作为主。\n{% fold 查看详细 %}\n复合动作可以同时满足以上两个条件，大肌群带动小肌群和使用大重量训练。负重训练可以分为两种类型，复合动作和孤立动作。\n复合动作，就是同时要用到多块肌肉，多个关节一起运动的动作。例如，卧推、推举、俯卧撑，可以同时练到胸部、肩部前束和手臂的肱三头肌；引体向上、划船，可以同时练到背部和手臂的肱二头肌；深蹲可以同时练到大腿的前侧、后侧和臀部，对腰腹核心也有刺激；硬拉就更厉害了，除了整个臀部腿部、腰腹核心、背部，甚至前臂都有一定刺激。\n孤立动作，例如弯举，只能针对单一方面的肌肉，但是也特别重要，有些复合动作覆盖不到的地方，或者需要特别加强的地方，就可以使用孤立动作进行补充。\n{% endfold %}\n优先选择自由重量，即杠铃哑铃等。\n{% fold 查看详细 %}\n自由重量的效果会比固定器械要更好。一方面，是肌肉的受力范围。固定器械的动作轨迹太过单一，只能够刺激到某块肌肉的某个局部。另一方面，是安全性。长期只使用固定器械，会开始依赖固定器械的稳定性，自己反而没有办法学会控制肌肉的稳定性。\n合理的方法应该是由最轻的自由重量开始练。刚开始使用杠铃哑铃，会感觉动作不稳，这是正常的，但由于重量小所以不必担心受伤。多练几次后动作控制很稳了，再逐步循序渐进地增加重量。\n{% endfold %}\n四、训练计划 训练前需要热身，可以慢跑5~10分钟，再对全身做一些简单的短时间拉伸。\n双分化双循环训练（初学者建议）\n{% fold 查看详细 %}\n也就是把全身划分为上下两个部分，每次只练其中一个部分，然后一周四练。例如说，周一、四练上半身（胸、背、肩、手臂），周二、五练下半身（腿、臀、小腿、核心）。这样每个部位每周就能训练到两次，训练容量和训练频率都有保障。\n{% endfold %}\n躯干 + 四肢（快速显壮）\n{% fold 查看详细 %}\n躯干主要就是胸部和背部两方面，胸背练大了，人就不会显得单薄。四肢主要是大腿、肩部和手臂，这些部分夏天特别容易外露，练壮了比较容易突出肌肉感。一周四练的话，周一、四进行躯干训练（胸大肌、背部肌群），周二、五进行四肢训练（臀腿肌群、三角肌中后、肱二头肌）。\n{% endfold %}\n接下来给出【躯干 + 四肢】的训练方案\n躯干 - 基础 胸部训练，哑铃卧推\n{% fold 查看详细 %}\n自由重量，先把肩胛骨收紧，仰躺在卧推椅上，肩部再往中间收一收，双手垂直在身体上方，然后缓慢有控制地把哑铃往下放，放到最低点再用力往上推，注意小臂全程是垂直地面的，可以想想把两边的手肘往中间夹，这样胸肌挤压的感觉会强烈很多。\n组数：4组 次数：8次 间歇：1~2分钟 练法：最后一组力竭\n{% endfold %}\n背部训练，引体向上\n{% fold 查看详细 %}\n双手比肩部略宽握着吊杆，身体挺直，先把肩胛骨往下压，然后把整个身体用力拉上去，然后再缓慢有控制地往下放。注意三个问题，①拉起来的过程中不要耸肩，②身体不要往后仰太多，③动作要尽量做完全程。\n组数：自定 次数：共30个 间歇：1~2分钟 练法：完成目标数量即可\n{% endfold %}\n胸部训练，上斜卧推\n{% fold 查看详细 %}\n上斜卧推，使用杠铃哑铃或者史密斯机，同样先收紧肩胛骨，仰躺在卧推椅上，双手垂直放在身体上方，然后缓慢有控制地把哑铃往下放，放到最低点再用力往上推，同样注意小臂全程是垂直地面的。\n组数：4组 次数：8次 间歇：1~2分钟 练法：最后一组力竭\n{% endfold %}\n背部训练，坐姿划船\n{% fold 查看详细 %}\n坐在凳子上，双脚踩稳，挺直腰背，核心收紧，用力把把手拉起来，然后缓慢有控制的往下放，身体可能会有小幅度的摆动，但是要保持身体挺直，摆动的幅度也不要太大，要特别注意，往后拉的时候，背部要使劲地往中间夹，这样背部才能练出感觉来。\n组数：4组 次数：12次 间歇：1~2分钟 练法：最后一组力竭\n{% endfold %}\n躯干 - 附加 胸部训练，绳索夹胸\n{% fold 查看详细 %}\n胸部孤立动作，夹胸，龙门架或者夹胸器械等，可以帮助新手尽快找到胸部肌肉挤压发力的感觉，而且也不会增加手臂的疲劳，注意肩胛骨保持收紧状态。想着把手肘从两边往中间夹，胸肌就有感觉了。\n组数：3组 次数：15~20次 间歇：45~60秒 练法：每组力竭\n{% endfold %}\n背部训练，单臂哑铃划船\n{% fold 查看详细 %}\n算不上孤立动作，但是可以尽可能的让背部肌肉往后收缩，同样有利于新手找发力感觉的训练，要注意身体的稳定，不要左右摇晃，充分感受肩部和背部往后移动的感觉。\n组数：3组 次数：12~15次 间歇：45~60秒 练法：每组力竭\n{% endfold %}\n躯干 - 放松 {% fold 查看详细 %}\n拉伸胸肌 拉伸背阔肌 拉伸中背部 放松大圆肌 放松胸小肌 补充糖原（香蕉、增肌粉） {% endfold %}\n四肢 - 基础 腿部训练，高脚杯深蹲\n{% fold 查看详细 %}\n双手撑着哑铃，紧贴胸前，挺胸收背，双脚站距比肩宽略宽，然后臀部往后推，膝盖往两边打开，适当地往脚尖的方向滑动，顺势蹲下，然后大腿和臀部发力，用力站起来。注意，重心保持在足弓处，腰背要挺直成一条直线，膝盖的朝向要和脚尖的方向一致。\n组数：4组 次数：8次 间歇：1~2分钟 练法：最后一组力竭\n{% endfold %}\n腿部训练，罗马尼亚硬拉\n{% fold 查看详细 %}\n半程的硬拉，双手握着杠铃或者哑铃，挺直腰背，核心收紧然后往前缓慢有控制地俯身下去，再用力把杠铃拉起来，拉起来地过程不是腰部发力，腰腹核心全程收紧，把髋部往前顶，用臀部发力。\n组数：4组 次数：12次 间歇：1~2分钟 练法：最后一组力竭\n{% endfold %}\n肩部训练，侧平举\n{% fold 查看详细 %}\n双手握着哑铃在身体的两侧，身体站直，把哑铃往两边抬起来，抬到肩部水平的高度，就可以缓慢有控制地往下放了。要注意身体要稳住，不要前后晃动，不要耸肩，手臂的角度也不要有变化。\n组数：4组 次数：15~20次 间歇：30~45秒 练法：每组力竭\n{% endfold %}\n肩部训练，面拉\n{% fold 查看详细 %}\n练肩部后束，把手上的绳索以一个往后拉往外旋的方式拉近自己的脸部，注意手肘不要低于肩，双手不要低于手肘。\n组数：4组 次数：12~15次 间歇：45~60秒 练法：每组力竭\n{% endfold %}\n手臂训练，杠铃弯举\n{% fold 查看详细 %}\n身体不要晃动，动作要做够全程\n组数：3组 次数：12次 间歇：45~60秒 练法：每组力竭\n{% endfold %}\n手臂训练，锤式弯举\n{% fold 查看详细 %}\n拿起两个哑铃，虎口朝前，左右交替做锤式弯举，身体不要乱晃。\n组数：3组 次数：12次 间歇：45~60秒 练法：每组力竭\n{% endfold %}\n四肢 - 放松 {% fold 查看详细 %}\n拉伸大腿前侧\n拉伸大腿后侧\n蛙趴（大腿内侧）\n拉伸肩部\n拉伸肱二头肌\n放松髂胫束\n放松股四头肌\n{% endfold %}\n五、饮食 肌肉不是在训练时增长的，而是在恢复中。没吃够，就没有原料支持肌纤维的超量恢复。三分练，七分吃。\n蛋白质，每天每公斤体重1.8克\n{% fold 查看详细 %}\n训练强度足够的增肌训练者，每天每公斤体重需要摄入1.5~2克蛋白质。以每天每公斤体重1.8克为例，体重55kg，则需要摄入55 × 1.8 = 99g 蛋白质。肉、蛋、奶和豆类都有丰富的蛋白质，但是注意增肌更需要动物蛋白。\n{% endfold %}\n碳水化合物，每天每公斤体重6克\n{% fold 查看详细 %}\n同时，肌肉增长还需要补充碳水化合物，用以支持蛋白质的摄入。每天每公斤需要摄入4~8克碳水化合物，以6克碳水化合物为例，体重55kg需要摄入55 × 6 = 330g 碳水化合物。对于体型瘦的人来说，很难吃够这个量，因此来说增肌粉效果通常好于蛋白粉。\n{% endfold %}\n不饱和脂肪酸，坚果类等随意\n{% fold 查看详细 %}\n坚果类、牛油果、三文鱼都不错，虽然不是增肌的重点，但是适当摄入有益身体健康。\n{% endfold %}\n饮食计算\n使用薄荷营养师等APP以及食物秤，计算每日摄入量是否达标。\n加餐\n可以安排一天6餐。前期困难的话可以循序渐进。\n简单粗暴\n每周一称体重，如果有上升，说明吃够了，反之没有，需要加量。\n六、休息 不要训练过度，需要注意超量恢复原理，休息很重要。 连续训练两到三天，需要彻底休息一天。 同一块肌肉，不要安排连续两天训练。 每2~3个月安排一周恢复周，训练减半或者完全不练。 拒绝熬夜，让皮质醇降下去。 附、家庭计划 使用弹力带。\n周一四，躯干训练：\n弹力带俯卧撑 坐姿上斜推胸 弹力带夹胸 弹力带俯身划船 弹力带坐姿划船 弹力带直臂下压 周二五，四肢训练：\n弹力带深蹲 弹力带硬拉 弹力带侧平举 弹力带面拉 弹力带弯举 弹力带锤式弯举 此外可以关注本文内容主要来源，B站up及wx公众号“卓叔增重”。\n","permalink":"https://blog.lordash.de/posts/share/ed4db4b5d278abf7/","summary":"一、怎么吃都不胖的原因 基因表达，身体倾向于将多余的营养代谢而不是储存 饮食习惯，客观上吃得少 身体不需要 二、增重为什么要增肌 增肌：肌肉增长可控，","title":"增重方法推荐"},{"content":" 关于 个人 相册 分享 游戏 Snipaste 一个简单但功能强大的剪贴工具，还包含贴图功能。 支持平台： Ditto windows剪贴板的扩展，可以保存放置在剪贴板上的任何类型的信息。 支持平台： Everything Windows上一款搜索引擎，它能够基于文件名快速定文件和文件夹位置。 支持平台： ","permalink":"https://blog.lordash.de/f/share/","summary":"关于 个人 相册 分享 游戏 Snipaste 一个简单但功能强大的剪贴工具，还包含贴图功能。 支持平台： Ditto windows剪贴板的扩展，可以保存放置在剪贴板上的任何类型","title":"好物分享"},{"content":"那些书写热爱的人 jaihk66215级校友 ACM 信仰.15级校友 ACM 上大 SSimpLe_Y15级校友 ACM liweihang17级校友 ACM 鹅厂 ironz17级校友 西电 irvix17级校友 ACM iamstarlee17级校友 ACM haut_bao17级校友 ACM Long_hen19级校友 ACM cosine19级校友 ACM 拓拔阿秀 抖音全栈，面试笔记 柳婼のblog15级校友 PAT 阿乐 牛客 认识一下吧 申请收录\n","permalink":"https://blog.lordash.de/f/links/","summary":"那些书写热爱的人 jaihk66215级校友 ACM 信仰.15级校友 ACM 上大 SSimpLe_Y15级校友 ACM liweihang17级校友 ACM 鹅厂 ironz","title":"友情链接"},{"content":" 关于 个人 相册 分享 游戏 在线计算 确定 美/德军Mil：未设置\n苏军Mil：未设置\n英军Mil：未设置\n密位简介 毫弧度(milliradian，简称mrad)，也称密位(mil)，是一种在几何学和应用物理学上用来测量平面角的SI导出单位，相当于1弧度的千分之一，经常被用于校正火器瞄具。一个360度圆周所对应的弧度为2π，也就是2000π（6283.185）个密位。\n为计算方便，原华约集团国家和中国通常采用6000密位制，美国等西方国家采用6400密位制。但随着计算机的普及，现在普遍不再使用老式标准里修约过的密位，而是直接使用数学上精确的毫弧度。\n数学原理 角度足够小的时候，有：$$ \\sin \\theta \\approx \\theta $$\n这使得三角学计算可以用简单的算术来近似。1密位接近于1个毫弧度。因此$$ \\tan⁡(1 mil) \\approx \\tan⁡(1 mrad) \\approx 0.001 $$\n例如，已知远处高度约为1米，高度角约为1个密位，则其距离约为1000米。这就是对距离的快速估算。这也可以用于由远处物体的水平观察角度来估算距离。再例如，远处的T-34的侧面测得为8.5个密位，已知其侧面约6米长，则距离为 $$ \\frac{6m}{ \\tan(8.5mil)} \\approx \\frac{6m}{0.0085} \\approx 705.882m $$ 约等于 700 m。\n游戏 游戏里，中路HQ附近的三门榴弹炮，使用的是高射界射击，即射角大于45°，此时射程和射角负相关：\n1Mil=最大射角-(目标距离-最小射程)/(最大射程-最小射程)*(最大射角-最小射角) 结合游戏给出的数据：\n1美/德 苏 英 21600M | 622 MIL 1600M | 800 MIL 1600M | 267 MIL 31500M | 646 MIL 1500M | 821 MIL 1500M | 284 MIL 41400M | 670 MIL 1400M | 843 MIL 1400M | 302 MIL 5... ... ... 6200M | 954 MIL 200M | 1099 MIL 200M | 516 MIL 7100M | 978 MIL 100M | 1120 MIL 100M | 533 MIL 计算得知\n1美/德军 Mil=978-(距离-100)/(1600-100)*(978-622) 2苏军 Mil=1120-(距离-100)/(1600-100)*(1120-800) 3英军 Mil=533-(距离-100)/(1600-100)*(533-267) ","permalink":"https://blog.lordash.de/f/games/hell-let-loose-mil/","summary":"关于 个人 相册 分享 游戏 在线计算 确定 美/德军Mil：未设置 苏军Mil：未设置 英军Mil：未设置 密位简介 毫弧度(milliradian，简称mra","title":"人间地狱-密位计算"},{"content":" 关于 个人 相册 分享 游戏 未完待续\n捉小猫\n人间地狱-密位\n","permalink":"https://blog.lordash.de/f/games/","summary":"关于 个人 相册 分享 游戏 未完待续 捉小猫 人间地狱-密位","title":"游戏"},{"content":" 关于 个人 相册 分享 游戏 作者：ganlvtech\ncanvas大小570x501，请使用PC端浏览器访问。没加载就刷新一下~\n","permalink":"https://blog.lordash.de/f/games/catch-the-cat/","summary":"关于 个人 相册 分享 游戏 作者：ganlvtech canvas大小570x501，请使用PC端浏览器访问。没加载就刷新一下~","title":"捉小猫"},{"content":"一、创建文章 命令：\n1hexo new [layout] \u0026lt;title\u0026gt; 参数说明：\nlayout可以为以下三种： 参数名 功能 文章路径 post 新建博文 source/_posts page 新建页面（如404，分类） source draft 草稿 source/_drafts 草稿可通过一下命令发布：\n1hexo publish [layout] \u0026lt;title\u0026gt; 注意，title 并不是博文的标题，而是博文markdown文件的名字，也就是博文链接的后缀（例如 https://gh1656409967.github.io/随笔/【随笔】hexo文章操作/ 中的 【随笔】hexo文章操作 ）\n二、文章模版 创建模版\n在新建文章时，hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：\n1hexo new blog \u0026#34;foo\u0026#34; 在执行这行指令时，hexo 会尝试在 scaffolds 文件夹中寻找 blog.md，并根据其内容建立文章。\n修改参数\n以下是可以在模版中使用的变量：\n变量 描述 layout 布局 title 标题 date 文件建立日期 三、Front-matter 就是博文最上方以 --- 分隔的那部分。\n默认可以使用的Front-matter：\n参数 描述 默认值 layout 布局 title 标题 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章网址 ","permalink":"https://blog.lordash.de/posts/essays/hexo%E6%96%87%E7%AB%A0%E6%93%8D%E4%BD%9C/","summary":"一、创建文章 命令： 1hexo new [layout] \u0026lt;title\u0026gt; 参数说明： layout可以为以下三种： 参数名 功能 文章路径 post 新建博文 source/_posts page 新建页面（如404，分类） source draft 草稿 source/_drafts 草稿可通","title":"Hexo文章操作"},{"content":"一、准备 于MySQL官网根据需要下载，参考链接：\nmysql-8.0.18-winx64.zip mysql-connector-java-8.0.18.zip 二、MySQL 配置 配置系统环境变量，或者以管理员身份运行cmd，进入解压目录下的bin目录中运行命令，例如 D:\\Program Files (x86)\\mysql-8.0.18-winx64\\bin\u0026gt;\n生成data目录\n1\u0026gt; mysqld --initialize-insecure --user=mysql 安装MySQL\n1\u0026gt; mysqld -install 测试 启动MySQL服务\n1\u0026gt; net start mysql 登录MySQL（密码为空，直接回车即可）\n1\u0026gt; mysql -u root -p 如果密码不为空，先关闭服务\n1\u0026gt; net stop mysql 执行以下命令后，再重启服务，然后重新登录\n1\u0026gt; mysqld -nt --skip-grant-tables （依然无效的，请删除目录下data文件夹，并重新配置）\n修改密码\n1mysql\u0026gt; ALTER USER \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;new password\u0026#39;; 三、JDBC 配置 将 mysql-connector-java-8.0.18.zip 解压，找到 mysql-connector-java-8.0.18.jar，置于java jre的lib/ext/目录下。以本机为参考，目录是： C:\\Program Files\\Java\\jdk1.8.0_201\\jre\\lib\\ext\\\n测试 写一个简单测试 test.java如下，编译运行查看结果即可。\n1import java.sql.*; 2public class test { 3 public static void main(String[] args) { 4 try { 5 Class.forName(\u0026#34;com.mysql.cj.jdbc.Driver\u0026#34;); 6 String url = \u0026#34;jdbc:mysql://localhost?useUnicode=true\u0026amp;characterEncoding=UTF-8\u0026amp;serverTimezone=UTC\u0026#34;; 7 Connection con = DriverManager.getConnection(url, \u0026#34;root\u0026#34;, \u0026#34;123456\u0026#34;); 8 if (con != null) { 9 System.out.println(\u0026#34;success...\u0026#34;); 10 con.close(); 11 } 12 else { 13 System.out.println(\u0026#34;failure!!!\u0026#34;); 14 } 15 } 16 catch (ClassNotFoundException e) { 17 e.printStackTrace(); 18 } 19 catch (SQLException e) { 20 e.printStackTrace(); 21 } 22 } 23} 附：\nmysql-connector-java 5中使用com.mysql.jdbc.Driver，而mysql-connector-java 6中则使用com.mysql.cj.jdbc.Driver 连接字符串后加?useUnicode=true\u0026amp;characterEncoding=UTF-8解决中文乱码问题 连接字符串后加?serverTimezone=UTC解决时区问题 ","permalink":"https://blog.lordash.de/posts/configure/0da28f65294b5e79/","summary":"一、准备 于MySQL官网根据需要下载，参考链接： mysql-8.0.18-winx64.zip mysql-connector-java-8.0.18.zip 二、MySQL 配置 配置系统环境变量，或者以管理员身份运行cmd，进入解压目录下的bin目","title":"Win10配置MySQL和JDBC"},{"content":"Monthly Expense (POJ - 3273) 题面 Farmer John is an astounding accounting wizard and has realized he might run out of money to run the farm. He has already calculated and recorded the exact amount of money (1 ≤ moneyi ≤ 10,000) that he will need to spend each day over the next N (1 ≤ N ≤ 100,000) days.\nFJ wants to create a budget for a sequential set of exactly M (1 ≤ M ≤ N) fiscal periods called \u0026ldquo;fajomonths\u0026rdquo;. Each of these fajomonths contains a set of 1 or more consecutive days. Every day is contained in exactly one fajomonth.\nFJ\u0026rsquo;s goal is to arrange the fajomonths so as to minimize the expenses of the fajomonth with the highest spending and thus determine his monthly spending limit.\n输入 Line 1: Two space-separated integers: N and M Lines 2.. N+1: Line i+1 contains the number of dollars Farmer John spends on the ith day\n输出 Line 1: The smallest possible monthly limit Farmer John can afford to live with.\n样例输入 17 5 2100 3400 4300 5100 6500 7101 8400 样例输出 1500 提示 If Farmer John schedules the months so that the first two days are a month, the third and fourth are a month, and the last three are their own months, he spends at most $500 in any month. Any other method of scheduling gives a larger minimum monthly limit.\n思路 代码 1using namespace std; 2const int N = 2e5+10; 3 4int a[N] = {0}; 5int n, m; 6 7int main(void) { 8 while(~scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;n, \u0026amp;m)) { 9 int sum = 0, mx = 0; 10 for(int i=0; i\u0026lt;n; i++) { 11 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); 12 sum += a[i]; 13 mx = max(mx, a[i]); 14 } 15 int l=mx, r=sum, mid=0; 16 while(l\u0026lt;=r) { 17 mid = l+(r-l)/2; 18 int ans = 1, k = 0; 19 for(int i=0; i\u0026lt;n; i++) { 20 k += a[i]; 21 if(k\u0026gt;mid) { 22 k = a[i]; 23 ans ++; 24 } 25 } 26 if(ans\u0026gt;m) 27 l = mid+1; 28 else 29 r = mid-1; 30 } 31 printf(\u0026#34;%d\\n\u0026#34;, mid); 32 } 33 return 0; 34} ","permalink":"https://blog.lordash.de/posts/solution/poj-3273-monthly-expense/","summary":"Monthly Expense (POJ - 3273) 题面 Farmer John is an astounding accounting wizard and has realized he might run out of money to run the farm. He has already calculated and recorded the exact amount of money (1 ≤ moneyi ≤ 10,000) that he will need to spend each day over the next N (1 ≤ N ≤ 100,000) days. FJ wants to create a budget for a sequential","title":"POJ-3273 Monthly Expense"},{"content":"Pie (POJ - 3122) 题面 My birthday is coming up and traditionally I\u0026rsquo;m serving pie. Not just one pie, no, I have a number N of them, of various tastes and of various sizes. F of my friends are coming to my party and each of them gets a piece of pie. This should be one piece of one pie, not several small pieces since that looks messy. This piece can be one whole pie though.\nMy friends are very annoying and if one of them gets a bigger piece than the others, they start complaining. Therefore all of them should get equally sized (but not necessarily equally shaped) pieces, even if this leads to some pie getting spoiled (which is better than spoiling the party). Of course, I want a piece of pie for myself too, and that piece should also be of the same size.\nWhat is the largest possible piece size all of us can get? All the pies are cylindrical in shape and they all have the same height 1, but the radii of the pies can be different.\n输入 One line with a positive integer: the number of test cases. Then for each test case:\nOne line with two integers N and F with 1 ≤ N, F ≤ 10 000: the number of pies and the number of friends. One line with N integers ri with 1 ≤ ri ≤ 10 000: the radii of the pies. 输出 For each test case, output one line with the largest possible volume V such that me and my friends can all get a pie piece of size V. The answer should be given as a floating point number with an absolute error of at most 10^−3.\n样例输入 13 23 3 34 3 3 41 24 55 610 5 71 4 2 3 4 5 6 5 4 2 样例输出 125.1327 23.1416 350.2655 提示 无\n思路 代码 1using namespace std; 2const double pi = acos(-1.0); 3const double eps = 1e-6; 4const int N = 2e5 + 5; 5 6double a[N] = {0}; 7int T, n, f; 8 9int main(void) { 10 scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 11 while(T--) { 12 scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;f); 13 double mx=0; 14 for(int i=0; i\u0026lt;n; i++) { 15 scanf(\u0026#34;%lf\u0026#34;, \u0026amp;a[i]); 16 a[i] = a[i]*a[i]*pi; 17 mx = max(mx, a[i]); 18 } 19 double l=0, r=mx, mid=0; 20 while(r-l \u0026gt; eps) { 21 mid = l+(r-l)/2; 22 int num = 0; 23 for(int i=0; i\u0026lt;n; i++) { 24 num += (int)(a[i]/mid); 25 } 26 if(num \u0026gt;= f+1) 27 l = mid; 28 else 29 r = mid; 30 } 31 printf(\u0026#34;%.4lf\\n\u0026#34;, mid); 32 } 33 return 0; 34} ","permalink":"https://blog.lordash.de/posts/solution/poj-3122-pie/","summary":"Pie (POJ - 3122) 题面 My birthday is coming up and traditionally I\u0026rsquo;m serving pie. Not just one pie, no, I have a number N of them, of various tastes and of various sizes. F of my friends are coming to my party and each of them gets a piece of pie. This should be one piece of one pie, not several small pieces since that looks messy. This","title":"POJ-3122 Pie"},{"content":"Seek the Name, Seek the Fame (POJ-2752) 题面 The little cat is so famous, that many couples tramp over hill and dale to Byteland, and asked the little cat to give names to their newly-born babies. They seek the name, and at the same time seek the fame. In order to escape from such boring job, the innovative little cat works out an easy but fantastic algorithm:\nStep1. Connect the father\u0026rsquo;s name and the mother\u0026rsquo;s name, to a new string S. Step2. Find a proper prefix-suffix string of S (which is not only the prefix, but also the suffix of S).\nExample: Father=\u0026lsquo;ala\u0026rsquo;, Mother=\u0026lsquo;la\u0026rsquo;, we have S = \u0026lsquo;ala\u0026rsquo;+\u0026lsquo;la\u0026rsquo; = \u0026lsquo;alala\u0026rsquo;. Potential prefix-suffix strings of S are {\u0026lsquo;a\u0026rsquo;, \u0026lsquo;ala\u0026rsquo;, \u0026lsquo;alala\u0026rsquo;}. Given the string S, could you help the little cat to write a program to calculate the length of possible prefix-suffix strings of S? (He might thank you by giving your baby a name:)\n输入 The input contains a number of test cases. Each test case occupies a single line that contains the string S described above.\nRestrictions: Only lowercase letters may appear in the input. 1 \u0026lt;= Length of S \u0026lt;= 400000.\n输出 For each test case, output a single line with integer numbers in increasing order, denoting the possible length of the new baby\u0026rsquo;s name.\n样例输入 1ababcababababcabab 2aaaaa 样例输出 12 4 9 18 21 2 3 4 5 提示 无\n思路 求所有公共前缀后缀长度\n代码 1char s[mxn], t[mxn]; 2int nxt[mxn], a[mxn]; 3 4void getnxt(char* t, int m) 5{ 6 int i = 0, j = -1; nxt[0] = -1; 7 while (i \u0026lt; m) 8 { 9 if (j == -1 || t[i] == t[j]) { 10 i++, j++; 11 // if (t[i] == t[j]) 12 // nxt[i] = nxt[j]; // next数组优化 13 // else 14 nxt[i] = j; 15 } else 16 j = nxt[j]; 17 } 18} 19 20int KMP(char* s, char* t, int n, int m) 21{ 22 int i = 0, j = 0, ans = 0; 23 while (i \u0026lt; n) 24 { 25 if (j == -1 || s[i] == t[j]) { 26 i++, j++; 27 if (j \u0026gt;= m) { // 匹配 28 // ans++; 29 // j = nxt[j]; 30 return i-j; 31 } 32 } else 33 j = nxt[j]; 34 } 35 // return ans; 36 return -1; 37} 38 39int main() 40{ 41 while(scanf(\u0026#34;%s\u0026#34;, s) == 1) 42 { 43 int n = strlen(s), j=0; 44 getnxt(s, n); 45 46 for(int i=n; i\u0026gt;0; i=nxt[i]){ 47 a[j++] = i; 48 } 49 for(int i=j-1; i\u0026gt;=0; i--){ 50 printf(\u0026#34;%d \u0026#34;, a[i]); 51 } 52 printf(\u0026#34;\\n\u0026#34;); 53 } 54 return 0; 55} ","permalink":"https://blog.lordash.de/posts/solution/poj-2752-seek-the-name-seek-the-fame/","summary":"Seek the Name, Seek the Fame (POJ-2752) 题面 The little cat is so famous, that many couples tramp over hill and dale to Byteland, and asked the little cat to give names to their newly-born babies. They seek the name, and at the same time seek the fame. In order to escape from such boring job, the innovative little cat works out an easy but fantastic algorithm: Step1. Connect","title":"【题解】POJ-2752 Seek the Name, Seek the Fame"},{"content":"Balance (POJ - 1837) 题面 Gigel has a strange \u0026ldquo;balance\u0026rdquo; and he wants to poise it. Actually, the device is different from any other ordinary balance. It orders two arms of negligible weight and each arm\u0026rsquo;s length is 15. Some hooks are attached to these arms and Gigel wants to hang up some weights from his collection of G weights (1 \u0026lt;= G \u0026lt;= 20) knowing that these weights have distinct values in the range 1..25. Gigel may droop any weight of any hook but he is forced to use all the weights. Finally, Gigel managed to balance the device using the experience he gained at the National Olympiad in Informatics. Now he would like to know in how many ways the device can be balanced.\nKnowing the repartition of the hooks and the set of the weights write a program that calculates the number of possibilities to balance the device. It is guaranteed that will exist at least one solution for each test case at the evaluation.\n输入 The input has the following structure: • the first line contains the number C (2 \u0026lt;= C \u0026lt;= 20) and the number G (2 \u0026lt;= G \u0026lt;= 20); • the next line contains C integer numbers (these numbers are also distinct and sorted in ascending order) in the range -15..15 representing the repartition of the hooks; each number represents the position relative to the center of the balance on the X axis (when no weights are attached the device is balanced and lined up to the X axis; the absolute value of the distances represents the distance between the hook and the balance center and the sign of the numbers determines the arm of the balance to which the hook is attached: \u0026lsquo;-\u0026rsquo; for the left arm and \u0026lsquo;+\u0026rsquo; for the right arm); • on the next line there are G natural, distinct and sorted in ascending order numbers in the range 1..25 representing the weights\u0026rsquo; values.\n输出 The output contains the number M representing the number of possibilities to poise the balance.\n样例输入 12 4 2-2 3 33 4 5 8 样例输出 12 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int N = 2e4 + 5; 4 5int dp[25][N]= {{0}}; 6int c[25], g[25]; 7int n, m; 8 9int main(void) { 10 while (scanf(\u0026#34;%d %d\u0026#34;, \u0026amp;n, \u0026amp;m) == 2) { 11 for(int i=1; i\u0026lt;=n; i++) 12 scanf(\u0026#34;%d\u0026#34;, \u0026amp;c[i]); 13 for(int i=1; i\u0026lt;=m; i++) 14 scanf(\u0026#34;%d\u0026#34;, \u0026amp;g[i]); 15 dp[0][7500] = 1; 16 17 for(int i=1; i\u0026lt;=m; i++) { 18 for(int j=0; j\u0026lt;=15000; j++) 19 if(dp[i-1][j]) 20 for(int k=1; k\u0026lt;=n; k++) 21 dp[i][j+c[k]*g[i]] += dp[i-1][j]; 22 } 23 printf(\u0026#34;%d\\n\u0026#34;, dp[m][7500]); 24 } 25 26 return 0; 27} ","permalink":"https://blog.lordash.de/posts/solution/poj-1837-balance/","summary":"Balance (POJ - 1837) 题面 Gigel has a strange \u0026ldquo;balance\u0026rdquo; and he wants to poise it. Actually, the device is different from any other ordinary balance. It orders two arms of negligible weight and each arm\u0026rsquo;s length is 15. Some hooks are attached to these arms and Gigel wants to hang up some weights from his collection of G weights (1 \u0026lt;= G \u0026lt;= 20) knowing that these weights","title":"POJ-1837 Balance"},{"content":"To the Max (POJ - 1050) 题面 Given a two-dimensional array of positive and negative integers, a sub-rectangle is any contiguous sub-array of size 1*1 or greater located within the whole array. The sum of a rectangle is the sum of all the elements in that rectangle. In this problem the sub-rectangle with the largest sum is referred to as the maximal sub-rectangle. As an example, the maximal sub-rectangle of the array:\n0 -2 -7 0 9 2 -6 2 -4 1 -4 1 -1 8 0 -2 is in the lower left corner:\n9 2 -4 1 -1 8 and has a sum of 15.\n输入 The input consists of an N * N array of integers. The input begins with a single positive integer N on a line by itself, indicating the size of the square two-dimensional array. This is followed by N^2 integers separated by whitespace (spaces and newlines). These are the N^2 integers of the array, presented in row-major order. That is, all numbers in the first row, left to right, then all numbers in the second row, left to right, etc. N may be as large as 100. The numbers in the array will be in the range [-127,127].\n输出 Output the sum of the maximal sub-rectangle.\n样例输入 14 20 -2 -7 0 9 2 -6 2 3-4 1 -4 1 -1 4 58 0 -2 样例输出 115 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e2 + 5; 5 6int a[N][N] = {{0}}; 7int f[N][N][N] = {{{0}}}; 8int n; 9 10int main(void) { 11 scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 12 for (int i=0; i\u0026lt;n; i++) { 13 for (int j=0; j\u0026lt;n; j++) 14 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i][j]); 15 } 16 int mx = -inf; 17 for(int i=0; i\u0026lt;n; i++) { 18 for(int j=0; j\u0026lt;n; j++) { 19 int sum = 0; 20 for(int k=j; k\u0026lt;n; k++) { 21 sum += a[i][k]; 22 f[i][j][k] = max(f[i-1][j][k]+sum, sum); 23 mx = max(mx, f[i][j][k]); 24 } 25 } 26 } 27 printf(\u0026#34;%d\\n\u0026#34;, mx); 28 return 0; 29} ","permalink":"https://blog.lordash.de/posts/solution/poj-1050-to-the-max/","summary":"To the Max (POJ - 1050) 题面 Given a two-dimensional array of positive and negative integers, a sub-rectangle is any contiguous sub-array of size 1*1 or greater located within the whole array. The sum of a rectangle is the sum of all the elements in that rectangle. In this problem the sub-rectangle with the largest sum is referred to as the maximal sub-rectangle. As an example, the maximal sub-rectangle","title":"POJ-1050 To the Max"},{"content":"Monkey and Banana (HDU - 1069) 题面 A group of researchers are designing an experiment to test the IQ of a monkey. They will hang a banana at the roof of a building, and at the mean time, provide the monkey with some blocks. If the monkey is clever enough, it shall be able to reach the banana by placing one block on the top another to build a tower and climb up to get its favorite food.\nThe researchers have n types of blocks, and an unlimited supply of blocks of each type. Each type-i block was a rectangular solid with linear dimensions (xi, yi, zi). A block could be reoriented so that any two of its three dimensions determined the dimensions of the base and the other dimension was the height.\nThey want to make sure that the tallest tower possible by stacking blocks can reach the roof. The problem is that, in building a tower, one block could only be placed on top of another block as long as the two base dimensions of the upper block were both strictly smaller than the corresponding base dimensions of the lower block because there has to be some space for the monkey to step on. This meant, for example, that blocks oriented to have equal-sized bases couldn\u0026rsquo;t be stacked.\nYour job is to write a program that determines the height of the tallest tower the monkey can build with a given set of blocks.\n输入 The input file will contain one or more test cases. The first line of each test case contains an integer n, representing the number of different blocks in the following data set. The maximum value for n is 30. Each of the next n lines contains three integers representing the values xi, yi and zi. Input is terminated by a value of zero (0) for n.\n输出 For each test case, print one line containing the case number (they are numbered sequentially starting from 1) and the height of the tallest possible tower in the format \u0026ldquo;Case case: maximum height = height\u0026rdquo;.\n样例输入 11 210 20 30 32 46 8 10 55 5 5 67 71 1 1 82 2 2 93 3 3 104 4 4 115 5 5 126 6 6 137 7 7 145 1531 41 59 1626 53 58 1797 93 23 1884 62 64 1933 83 27 200 样例输出 1Case 1: maximum height = 40 2Case 2: maximum height = 21 3Case 3: maximum height = 28 4Case 4: maximum height = 342 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int N = 2e2 + 5; 4 5struct sc { 6 int l, w, h; 7} a[N]; 8 9int f[N] = {0}; 10int n, num = 1; 11 12bool cmp(sc x, sc y) { 13 if (x.l != y.l) 14 return x.l \u0026lt; y.l; 15 return x.w \u0026lt; y.w; 16} 17 18int main(void) { 19 while(~scanf(\u0026#34;%d\u0026#34;, \u0026amp;n) \u0026amp;\u0026amp; n) { 20 int l, w, h, t = 0; 21 for(int i=0; i\u0026lt;n; i++) { 22 scanf(\u0026#34;%d%d%d\u0026#34;, \u0026amp;l, \u0026amp;w, \u0026amp;h); 23 a[t].l=l, a[t].w=w, a[t++].h=h; 24 a[t].l=l, a[t].w=h, a[t++].h=w; 25 a[t].l=w, a[t].w=l, a[t++].h=h; 26 a[t].l=w, a[t].w=h, a[t++].h=l; 27 a[t].l=h, a[t].w=l, a[t++].h=w; 28 a[t].l=h, a[t].w=w, a[t++].h=l; 29 } 30 sort(a, a+t, cmp); 31 32 int ans=0; 33 for(int i=0; i\u0026lt;t; i++) { 34 int mx=0; 35 for(int j=0; j\u0026lt;i; j++) { 36 if(a[j].l\u0026lt;a[i].l \u0026amp;\u0026amp; a[j].w\u0026lt;a[i].w) 37 mx = max(mx, f[j]); 38 } 39 f[i] = a[i].h+mx; 40 ans = max(ans, f[i]); 41 } 42 printf(\u0026#34;Case %d: maximum height = %d\\n\u0026#34;, num++, ans); 43 } 44 45 return 0; 46} ","permalink":"https://blog.lordash.de/posts/solution/hdu-1069-monkey-and-banana/","summary":"Monkey and Banana (HDU - 1069) 题面 A group of researchers are designing an experiment to test the IQ of a monkey. They will hang a banana at the roof of a building, and at the mean time, provide the monkey with some blocks. If the monkey is clever enough, it shall be able to reach the banana by placing one block on the top another to build a","title":"HDU-1069 Monkey and Banana"},{"content":"Ignatius and the Princess IV (HDU - 1029) 题面 \u0026ldquo;OK, you are not too bad, em\u0026hellip; But you can never pass the next test.\u0026rdquo; feng5166 says.\n\u0026ldquo;I will tell you an odd number N, and then N integers. There will be a special integer among them, you have to tell me which integer is the special one after I tell you all the integers.\u0026rdquo; feng5166 says.\n\u0026ldquo;But what is the characteristic of the special integer?\u0026rdquo; Ignatius asks.\n\u0026ldquo;The integer will appear at least (N+1)/2 times. If you can\u0026rsquo;t find the right integer, I will kill the Princess, and you will be my dinner, too. Hahahaha\u0026hellip;..\u0026rdquo; feng5166 says.\nCan you find the special integer for Ignatius?\n输入 The input contains several test cases. Each test case contains two lines. The first line consists of an odd integer N(1\u0026lt;=N\u0026lt;=999999) which indicate the number of the integers feng5166 will tell our hero. The second line contains the N integers. The input is terminated by the end of file.\n输出 For each test case, you have to output only one line which contains the special number you have found.\n样例输入 15 21 3 2 3 3 311 41 1 1 1 1 5 5 5 5 5 5 57 61 1 1 1 1 1 1 样例输出 13 25 31 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int N = 1e6 + 5; 4 5int a[N]; 6int n; 7 8int main(void) { 9 while(~scanf(\u0026#34;%d\u0026#34;, \u0026amp;n)) { 10 int num=0, ans=-1; 11 for(int i=0; i\u0026lt;n; i++) { 12 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); 13 if(num==0) { 14 num++; 15 ans = a[i]; 16 } else { 17 if(ans!=a[i]) 18 num--; 19 else 20 num++; 21 } 22 } 23 printf(\u0026#34;%d\\n\u0026#34;, ans); 24 } 25 26 return 0; 27} ","permalink":"https://blog.lordash.de/posts/solution/hdu-1029-ignatius-and-the-princess-iv/","summary":"Ignatius and the Princess IV (HDU - 1029) 题面 \u0026ldquo;OK, you are not too bad, em\u0026hellip; But you can never pass the next test.\u0026rdquo; feng5166 says. \u0026ldquo;I will tell you an odd number N, and then N integers. There will be a special integer among them, you have to tell me which integer is the special one after I tell you all the integers.\u0026rdquo; feng5166 says. \u0026ldquo;But what is","title":"HDU-1029 Ignatius and the Princess IV"},{"content":"Blowing Fuses (ZOJ - 1195) 题面 Maybe you are familiar with the following situation. You have plugged in a lot of electrical devices, such as toasters, refrigerators, microwave ovens, computers, stereos, etc, and have them all running. But at the moment when you turn on the TV, the fuse blows, since the power drawn from all the machines is greater than the capacity of the fuse. Of course this is a great safety feature, avoiding that houses burn down too often due to fires ignited by overheating wires. But it is also annoying to walk down to the basement (or some other inconvenient place) to replace to fuse or switch it back on.\nWhat one would like to have is a program that checks before turning on an electrical device whether the combined power drawn by all running devices exceeds the fuses capacity (and it blows), or whether it is safe to turn it on.\n输入 The input consists of several test cases. Each test case describes a set of electrical devices and gives a sequence of turn on/off operations for these devices.\nThe first line of each test case contains three integers n, m and c, where n is the number of devices (n \u0026lt;= 20), m the number of operations performed on these devices and c is the capacity of the fuse (in Amperes). The following n lines contain one positive integer ci each, the consumption (in Amperes) of the i-th device.\nThis is followed by m lines also containing one integer each, between 1 and n inclusive. They describe a sequence of turn on/turn off operations performed on the devices. For every number, the state of that particular devices is toggled, i.e. if it is currently running, it is turned off, and if it is currently turned off, it will by switched on. At the beginning all devices are turned off.\nThe input will be terminated by a test case starting with n = m = c = 0. This test case should not be processed.\n输出 For each test case, first output the number of the test case. Then output whether the fuse was blown during the operation sequence. The fuse will be blown if the sum of the power consumptions ci of turned on devices at some point exceeds the capacity of the fuse c.\nIf the fuse is not blown, output the maximal power consumption by turned on devices that occurred during the sequence.\nOutput a blank line after each test case.\n样例输入 12 2 10 25 37 41 52 63 6 10 72 85 97 102 111 122 133 141 153 160 0 0 样例输出 1Sequence 1 2Fuse was blown. 3 4Sequence 2 5Fuse was not blown. 6Maximal power consumption was 9 amperes. 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3 4int a[30][2]; 5int n, m, c, num = 1; 6 7int main(void) { 8 while (~scanf(\u0026#34;%d%d%d\u0026#34;, \u0026amp;n, \u0026amp;m, \u0026amp;c) \u0026amp;\u0026amp; n \u0026amp;\u0026amp; m \u0026amp;\u0026amp; c) { 9 memset(a, 0, sizeof(a)); 10 for (int i=1; i\u0026lt;=n; i++) { 11 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i][0]); 12 } 13 int mx = 0, sum = 0, t; 14 for (int i=1; i\u0026lt;=m; i++) { 15 scanf(\u0026#34;%d\u0026#34;, \u0026amp;t); 16 if(a[t][1]==0) { 17 a[t][1] = 1; 18 sum += a[t][0]; 19 } else { 20 a[t][1] = 0; 21 sum -= a[t][0]; 22 } 23 mx = max(sum, mx); 24 } 25 printf(\u0026#34;Sequence %d\\n\u0026#34;, num++); 26 if(mx\u0026gt;c) { 27 printf(\u0026#34;Fuse was blown.\\n\u0026#34;); 28 } else { 29 printf(\u0026#34;Fuse was not blown.\\n\u0026#34;); 30 printf(\u0026#34;Maximal power consumption was %d amperes.\\n\u0026#34;, mx); 31 } 32 printf(\u0026#34;\\n\u0026#34;); 33 } 34 35 return 0; 36} ","permalink":"https://blog.lordash.de/posts/solution/zoj-1195-blowing-fuses/","summary":"Blowing Fuses (ZOJ - 1195) 题面 Maybe you are familiar with the following situation. You have plugged in a lot of electrical devices, such as toasters, refrigerators, microwave ovens, computers, stereos, etc, and have them all running. But at the moment when you turn on the TV, the fuse blows, since the power drawn from all the machines is greater than the capacity of the fuse. Of course this","title":"ZOJ-1195 Blowing Fuses"},{"content":"Function Run Fun (ZOJ - 1168) 题面 We all love recursion! Don\u0026rsquo;t we?\nConsider a three-parameter recursive function w(a, b, c):\nif a \u0026lt;= 0 or b \u0026lt;= 0 or c \u0026lt;= 0, then w(a, b, c) returns: 1\nif a \u0026gt; 20 or b \u0026gt; 20 or c \u0026gt; 20, then w(a, b, c) returns: w(20, 20, 20)\nif a \u0026lt; b and b \u0026lt; c, then w(a, b, c) returns: w(a, b, c-1) + w(a, b-1, c-1) - w(a, b-1, c)\notherwise it returns: w(a-1, b, c) + w(a-1, b-1, c) + w(a-1, b, c-1) - w(a-1, b-1, c-1)\nThis is an easy function to implement. The problem is, if implemented directly, for moderate values of a, b and c (for example, a = 15, b = 15, c = 15), the program takes hours to run because of the massive recursion.\n输入 The input for your program will be a series of integer triples, one per line, until the end-of-file flag of -1 -1 -1. Using the above technique, you are to calculate w(a, b, c) efficiently and print the result.\n输出 Print the value for w(a,b,c) for each triple.\n样例输入 11 1 1 22 2 2 310 4 6 450 50 50 5-1 7 18 6-1 -1 -1 样例输出 1w(1, 1, 1) = 2 2w(2, 2, 2) = 4 3w(10, 4, 6) = 523 4w(50, 50, 50) = 1048576 5w(-1, 7, 18) = 1 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3 4int ans[21][21][21]; 5int a, b, c; 6 7int w(int a, int b, int c) { 8 if (a\u0026lt;=0 || b\u0026lt;=0 || c\u0026lt;=0) 9 return 1; 10 11 if (a\u0026gt;20 || b\u0026gt;20 || c\u0026gt;20) 12 return ans[20][20][20]; 13 14 if (ans[a][b][c]\u0026gt;0) 15 return ans[a][b][c]; 16 17 if (a\u0026lt;b \u0026amp;\u0026amp; b\u0026lt;c) 18 return w(a, b, c-1) + w(a, b-1, c-1) - w(a, b-1, c); 19 20 return w(a-1, b, c) + w(a-1, b-1, c) + w(a-1, b, c-1) - w(a-1, b-1, c-1); 21} 22 23int main(void) { 24 for (int i=0; i\u0026lt;21; i++) 25 for (int j=0; j\u0026lt;21; j++) 26 for (int k=0; k\u0026lt;21; k++) 27 ans[i][j][k] = w(i, j, k); 28 29 while (scanf(\u0026#34;%d%d%d\u0026#34;, \u0026amp;a, \u0026amp;b, \u0026amp;c)==3) { 30 if (a==-1 \u0026amp;\u0026amp; b==-1 \u0026amp;\u0026amp; c==-1) 31 break; 32 printf(\u0026#34;w(%d, %d, %d) = %d\\n\u0026#34;, a, b, c, w(a, b, c)); 33 } 34 return 0; 35} ","permalink":"https://blog.lordash.de/posts/solution/zoj-1168-function-run-fun/","summary":"Function Run Fun (ZOJ - 1168) 题面 We all love recursion! Don\u0026rsquo;t we? Consider a three-parameter recursive function w(a, b, c): if a \u0026lt;= 0 or b \u0026lt;= 0 or c \u0026lt;= 0, then w(a, b, c) returns: 1 if a \u0026gt; 20 or b \u0026gt; 20 or c \u0026gt; 20, then w(a, b, c) returns: w(20, 20, 20) if a \u0026lt; b and b \u0026lt; c, then w(a,","title":"ZOJ-1168 Function Run Fun"},{"content":"Software CRC (ZOJ - 1164) 题面 You work for a company which uses lots of personal computers. Your boss, Dr Penny Pincher, has wanted to link the computers together for some time but has been unwilling to spend any money on the Ethernet boards you have recommended. You, unwittingly, have pointed out that each of the PCs has come from the vendor with an asynchronous serial port at no extra cost. Dr Pincher, of course, recognizes her opportunity and assigns you the task of writing the software necessary to allow communication between PCs.\nYou\u0026rsquo;ve read a bit about communications and know that every transmission is subject to error and that the typical solution to this problem is to append some error checking information to the end of each message. This information allows the receiving program to detect when a transmission error has occurred (in most cases). So, off you go to the library, borrow the biggest book on communications you can find and spend your weekend (unpaid overtime) reading about error checking.\nFinally you decide that CRC (cyclic redundancy check) is the best error checking for your situation and write a note to Dr Pincher detailing the proposed error checking mechanism noted below.\nThe message to be transmitted is viewed as a long positive binary number. The first byte of the message is treated as the most significant byte of the binary number. The second byte is the next most significant, etc. This binary number will be called \u0026ldquo;m\u0026rdquo; (for message). Instead of transmitting \u0026ldquo;m\u0026rdquo; you will transmit a message, \u0026ldquo;m2\u0026rdquo;, consisting of \u0026ldquo;m\u0026rdquo; followed by a two-byte CRC value.\nThe CRC value is chosen so that \u0026ldquo;m2\u0026rdquo; when divided by a certain 16-bit value \u0026ldquo;g\u0026rdquo; leaves a remainder of 0. This makes it easy for the receiving program to determine whether the message has been corrupted by transmission errors. It simply divides any message received by \u0026ldquo;g\u0026rdquo;. If the remainder of the division is zero, it is assumed that no error has occurred.\nYou notice that most of the suggested values of \u0026ldquo;g\u0026rdquo; in the book are odd, but don\u0026rsquo;t see any other similarities, so you select the value 34943 for \u0026ldquo;g\u0026rdquo; (the generator value).\n输入 You are to devise an algorithm for calculating the CRC value corresponding to any message that might be sent. To test this algorithm you will write a program which reads lines (each line being all characters up to, but not including the end of line character) as input, and for each line calculates the CRC value for the message contained in the line, and writes the numeric value of the CRC bytes (in hexadecimal notation) on an output line. Each input line will contain no more than 1024 ASCII characters. The input is terminated by a line that contains a # in column 1.\n输出 CRC in hex format, one on each line. Note that each CRC printed should be in the range 0 to 34942 (decimal).\n样例输入 1this is a test 2 3A 4# 样例输出 177 FD 200 00 30C 86 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3 4union { 5 unsigned int L; 6 struct { 7 unsigned char b1, b2, b3, b4; 8 } crc; 9} data; 10 11int main(void) { 12 unsigned char c, flag; 13 int num, g=34943; 14 while(1) { 15 num = data.L = 0; 16 while(scanf(\u0026#34;%c\u0026#34;, \u0026amp;c) \u0026amp;\u0026amp; c!=\u0026#39;\\n\u0026#39;) { 17 num++; 18 flag = c; 19 data.L = ((data.L\u0026lt;\u0026lt;8) + c)%g; 20 } 21 data.L = (data.L\u0026lt;\u0026lt;16)%g; 22 if (data.L) 23 data.L = g-data.L; 24 if (num==1 \u0026amp;\u0026amp; flag==\u0026#39;#\u0026#39;) 25 break; 26 printf(\u0026#34;%02X %02X\\n\u0026#34;, (int)data.crc.b2, (int)data.crc.b1); 27 } 28 return 0; 29} ","permalink":"https://blog.lordash.de/posts/solution/zoj-1164-software-crc/","summary":"Software CRC (ZOJ - 1164) 题面 You work for a company which uses lots of personal computers. Your boss, Dr Penny Pincher, has wanted to link the computers together for some time but has been unwilling to spend any money on the Ethernet boards you have recommended. You, unwittingly, have pointed out that each of the PCs has come from the vendor with an asynchronous serial port at no","title":"ZOJ-1164 Software CRC"},{"content":"Block Breaker (HDU - 6699) 题面 Given a rectangle frame of size n × m. Initially, the frame is strewn with n × m square blocks of size 1 × 1. Due to the friction with the frame and each other, the blocks are stable and will not drop.\nHowever, the blocks can be knocked down. When a block is knocked down, other remaining blocks may also drop since the friction provided by other remaining blocks may not sustain them anymore. Formally, a block will drop if it is knocked or not stable, which means that at least one of the left block and the right block has been dropped and at least one of the front block and the back block has been dropped. Especially, the frame can be regarded as a huge stable block, which means that if one block\u0026rsquo;s left is the frame, only when its right block has been dropped and at least one of the front block and the back block has been dropped can it drop. The rest situations are similar.\nNow you, the block breaker, want to knock down the blocks. Formally, you will do it q times. In each time, you may choose a position (xi, yi) If there remains a block at the chosen position, you will knock it down; otherwise, nothing will happen. Moreover, after knocking down the block, you will wait until no unstable blocks are going to drop and then do the next operation.\nFor example, please look at the following illustration, the frame is of size 2 × 2 and the block (1, 1) and (1, 2) have been dropped. If we are going to knock the block (2, 1) , not only itself but also the block (2 , 1) will drop in this knocking operation.\nYou want to know how many blocks will drop in total in each knocking operation. Specifically, if nothing happens in one operation, the answer should be regarded as 0.\n输入 The first line contains one positive integer T ( 1 ≤ T ≤ 10 ) , denoting the number of test cases.\nFor each test case:\nThe first line contains three positive integers n, m and q ( 1 ≤ n , m ≤ 2000, 1 ≤ q ≤ 100000 ) , denoting the sizes in two dimensions of the frame and the number of knocking operations.\nEach of the following q lines contains two positive integers xi and yi ( 1 ≤ xi ≤ n , 1 ≤ yi ≤ m ), describing a knocking operation.\n输出 For each test case, output q lines, each of which contains a non-negative integer, denoting the number of dropped blocks in the corresponding knocking operation.\n样例输入 12 22 2 3 31 1 41 2 52 2 64 4 6 71 1 81 2 92 1 102 2 114 4 123 3 样例输出 11 21 32 41 51 62 70 81 911 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int mod = 1e9 + 7; 4const int N = 2e3 + 5; 5 6bool vis[N][N]; 7 8int T, n, m, q; 9int x, y; 10 11struct P { 12 int x, y; 13}; 14 15int dx[] = {1, -1, 0, 0}; 16int dy[] = {0, 0, 1, -1}; 17 18bool ok(int x, int y) { 19 if ((x + 1 \u0026gt; n || !vis[x + 1][y]) \u0026amp;\u0026amp; (x - 1 \u0026lt;= 0 || !vis[x - 1][y])) 20 return 1; 21 if ((y + 1 \u0026gt; m || !vis[x][y + 1]) \u0026amp;\u0026amp; (y - 1 \u0026lt;= 0 || !vis[x][y - 1])) 22 return 1; 23 return 0; 24} 25 26int solve(int x, int y) { 27 if (vis[x][y]) 28 return 0; 29 30 int sum = 1; 31 vis[x][y] = 1; 32 33 P sp; 34 sp.x = x; 35 sp.y = y; 36 37 queue\u0026lt;P\u0026gt; q; 38 q.push(sp); 39 40 while (!q.empty()) { 41 P tp = q.front(); 42 q.pop(); 43 44 P np = tp; 45 for (int i = 0; i \u0026lt; 4; i++) { 46 int xi = np.x = tp.x + dx[i]; 47 int yi = np.y = tp.y + dy[i]; 48 49 if (xi \u0026lt;= 0 || xi \u0026gt; n || yi \u0026lt;= 0 || yi \u0026gt; m) 50 continue; 51 52 if (!vis[xi][yi] \u0026amp;\u0026amp; !ok(xi, yi)) { 53 sum++; 54 q.push(np); 55 vis[xi][yi] = 1; 56 } 57 } 58 } 59 60 return sum; 61} 62 63int main(void) { 64 65 scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 66 while (T--) { 67 scanf(\u0026#34;%d%d%d\u0026#34;, \u0026amp;n, \u0026amp;m, \u0026amp;q); 68 memset(vis, 0, sizeof(vis)); 69 for (int i = 0; i \u0026lt; q; i++) { 70 scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;x, \u0026amp;y); 71 printf(\u0026#34;%d\\n\u0026#34;, solve(x, y)); 72 } 73 } 74 75 return 0; 76} ","permalink":"https://blog.lordash.de/posts/solution/hdu-6699-block-breaker/","summary":"Block Breaker (HDU - 6699) 题面 Given a rectangle frame of size n × m. Initially, the frame is strewn with n × m square blocks of size 1 × 1. Due to the friction with the frame and each other, the blocks are stable and will not drop. However, the blocks can be knocked down. When a block is knocked down, other remaining blocks may also drop since","title":"HDU-6699 Block Breaker"},{"content":"Oulipo (HDU - 1686) 题面 The French author Georges Perec (1936–1982) once wrote a book, La disparition, without the letter \u0026rsquo;e\u0026rsquo;. He was a member of the Oulipo group. A quote from the book:\nTout avait Pair normal, mais tout s’affirmait faux. Tout avait Fair normal, d’abord, puis surgissait l’inhumain, l’affolant. Il aurait voulu savoir où s’articulait l’association qui l’unissait au roman : stir son tapis, assaillant à tout instant son imagination, l’intuition d’un tabou, la vision d’un mal obscur, d’un quoi vacant, d’un non-dit : la vision, l’avision d’un oubli commandant tout, où s’abolissait la raison : tout avait l’air normal mais…\nPerec would probably have scored high (or rather, low) in the following contest. People are asked to write a perhaps even meaningful text on some subject with as few occurrences of a given “word” as possible. Our task is to provide the jury with a program that counts these occurrences, in order to obtain a ranking of the competitors. These competitors often write very long texts with nonsense meaning; a sequence of 500,000 consecutive \u0026lsquo;T\u0026rsquo;s is not unusual. And they never use spaces.\nSo we want to quickly find out how often a word, i.e., a given string, occurs in a text. More formally: given the alphabet {\u0026lsquo;A\u0026rsquo;, \u0026lsquo;B\u0026rsquo;, \u0026lsquo;C\u0026rsquo;, …, \u0026lsquo;Z\u0026rsquo;} and two finite strings over that alphabet, a word W and a text T, count the number of occurrences of W in T. All the consecutive characters of W must exactly match consecutive characters of T. Occurrences may overlap.\n输入 The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:\nOne line with the word W, a string over {\u0026lsquo;A\u0026rsquo;, \u0026lsquo;B\u0026rsquo;, \u0026lsquo;C\u0026rsquo;, …, \u0026lsquo;Z\u0026rsquo;}, with 1 ≤ |W| ≤ 10,000 (here |W| denotes the length of the string W). One line with the text T, a string over {\u0026lsquo;A\u0026rsquo;, \u0026lsquo;B\u0026rsquo;, \u0026lsquo;C\u0026rsquo;, …, \u0026lsquo;Z\u0026rsquo;}, with |W| ≤ |T| ≤ 1,000,000.\n输出 For every test case in the input file, the output should contain a single number, on a single line: the number of occurrences of the word W in the text T.\n样例输入 13 2BAPC 3BAPC 4AZA 5AZAZAZA 6VERDI 7AVERDXIVYERDIAN 样例输出 11 23 30 提示 无\n思路 KMP模板题\n代码 1char s[mxn], t[mxn]; 2int nxt[mxn]; 3 4void getnxt(char* t, int m) 5{ 6 int i = 0, j = -1; nxt[0] = -1; 7 while (i \u0026lt; m) 8 { 9 if (j == -1 || t[i] == t[j]) { 10 i++, j++; 11 // if (t[i] == t[j]) 12 // nxt[i] = nxt[j]; // next数组优化 13 // else 14 nxt[i] = j; 15 } else 16 j = nxt[j]; 17 } 18} 19 20int KMP(char* s, char* t, int n, int m) 21{ 22 int i = 0, j = 0, ans = 0; 23 while (i \u0026lt; n) 24 { 25 if (j == -1 || s[i] == t[j]) { 26 i++, j++; 27 if (j \u0026gt;= m) { // 匹配 28 ans++; 29 j = nxt[j]; 30 // return i-j; 31 } 32 } else 33 j = nxt[j]; 34 } 35 return ans; 36 // return -1; 37} 38 39int main() 40{ 41 int T; scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 42 while(T--) 43 { 44 scanf(\u0026#34;%s%s\u0026#34;, t, s); 45 int tl = strlen(t), sl = strlen(s); 46 getnxt(t, tl); 47 printf(\u0026#34;%d\\n\u0026#34;, KMP(s, t, sl, tl)); 48 } 49 return 0; 50} ","permalink":"https://blog.lordash.de/posts/solution/hdu-1686-oulipo/","summary":"Oulipo (HDU - 1686) 题面 The French author Georges Perec (1936–1982) once wrote a book, La disparition, without the letter \u0026rsquo;e\u0026rsquo;. He was a member of the Oulipo group. A quote from the book: Tout avait Pair normal, mais tout s’affirmait faux. Tout avait Fair normal, d’a","title":"HDU-1686 Oulipo"},{"content":"Hawk-and-Chicken (HDU - 3639) 题面 Kids in kindergarten enjoy playing a game called Hawk-and-Chicken. But there always exists a big problem: every kid in this game want to play the role of Hawk. So the teacher came up with an idea: Vote. Every child have some nice handkerchiefs, and if he/she think someone is suitable for the role of Hawk, he/she gives a handkerchief to this kid, which means this kid who is given the handkerchief win the support. Note the support can be transmitted. Kids who get the most supports win in the vote and able to play the role of Hawk.(A note:if A can win support from B(A != B) A can win only one support from B in any case the number of the supports transmitted from B to A are many. And A can\u0026rsquo;t win the support from himself in any case. If two or more kids own the same number of support from others, we treat all of them as winner. Here\u0026rsquo;s a sample: 3 kids A, B and C, A gives a handkerchief to B, B gives a handkerchief to C, so C wins 2 supports and he is choosen to be the Hawk.\n输入 There are several test cases. First is a integer T(T \u0026lt;= 50), means the number of test cases. Each test case start with two integer n, m in a line (2 \u0026lt;= n \u0026lt;= 5000, 0 \u0026lt;m \u0026lt;= 30000). n means there are n children(numbered from 0 to n - 1). Each of the following m lines contains two integers A and B(A != B) denoting that the child numbered A give a handkerchief to B.\n输出 For each test case, the output should first contain one line with \u0026ldquo;Case x:\u0026rdquo;, here x means the case number start from 1. Followed by one number which is the total supports the winner(s) get. Then follow a line contain all the Hawks\u0026rsquo; number. The numbers must be listed in increasing order and separated by single spaces.\n样例输入 12 24 3 33 2 42 0 52 1 6 73 3 81 0 92 1 100 2 样例输出 1Case 1: 2 20 1 3Case 2: 2 40 1 2 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 5e3+5; 5const int M = 3e4+5; 6 7struct E { 8 int to, next; 9} e[M]; 10int H[N], tot, R[N]; 11 12int S[N], top; 13int dfn[N], low[N], bel[N], idx, scc; 14 15int T, n, m; 16int u, v; 17 18int od[N], num[N], sum[N]; 19bool vis[N]; 20 21void add(int *H, int from, int to) { 22 e[tot] = {to, H[from]}; 23 H[from] = tot++; 24} 25 26void dfs(int u) { 27 dfn[u] = low[u] = ++idx; 28 S[++top]=u; 29 30 for(int i=H[u]; ~i; i=e[i].next) { 31 int v = e[i].to; 32 if(!dfn[v]) { 33 dfs(v); 34 low[u] = min(low[u], low[v]); 35 } else if(!bel[v]) 36 low[u] = min(low[u], dfn[v]); 37 } 38 if(low[u]==dfn[u]) { 39 scc++; 40 int t; 41 do { 42 t=S[top--]; 43 bel[t]=scc; 44 } while(t!=u); 45 } 46} 47 48void tarjan() { 49 memset(dfn, 0, sizeof(dfn)); 50 memset(bel, 0, sizeof(bel)); 51 idx = scc = top = 0; 52 for(int i=1; i\u0026lt;=n; i++) { 53 if(!dfn[i]) 54 dfs(i); 55 } 56} 57 58int stat(int u) { 59 vis[u] = 1; 60 int t = num[u]; 61 for(int i=R[u]; ~i; i=e[i].next) { 62 int v = e[i].to; 63 if(!vis[v]) { 64 t += stat(v); 65 } 66 } 67 return t; 68} 69 70int solve() { 71 memset(od, 0, sizeof(od)); 72 memset(num, 0, sizeof(num)); 73 memset(sum, 0, sizeof(sum)); 74 75 for(int i=1; i\u0026lt;=n; i++) { 76 num[bel[i]]++; 77 } 78 79 for(int u=1; u\u0026lt;=n; u++) { 80 for(int i=H[u]; ~i; i=e[i].next) { 81 int v = e[i].to; 82 if(bel[u]!=bel[v]) { 83 add(R, bel[v], bel[u]); 84 od[bel[u]]++; 85 } 86 } 87 } 88 int ans=0; 89 for(int i=1; i\u0026lt;=scc; i++) { 90 if(!od[i]) { 91 memset(vis, 0, sizeof(vis)); 92 sum[i] = stat(i)-1; 93 ans = max(ans, sum[i]); 94 } 95 } 96 return ans; 97} 98 99int main(void) { 100 scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 101 for(int cs=1; cs\u0026lt;=T; cs++) { 102 scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;n, \u0026amp;m); 103 memset(H, -1, sizeof(H)); 104 memset(R, -1, sizeof(R)); 105 tot = 0; 106 for(int i=0; i\u0026lt;m; i++) { 107 scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;u, \u0026amp;v); 108 add(H, u+1, v+1); 109 } 110 tarjan(); 111 int ans = solve(), flag = 0; 112 printf(\u0026#34;Case %d: %d\\n\u0026#34;, cs, ans); 113 for(int i=1; i\u0026lt;=n; i++) { 114 if(sum[bel[i]]==ans) { 115 if(flag) 116 printf(\u0026#34; \u0026#34;); 117 else 118 flag = 1; 119 printf(\u0026#34;%d\u0026#34;, i-1); 120 } 121 } 122 printf(\u0026#34;\\n\u0026#34;); 123 } 124 return 0; 125} ","permalink":"https://blog.lordash.de/posts/solution/hdu-3639-hawk-and-chicken/","summary":"Hawk-and-Chicken (HDU - 3639) 题面 Kids in kindergarten enjoy playing a game called Hawk-and-Chicken. But there always exists a big problem: every kid in this game want to play the role of Hawk. So the teacher came up with an idea: Vote. Every child have some nice handkerchiefs, and if he/she think someone is suitable for the role of Hawk, he/she gives a handkerchief to this kid, which means","title":"HDU-3639 Hawk-and-Chicken"},{"content":"Summer Holiday (HDU - 1827) 题面 To see a World in a Grain of Sand And a Heaven in a Wild Flower, Hold Infinity in the palm of your hand And Eternity in an hour. —— William Blake\n听说lcy帮大家预定了新马泰7日游，Wiskey真是高兴的夜不能寐啊，他想着得快点把这消息告诉大家，虽然他手上有所有人的联系方式，但是一个一个联系过去实在太耗时间和电话费了。他知道其他人也有一些别人的联系方式，这样他可以通知其他人，再让其他人帮忙通知一下别人。你能帮Wiskey计算出至少要通知多少人，至少得花多少电话费就能让所有人都被通知到吗？\n输入 多组测试数组，以EOF结束。 第一行两个整数N和M（1\u0026lt;=N\u0026lt;=1000, 1\u0026lt;=M\u0026lt;=2000），表示人数和联系对数。 接下一行有N个整数，表示Wiskey联系第i个人的电话费用。 接着有M行，每行有两个整数X，Y，表示X能联系到Y，但是不表示Y也能联系X。\n输出 输出最小联系人数和最小花费。 每个CASE输出答案一行。\n样例输入 112 16 22 2 2 2 2 2 2 2 2 2 2 2 31 3 43 2 52 1 63 4 72 4 83 5 95 4 104 6 116 4 127 4 137 12 147 8 158 7 168 9 1710 9 1811 10 样例输出 13 6 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 2e4+5; 5const int M = 5e4+5; 6 7struct E { 8 int to, next; 9} e[M]; 10 11int H[N], tot; 12 13int S[N], top; 14int dfn[N], low[N], bel[N], idx, scc; 15 16int n, m, cost[N]; 17int u, v; 18 19int sc[N], id[N]; 20 21void add(int from, int to) { 22 e[tot] = {to, H[from]}; 23 H[from] = tot++; 24} 25 26void dfs(int u) { 27 dfn[u] = low[u] = ++idx; 28 S[++top]=u; 29 30 for(int i=H[u]; ~i; i=e[i].next) { 31 int v = e[i].to; 32 if(!dfn[v]) { 33 dfs(v); 34 low[u] = min(low[u], low[v]); 35 } else if(!bel[v]) 36 low[u] = min(low[u], dfn[v]); 37 } 38 if(low[u]==dfn[u]) { 39 scc++; 40 int t; 41 do { 42 t=S[top--]; 43 bel[t]=scc; 44 } while(t!=u); 45 } 46} 47 48void tarjan() { 49 memset(dfn, 0, sizeof(dfn)); 50 memset(bel, 0, sizeof(bel)); 51 idx = scc = top = 0; 52 for(int i=1; i\u0026lt;=n; i++) { 53 if(!dfn[i]) 54 dfs(i); 55 } 56} 57 58void solve(int \u0026amp;num, int \u0026amp;sum) { 59 memset(sc, inf, sizeof(sc)); 60 memset(id, 0, sizeof(id)); 61 62 for(int i=1; i\u0026lt;=n; i++) 63 sc[bel[i]] = min(sc[bel[i]], cost[i]); 64 65 for(int u=1; u\u0026lt;=n; u++) { 66 for(int i=H[u]; ~i; i=e[i].next) { 67 int v = e[i].to; 68 if(bel[u]!=bel[v]) { 69 id[bel[v]]++; 70 } 71 } 72 } 73 74 int a=0, b=0; 75 for(int i=1; i\u0026lt;=scc; i++) { 76 if(!id[i]) 77 num++, sum+=sc[i]; 78 } 79} 80 81int main(void) { 82 while(scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;n, \u0026amp;m)==2) { 83 memset(H, -1, sizeof(H)); 84 tot = 0; 85 for(int i=1; i\u0026lt;=n; i++) 86 scanf(\u0026#34;%d\u0026#34;, \u0026amp;cost[i]); 87 for(int i=0; i\u0026lt;m; i++) { 88 scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;u, \u0026amp;v); 89 add(u, v); 90 } 91 tarjan(); 92 int num=0, sum=0; 93 solve(num, sum); 94 printf(\u0026#34;%d %d\\n\u0026#34;, num, sum); 95 } 96 return 0; 97} ","permalink":"https://blog.lordash.de/posts/solution/hdu-1827-summer-holiday/","summary":"Summer Holiday (HDU - 1827) 题面 To see a World in a Grain of Sand And a Heaven in a Wild Flower, Hold Infinity in the palm of your hand And Eternity in an hour. —— William Blake 听说lcy帮大家预定了新马泰7日游，Wiskey真是高兴的夜","title":"HDU-1827 Summer Holiday"},{"content":"Proving Equivalences (HDU - 2767) 题面 Consider the following exercise, found in a generic linear algebra textbook.\nLet A be an n × n matrix. Prove that the following statements are equivalent:\n\\1. A is invertible. \\2. Ax = b has exactly one solution for every n × 1 matrix b. \\3. Ax = b is consistent for every n × 1 matrix b. \\4. Ax = 0 has only the trivial solution x = 0.\nThe typical way to solve such an exercise is to show a series of implications. For instance, one can proceed by showing that (a) implies (b), that (b) implies (c), that (c) implies (d), and finally that (d) implies (a). These four implications show that the four statements are equivalent.\nAnother way would be to show that (a) is equivalent to (b) (by proving that (a) implies (b) and that (b) implies (a)), that (b) is equivalent to (c), and that (c) is equivalent to (d). However, this way requires proving six implications, which is clearly a lot more work than just proving four implications!\nI have been given some similar tasks, and have already started proving some implications. Now I wonder, how many more implications do I have to prove? Can you help me determine this?\n输入 On the first line one positive number: the number of testcases, at most 100. After that per testcase:\n* One line containing two integers n (1 ≤ n ≤ 20000) and m (0 ≤ m ≤ 50000): the number of statements and the number of implications that have already been proved. * m lines with two integers s1 and s2 (1 ≤ s1, s2 ≤ n and s1 ≠ s2) each, indicating that it has been proved that statement s1 implies statement s2.\n输出 Per testcase:\n* One line with the minimum number of additional implications that need to be proved in order to prove that all statements are equivalent.\n样例输入 12 24 0 33 2 41 2 51 3 样例输出 14 22 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int N = 1e4+5; 4const int M = 1e5+5; 5 6struct E { 7 int to, next; 8} e[M]; 9 10int H[N], tot; 11 12int S[N], top; 13int dfn[N], low[N], bel[N], idx, scc; 14 15int T, n, m; 16int u, v; 17 18int id[N], od[N]; 19 20void add(int from, int to) { 21 e[tot] = {to, H[from]}; 22 H[from] = tot++; 23} 24 25void dfs(int u) { 26 dfn[u] = low[u] = ++idx; 27 S[++top]=u; 28 29 for(int i=H[u]; ~i; i=e[i].next) { 30 int v = e[i].to; 31 if(!dfn[v]) { 32 dfs(v); 33 low[u] = min(low[u], low[v]); 34 } else if(!bel[v]) 35 low[u] = min(low[u], dfn[v]); 36 } 37 if(low[u]==dfn[u]) { 38 scc++; 39 int t; 40 do { 41 t=S[top--]; 42 bel[t]=scc; 43 } while(t!=u); 44 } 45} 46 47void tarjan() { 48 memset(dfn, 0, sizeof(dfn)); 49 memset(bel, 0, sizeof(bel)); 50 idx = scc = top = 0; 51 for(int i=1; i\u0026lt;=n; i++) { 52 if(!dfn[i]) 53 dfs(i); 54 } 55} 56 57int solve() { 58 if(scc==1) 59 return 0; 60 61 memset(id, 0, sizeof(id)); 62 memset(od, 0, sizeof(od)); 63 64 for(int u=1; u\u0026lt;=n; u++) { 65 for(int i=H[u]; ~i; i=e[i].next) { 66 int v = e[i].to; 67 if(bel[u]!=bel[v]) { 68 od[bel[u]]++; 69 id[bel[v]]++; 70 } 71 } 72 } 73 74 int a=0, b=0; 75 for(int i=1; i\u0026lt;=scc; i++) { 76 a+=!id[i]; 77 b+=!od[i]; 78 } 79 return max(a, b); 80} 81 82int main(void) { 83 scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 84 while(T--) { 85 scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;n, \u0026amp;m); 86 memset(H, -1, sizeof(H)); 87 tot = 0; 88 for(int i=0; i\u0026lt;m; i++) { 89 scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;u, \u0026amp;v); 90 add(u, v); 91 } 92 tarjan(); 93 printf(\u0026#34;%d\\n\u0026#34;, solve()); 94 } 95 return 0; 96} ","permalink":"https://blog.lordash.de/posts/solution/hdu-2767-proving-equivalences/","summary":"Proving Equivalences (HDU - 2767) 题面 Consider the following exercise, found in a generic linear algebra textbook. Let A be an n × n matrix. Prove that the following statements are equivalent: \\1. A is invertible. \\2. Ax = b has exactly one solution for every n × 1 matrix b. \\3. Ax = b is consistent for every n × 1 matrix b. \\4. Ax = 0 has","title":"HDU-2767 Proving Equivalences"},{"content":"Jungle Roads (POJ - 1251) 题面 The Head Elder of the tropical island of Lagrishan has a problem. A burst of foreign aid money was spent on extra roads between villages some years ago. But the jungle overtakes roads relentlessly, so the large road network is too expensive to maintain. The Council of Elders must choose to stop maintaining some roads. The map above on the left shows all the roads in use now and the cost in aacms per month to maintain them. Of course there needs to be some way to get between all the villages on maintained roads, even if the route is not as short as before. The Chief Elder would like to tell the Council of Elders what would be the smallest amount they could spend in aacms per month to maintain roads that would connect all the villages. The villages are labeled A through I in the maps above. The map on the right shows the roads that could be maintained most cheaply, for 216 aacms per month. Your task is to write a program that will solve such problems.\n输入 The input consists of one to 100 data sets, followed by a final line containing only 0. Each data set starts with a line containing only a number n, which is the number of villages, 1 \u0026lt; n \u0026lt; 27, and the villages are labeled with the first n letters of the alphabet, capitalized. Each data set is completed with n-1 lines that start with village labels in alphabetical order. There is no line for the last village. Each line for a village starts with the village label followed by a number, k, of roads from this village to villages with labels later in the alphabet. If k is greater than 0, the line continues with data for each of the k roads. The data for each road is the village label for the other end of the road followed by the monthly maintenance cost in aacms for the road. Maintenance costs will be positive integers less than 100. All data fields in the row are separated by single blanks. The road network will always allow travel between all the villages. The network will never have more than 75 roads. No village will have more than 15 roads going to other villages (before or after in the alphabet). In the sample input below, the first data set goes with the map above.\n输出 The output is one integer per line for each data set: the minimum cost in aacms per month to maintain a road system that connect all the villages. Caution: A brute force solution that examines every possible set of roads will not finish within the one minute time limit.\n样例输入 19 2A 2 B 12 I 25 3B 3 C 10 H 40 I 8 4C 2 D 18 G 55 5D 1 E 44 6E 2 F 60 G 38 7F 0 8G 1 H 35 9H 1 I 35 103 11A 2 B 10 C 40 12B 1 C 20 130 样例输出 1216 230 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e2+5; 5 6int n; 7 8int f[N] = {0}; 9void init(int n) { 10 for(int i=0; i\u0026lt;n; i++) 11 f[i] = i; 12} 13 14int Find(int x) { 15 return f[x]==x ? x : f[x]=Find(f[x]); 16} 17 18bool same(int x, int y) { 19 return Find(x)==Find(y); 20} 21 22void join(int x, int y) { 23 x=Find(x), y=Find(y); 24 f[x] = y; 25} 26 27struct edge { 28 int u, v, w; 29} e[N]; 30 31bool cmp(edge a, edge b) { 32 return a.w \u0026lt; b.w; 33} 34 35int kruskal(int m) { 36 int ans=0; 37 for(int i=0; i\u0026lt;m; i++) { 38 if(!same(e[i].u, e[i].v)) { 39 join(e[i].u, e[i].v); 40 ans += e[i].w; 41 } 42 } 43 return ans; 44} 45 46int main(void) { 47 while(scanf(\u0026#34;%d\u0026#34;, \u0026amp;n)==1 \u0026amp;\u0026amp; n) { 48 int k, w, num=0; 49 char f, t; 50 for(int i=0; i\u0026lt;n-1; i++) { 51 scanf(\u0026#34; %c%d\u0026#34;, \u0026amp;f, \u0026amp;k); 52 for(int j=0; j\u0026lt;k; j++) { 53 scanf(\u0026#34; %c%d\u0026#34;, \u0026amp;t, \u0026amp;w); 54 e[num] = {f-\u0026#39;A\u0026#39;, t-\u0026#39;A\u0026#39;, w}; 55 num++; 56 } 57 } 58 sort(e, e+num, cmp); 59 init(n); 60 printf(\u0026#34;%d\\n\u0026#34;, kruskal(num)); 61 } 62 return 0; 63} ","permalink":"https://blog.lordash.de/posts/solution/poj-1251-jungle-roads/","summary":"Jungle Roads (POJ - 1251) 题面 The Head Elder of the tropical island of Lagrishan has a problem. A burst of foreign aid money was spent on extra roads between villages some years ago. But the jungle overtakes roads relentlessly, so the large road network is too expensive to maintain. The Council of Elders must choose to stop maintaining some roads. The map above on the left shows all","title":"POJ-1251 Jungle Roads"},{"content":"迷宫城堡 (HDU - 1269) 题面 为了训练小希的方向感，Gardon建立了一座大城堡，里面有N个房间(N\u0026lt;=10000)和M条通道(M\u0026lt;=100000)，每个通道都是单向的，就是说若称某通道连通了A房间和B房间，只说明可以通过这个通道由A房间到达B房间，但并不说明通过它可以由B房间到达A房间。Gardon需要请你写个程序确认一下是否任意两个房间都是相互连通的，即：对于任意的i和j，至少存在一条路径可以从房间i到房间j，也存在一条路径可以从房间j到房间i。\n输入 输入包含多组数据，输入的第一行有两个数：N和M，接下来的M行每行有两个数a和b，表示了一条通道可以从A房间来到B房间。文件最后以两个0结束。\n输出 对于输入的每组数据，如果任意两个房间都是相互连接的，输出\u0026quot;Yes\u0026quot;，否则输出\u0026quot;No\u0026quot;。\n样例输入 13 3 21 2 32 3 43 1 53 3 61 2 72 3 83 2 90 0 样例输出 1Yes 2No 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int N = 1e4+5; 4const int M = 1e5+5; 5 6struct E { 7 int to, next; 8} e[M]; 9 10int H[N], tot; 11 12int S[N], top; 13int dfn[N], low[N], bel[N], idx, scc; 14 15int n, m; 16int u, v; 17 18void add(int from, int to) { 19 e[tot] = {to, H[from]}; 20 H[from] = tot++; 21} 22 23void dfs(int u) { 24 dfn[u] = low[u] = ++idx; 25 S[++top]=u; 26 27 for(int i=H[u]; ~i; i=e[i].next) { 28 int v = e[i].to; 29 if(!dfn[v]) { 30 dfs(v); 31 low[u] = min(low[u], low[v]); 32 } else if(!bel[v]) 33 low[u] = min(low[u], dfn[v]); 34 } 35 if(low[u]==dfn[u]) { 36 scc++; 37 int t; 38 do { 39 t=S[top--]; 40 bel[t]=scc; 41 } while(t!=u); 42 } 43} 44 45void tarjan() { 46 memset(dfn, 0, sizeof(dfn)); 47 memset(bel, 0, sizeof(bel)); 48 idx = scc = top = 0; 49 for(int i=1; i\u0026lt;=n; i++) { 50 if(!dfn[i]) 51 dfs(i); 52 } 53} 54 55int main(void) { 56 while(scanf(\u0026#34;%d%d\u0026#34;,\u0026amp;n,\u0026amp;m)==2 \u0026amp;\u0026amp; (n || m)) { 57 memset(H, -1, sizeof(H)); 58 tot = 0; 59 for(int i=0; i\u0026lt;m; i++) { 60 scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;u, \u0026amp;v); 61 add(u, v); 62 } 63 tarjan(); 64 if(scc==1) 65 printf(\u0026#34;Yes\\n\u0026#34;); 66 else 67 printf(\u0026#34;No\\n\u0026#34;); 68 } 69 return 0; 70} ","permalink":"https://blog.lordash.de/posts/solution/hdu-1269-%E8%BF%B7%E5%AE%AB%E5%9F%8E%E5%A0%A1/","summary":"迷宫城堡 (HDU - 1269) 题面 为了训练小希的方向感，Gardon建立了一座大城堡，里面有N个房间(N\u0026lt;=10000)和M条通道(M\u0026lt;=100","title":"HDU-1269 迷宫城堡"},{"content":"FatMouse’s Speed (HDU - 1160) 题面 FatMouse believes that the fatter a mouse is, the faster it runs. To disprove this, you want to take the data on a collection of mice and put as large a subset of this data as possible into a sequence so that the weights are increasing, but the speeds are decreasing.\n输入 Input contains data for a bunch of mice, one mouse per line, terminated by end of file.\nThe data for a particular mouse will consist of a pair of integers: the first representing its size in grams and the second representing its speed in centimeters per second. Both integers are between 1 and 10000. The data in each test case will contain information for at most 1000 mice.\nTwo mice may have the same weight, the same speed, or even the same weight and speed.\n输出 Your program should output a sequence of lines of data; the first line should contain a number n; the remaining n lines should each contain a single positive integer (each one representing a mouse). If these n integers are m[1], m[2],\u0026hellip;, m[n] then it must be the case that\nW[m[1]] \u0026lt; W[m[2]] \u0026lt; \u0026hellip; \u0026lt; W[m[n]]\nand\nS[m[1]] \u0026gt; S[m[2]] \u0026gt; \u0026hellip; \u0026gt; S[m[n]]\nIn order for the answer to be correct, n should be as large as possible. All inequalities are strict: weights must be strictly increasing, and speeds must be strictly decreasing. There may be many correct outputs for a given input, your program only needs to find one.\n样例输入 16008 1300 26000 2100 3500 2000 41000 4000 51100 3000 66000 2000 78000 1400 86000 1200 92000 1900 样例输出 14 24 35 49 57 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e3+5; 5 6struct P { 7 int w, s, id; 8}; 9 10P a[N]; 11int dp[N]; 12 13bool cmp(P a, P b) { 14 if(a.w==b.w) 15 return a.s \u0026gt; b.s; 16 return a.w \u0026lt; b.w; 17} 18 19int main(void) { 20 int n = 0; 21 while(scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;a[n].w, \u0026amp;a[n].s)==2) { 22 a[n].id = n+1; 23 n++; 24 } 25 sort(a, a+n, cmp); 26 int mx = 0; 27 28 for(int i=0; i\u0026lt;n; i++) { 29 dp[i] = 1; 30 for(int j=0; j\u0026lt;i; j++) { 31 if(a[j].w\u0026lt;a[i].w \u0026amp;\u0026amp; a[j].s\u0026gt;a[i].s) { 32 dp[i] = max(dp[i], dp[j]+1); 33 mx = max(mx, dp[i]); 34 } 35 } 36 } 37 printf(\u0026#34;%d\\n\u0026#34;, mx); 38 stack\u0026lt;int\u0026gt; st; 39 for(int i=n-1; i\u0026gt;=0; i--) { 40 if(dp[i]==mx) { 41 st.push(a[i].id); 42 mx--; 43 } 44 } 45 while(st.size()) { 46 printf(\u0026#34;%d\\n\u0026#34;, st.top()); 47 st.pop(); 48 } 49 return 0; 50} ","permalink":"https://blog.lordash.de/posts/solution/hdu-1160-fatmouses-speed/","summary":"FatMouse’s Speed (HDU - 1160) 题面 FatMouse believes that the fatter a mouse is, the faster it runs. To disprove this, you want to take the data on a collection of mice and put as large a subset of this data as possible into a sequence so that the weights are increasing, but the speeds are decreasing. 输入 Input","title":"HDU-1160 FatMouse's Speed"},{"content":"Advanced Fruits (POJ - 2264) 题面 The company \u0026ldquo;21st Century Fruits\u0026rdquo; has specialized in creating new sorts of fruits by transferring genes from one fruit into the genome of another one. Most times this method doesn\u0026rsquo;t work, but sometimes, in very rare cases, a new fruit emerges that tastes like a mixture between both of them.\nA big topic of discussion inside the company is \u0026ldquo;How should the new creations be called?\u0026rdquo; A mixture between an apple and a pear could be called an apple-pear, of course, but this doesn\u0026rsquo;t sound very interesting. The boss finally decides to use the shortest string that contains both names of the original fruits as sub-strings as the new name. For instance, \u0026ldquo;applear\u0026rdquo; contains \u0026ldquo;apple\u0026rdquo; and \u0026ldquo;pear\u0026rdquo; (APPLEar and apPlEAR), and there is no shorter string that has the same property. A combination of a cranberry and a boysenberry would therefore be called a \u0026ldquo;boysecranberry\u0026rdquo; or a \u0026ldquo;craboysenberry\u0026rdquo;, for example.\nYour job is to write a program that computes such a shortest name for a combination of two given fruits. Your algorithm should be efficient, otherwise it is unlikely that it will execute in the alloted time for long fruit names.\n输入 Each line of the input contains two strings that represent the names of the fruits that should be combined. All names have a maximum length of 100 and only consist of alphabetic characters. Input is terminated by end of file.\n输出 For each test case, output the shortest name of the resulting fruit on one line. If more than one shortest name is possible, any one is acceptable.\n样例输入 1apple peach 2ananas banana 3pear peach 样例输出 1appleach 2bananas 3pearch 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e2+5; 5 6string s, t; 7int dp[N][N]; 8 9void print(int i, int j) { 10 stack\u0026lt;char\u0026gt;st; 11 while(i||j) { 12 if(i==0) { 13 st.push(t[j-1]), j--; 14 continue; 15 } 16 if(j==0) { 17 st.push(s[i-1]), i--; 18 continue; 19 } 20 if(s[i-1]==t[j-1]) { 21 st.push(s[i-1]); 22 i--, j--; 23 } else { 24 if(dp[i-1][j]\u0026gt;dp[i][j-1]) 25 st.push(s[i-1]), i--; 26 else 27 st.push(t[j-1]), j--; 28 } 29 } 30 while(st.size()) { 31 cout\u0026lt;\u0026lt;st.top(); 32 st.pop(); 33 } 34 cout\u0026lt;\u0026lt;endl; 35} 36 37int main(void) { 38 while(cin\u0026gt;\u0026gt;s\u0026gt;\u0026gt;t) { 39 int n = s.size(); 40 int m = t.size(); 41 memset(dp, 0, sizeof(dp)); 42 for(int i=1; i\u0026lt;=n; i++) { 43 for(int j=1; j\u0026lt;=m; j++) { 44 if(s[i-1]==t[j-1]) 45 dp[i][j] = dp[i-1][j-1]+1; 46 else 47 dp[i][j] = max(dp[i-1][j], dp[i][j-1]); 48 } 49 } 50 print(n, m); 51 } 52 return 0; 53} ","permalink":"https://blog.lordash.de/posts/solution/poj-2264-advanced-fruits/","summary":"Advanced Fruits (POJ - 2264) 题面 The company \u0026ldquo;21st Century Fruits\u0026rdquo; has specialized in creating new sorts of fruits by transferring genes from one fruit into the genome of another one. Most times this method doesn\u0026rsquo;t work, but sometimes, in very rare cases, a new fruit emerges that tastes like a mixture between both of them. A big topic of discussion inside the company is \u0026ldquo;How should the new","title":"POJ-2264 Advanced Fruits"},{"content":"Compromise (POJ - 2250) 题面 In a few months the European Currency Union will become a reality. However, to join the club, the Maastricht criteria must be fulfilled, and this is not a trivial task for the countries (maybe except for Luxembourg). To enforce that Germany will fulfill the criteria, our government has so many wonderful options (raise taxes, sell stocks, revalue the gold reserves,\u0026hellip;) that it is really hard to choose what to do.\nTherefore the German government requires a program for the following task: Two politicians each enter their proposal of what to do. The computer then outputs the longest common subsequence of words that occurs in both proposals. As you can see, this is a totally fair compromise (after all, a common sequence of words is something what both people have in mind).\nYour country needs this program, so your job is to write it for us.\n输入 The input will contain several test cases. Each test case consists of two texts. Each text is given as a sequence of lower-case words, separated by whitespace, but with no punctuation. Words will be less than 30 characters long. Both texts will contain less than 100 words and will be terminated by a line containing a single \u0026lsquo;#\u0026rsquo;. Input is terminated by end of file.\n输出 For each test case, print the longest common subsequence of words occuring in the two texts. If there is more than one such sequence, any one is acceptable. Separate the words by one blank. After the last word, output a newline character.\n样例输入 1die einkommen der landwirte 2sind fuer die abgeordneten ein buch mit sieben siegeln 3um dem abzuhelfen 4muessen dringend alle subventionsgesetze verbessert werden 5# 6die steuern auf vermoegen und einkommen 7sollten nach meinung der abgeordneten 8nachdruecklich erhoben werden 9dazu muessen die kontrollbefugnisse der finanzbehoerden 10dringend verbessert werden 11# 样例输出 1die einkommen der abgeordneten muessen dringend verbessert werden 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e2+5; 5 6string a[N], b[N], s; 7int dp[N][N]; 8 9void print(int i, int j) { 10 stack\u0026lt;string\u0026gt;st; 11 while(i\u0026amp;\u0026amp;j) { 12 if(a[i-1]==b[j-1]) { 13 st.push(a[i-1]); 14 i--, j--; 15 } else { 16 if(dp[i-1][j]\u0026gt;dp[i][j-1]) 17 i--; 18 else 19 j--; 20 } 21 } 22 while(st.size()) { 23 cout\u0026lt;\u0026lt;st.top()\u0026lt;\u0026lt;\u0026#34; \u0026#34;; 24 st.pop(); 25 } 26 cout\u0026lt;\u0026lt;endl; 27} 28 29int main(void) { 30 while(cin\u0026gt;\u0026gt;s) { 31 int n = 0, m = 0; 32 while(s!=\u0026#34;#\u0026#34;) { 33 a[n++] = s; 34 cin\u0026gt;\u0026gt;s; 35 } 36 cin\u0026gt;\u0026gt;s; 37 while(s!=\u0026#34;#\u0026#34;) { 38 b[m++] = s; 39 cin\u0026gt;\u0026gt;s; 40 } 41 memset(dp, 0, sizeof(dp)); 42 for(int i=1; i\u0026lt;=n; i++) { 43 for(int j=1; j\u0026lt;=m; j++) { 44 if(a[i-1]==b[j-1]) 45 dp[i][j] = dp[i-1][j-1]+1; 46 else 47 dp[i][j] = max(dp[i-1][j], dp[i][j-1]); 48 } 49 } 50 print(n, m); 51 } 52 return 0; 53} ","permalink":"https://blog.lordash.de/posts/solution/poj-2250-compromise/","summary":"Compromise (POJ - 2250) 题面 In a few months the European Currency Union will become a reality. However, to join the club, the Maastricht criteria must be fulfilled, and this is not a trivial task for the countries (maybe except for Luxembourg). To enforce that Germany will fulfill the criteria, our government has so many wonderful options (raise taxes, sell stocks, revalue the gold reserves,\u0026hellip;) that it is really","title":"POJ-2250 Compromise"},{"content":"Common Subsequence (POJ-1458、HDU - 1159) 题面 A subsequence of a given sequence is the given sequence with some elements (possible none) left out. Given a sequence X = \u0026lt; x1, x2, \u0026hellip;, xm \u0026gt; another sequence Z = \u0026lt; z1, z2, \u0026hellip;, zk \u0026gt; is a subsequence of X if there exists a strictly increasing sequence \u0026lt; i1, i2, \u0026hellip;, ik \u0026gt; of indices of X such that for all j = 1,2,\u0026hellip;,k, x ij = zj. For example, Z = \u0026lt; a, b, f, c \u0026gt; is a subsequence of X = \u0026lt; a, b, c, f, b, c \u0026gt; with index sequence \u0026lt; 1, 2, 4, 6 \u0026gt;. Given two sequences X and Y the problem is to find the length of the maximum-length common subsequence of X and Y.\n输入 The program input is from the std input. Each data set in the input contains two strings representing the given sequences. The sequences are separated by any number of white spaces. The input data are correct.\n输出 For each set of data the program prints on the standard output the length of the maximum-length common subsequence from the beginning of a separate line.\n样例输入 1abcfbc abfcab 2programming contest 3abcd mnp 样例输出 14 22 30 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e3+5; 5 6char a[N], b[N]; 7int dp[N][N]; 8 9int main(void) { 10 while(scanf(\u0026#34;%s%s\u0026#34;, a, b)==2) { 11 int la = strlen(a); 12 int lb = strlen(b); 13 for(int i=1; i\u0026lt;=la; i++) { 14 for(int j=1; j\u0026lt;=lb; j++) { 15 if(a[i-1]==b[j-1]) 16 dp[i][j] = dp[i-1][j-1]+1; 17 else 18 dp[i][j] = max(dp[i-1][j], dp[i][j-1]); 19 } 20 } 21 printf(\u0026#34;%d\\n\u0026#34;, dp[la][lb]); 22 } 23 return 0; 24} ","permalink":"https://blog.lordash.de/posts/solution/poj-1458-common-subsequence/","summary":"Common Subsequence (POJ-1458、HDU - 1159) 题面 A subsequence of a given sequence is the given sequence with some elements (possible none) left out. Given a sequence X = \u0026lt; x1, x2, \u0026hellip;, xm \u0026gt; another sequence Z = \u0026lt; z1, z2, \u0026hellip;, zk \u0026gt; is a subsequence of X if there exists a strictly increasing sequence \u0026lt;","title":"POJ-1458 Common Subsequence"},{"content":"Longest Ordered Subsequence (POJ - 2533) 题面 A numeric sequence of ai is ordered if a1 \u0026lt; a2 \u0026lt; \u0026hellip; \u0026lt; aN. Let the subsequence of the given numeric sequence ( a1, a2, \u0026hellip;, aN) be any sequence ( ai1, ai2, \u0026hellip;, aiK), where 1 \u0026lt;= i1 \u0026lt; i2 \u0026lt; \u0026hellip; \u0026lt; iK \u0026lt;= N. For example, sequence (1, 7, 3, 5, 9, 4, 8) has ordered subsequences, e. g., (1, 7), (3, 4, 8) and many others. All longest ordered subsequences are of length 4, e. g., (1, 3, 5, 8).\nYour program, when given the numeric sequence, must find the length of its longest ordered subsequence.\n输入 The first line of input file contains the length of sequence N. The second line contains the elements of sequence - N integers in the range from 0 to 10000 each, separated by spaces. 1 \u0026lt;= N \u0026lt;= 1000\n输出 Output file must contain a single integer - the length of the longest ordered subsequence of the given sequence.\n样例输入 17 21 7 3 5 9 4 8 样例输出 14 提示 无\n思路 n^2也能过\n代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e3+5; 5 6int a[N]; 7int n; 8 9int dp[N], ans[N]; 10 11int main(void) { 12 scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 13 for(int i=0; i\u0026lt;n; i++) 14 scanf(\u0026#34;%d\u0026#34;, \u0026amp;a[i]); 15 16 ans[0] = a[0]; 17 int len = 0; 18 for(int i=1; i\u0026lt;n; i++) { 19 if(a[i]\u0026gt;ans[len]) { 20 ans[++len] = a[i]; 21 } else { 22 int pos = lower_bound(ans, ans+len, a[i])-dp; 23 dp[pos] = a[i]; 24 } 25 } 26 printf(\u0026#34;%d\\n\u0026#34;, len+1); 27 28 return 0; 29} ","permalink":"https://blog.lordash.de/posts/solution/poj-2533-longest-ordered-subsequence/","summary":"Longest Ordered Subsequence (POJ - 2533) 题面 A numeric sequence of ai is ordered if a1 \u0026lt; a2 \u0026lt; \u0026hellip; \u0026lt; aN. Let the subsequence of the given numeric sequence ( a1, a2, \u0026hellip;, aN) be any sequence ( ai1, ai2, \u0026hellip;, aiK), where 1 \u0026lt;= i1 \u0026lt; i2 \u0026lt; \u0026hellip; \u0026lt; iK \u0026lt;= N. For example, sequence (1, 7, 3, 5, 9, 4, 8) has ordered subsequences, e.","title":"POJ-2533 Longest Ordered Subsequence"},{"content":"Alignment (POJ - 1836) 题面 In the army, a platoon is composed by n soldiers. During the morning inspection, the soldiers are aligned in a straight line in front of the captain. The captain is not satisfied with the way his soldiers are aligned; it is true that the soldiers are aligned in order by their code number: 1 , 2 , 3 , . . . , n , but they are not aligned by their height. The captain asks some soldiers to get out of the line, as the soldiers that remain in the line, without changing their places, but getting closer, to form a new line, where each soldier can see by looking lengthwise the line at least one of the line\u0026rsquo;s extremity (left or right). A soldier see an extremity if there isn\u0026rsquo;t any soldiers with a higher or equal height than his height between him and that extremity.\nWrite a program that, knowing the height of each soldier, determines the minimum number of soldiers which have to get out of line.\n输入 On the first line of the input is written the number of the soldiers n. On the second line is written a series of n floating numbers with at most 5 digits precision and separated by a space character. The k-th number from this line represents the height of the soldier who has the code k (1 \u0026lt;= k \u0026lt;= n).\nThere are some restrictions: • 2 \u0026lt;= n \u0026lt;= 1000 • the height are floating numbers from the interval [0.5, 2.5]\n输出 The only line of output will contain the number of the soldiers who have to get out of the line.\n样例输入 18 21.86 1.86 1.30621 2 1.4 1 1.97 2.2 样例输出 14 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e3+5; 5 6double a[N]; 7int n; 8 9int dp1[N], dp2[N]; 10 11int main(void) { 12 scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 13 for(int i=0; i\u0026lt;n; i++) 14 scanf(\u0026#34;%lf\u0026#34;, \u0026amp;a[i]); 15 16 for(int i=0; i\u0026lt;n; i++) { 17 dp1[i] = 1; 18 for(int j=0; j\u0026lt;i; j++) { 19 if(a[j]\u0026lt;a[i]) 20 dp1[i] = max(dp1[i], dp1[j]+1); 21 } 22 } 23 for(int i=n-1; i\u0026gt;=0; i--) { 24 dp2[i] = 1; 25 for(int j=n-1; j\u0026gt;i; j--) { 26 if(a[j]\u0026lt;a[i]) 27 dp2[i] = max(dp2[i], dp2[j]+1); 28 } 29 } 30 int mx = 0; 31 for(int i=0; i\u0026lt;n; i++) { 32 for(int j=i+1; j\u0026lt;n; j++) 33 mx = max(mx, dp1[i]+dp2[j]); 34 } 35 printf(\u0026#34;%d\\n\u0026#34;, n-mx); 36 37 return 0; 38} ","permalink":"https://blog.lordash.de/posts/solution/poj-1836-alignment/","summary":"Alignment (POJ - 1836) 题面 In the army, a platoon is composed by n soldiers. During the morning inspection, the soldiers are aligned in a straight line in front of the captain. The captain is not satisfied with the way his soldiers are aligned; it is true that the soldiers are aligned in order by their code number: 1 , 2 , 3 , . . . , n","title":"POJ-1836 Alignment"},{"content":"Bone Collector II (HDU - 2639) 题面 The title of this problem is familiar,isn\u0026rsquo;t it?yeah,if you had took part in the \u0026ldquo;Rookie Cup\u0026rdquo; competition,you must have seem this title.If you haven\u0026rsquo;t seen it before,it doesn\u0026rsquo;t matter,I will give you a link:\nHere is the link: http://acm.hdu.edu.cn/showproblem.php?pid=2602\nToday we are not desiring the maximum value of bones,but the K-th maximum value of the bones.NOTICE that,we considerate two ways that get the same value of bones are the same.That means,it will be a strictly decreasing sequence from the 1st maximum , 2nd maximum .. to the K-th maximum.\nIf the total number of different values is less than K,just ouput 0.\n输入 The first line contain a integer T , the number of cases. Followed by T cases , each case three lines , the first line contain two integer N , V, K(N \u0026lt;= 100 , V \u0026lt;= 1000 , K \u0026lt;= 30)representing the number of bones and the volume of his bag and the K we need. And the second line contain N integers representing the value of each bone. The third line contain N integers representing the volume of each bone.\n输出 One integer per line representing the K-th maximum of the total value (this number will be less than 2^31).\n样例输入 13 25 10 2 31 2 3 4 5 45 4 3 2 1 55 10 12 61 2 3 4 5 75 4 3 2 1 85 10 16 91 2 3 4 5 105 4 3 2 1 样例输出 112 22 30 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e3+5; 5 6int w[N], c[N]; 7int T, n, v, m; 8 9int dp[N][N], a[N], b[N]; 10 11int main(void) { 12 scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 13 while(T--) { 14 scanf(\u0026#34;%d%d%d\u0026#34;, \u0026amp;n, \u0026amp;v, \u0026amp;m); 15 for(int i=0; i\u0026lt;n; i++) 16 scanf(\u0026#34;%d\u0026#34;, \u0026amp;w[i]); 17 for(int i=0; i\u0026lt;n; i++) 18 scanf(\u0026#34;%d\u0026#34;, \u0026amp;c[i]); 19 20 memset(dp, 0, sizeof(dp)); 21 22 for(int i=0; i\u0026lt;n; i++) { 23 for(int j=v; j\u0026gt;=c[i]; j--) { 24 for(int k=1; k\u0026lt;=m; k++) { 25 a[k] = dp[j][k]; 26 b[k] = dp[j-c[i]][k]+w[i]; 27 } 28 a[m+1] = b[m+1] = -1; 29 int di=1, ai=1, bi=1; 30 while(di\u0026lt;=m \u0026amp;\u0026amp; (ai\u0026lt;=m || bi\u0026lt;=m)) { 31 if(a[ai]\u0026gt;b[bi]) 32 dp[j][di] = a[ai++]; 33 else 34 dp[j][di] = b[bi++]; 35 if(dp[j][di]!=dp[j][di-1]) 36 di++; 37 } 38 } 39 } 40 printf(\u0026#34;%d\\n\u0026#34;, dp[v][m]); 41 } 42 return 0; 43} ","permalink":"https://blog.lordash.de/posts/solution/hdu-2639-bone-collector-ii/","summary":"Bone Collector II (HDU - 2639) 题面 The title of this problem is familiar,isn\u0026rsquo;t it?yeah,if you had took part in the \u0026ldquo;Rookie Cup\u0026rdquo; competition,you must have seem this title.If you haven\u0026rsquo;t seen it before,it doesn\u0026rsquo;t matter,I will give you a link: Here is the link: http://acm.hdu.edu.cn/showproblem.php?pid=2602 Today we are not desiring the maximum value of bones,but the K-th maximum value of the bones.NOTICE that,we considerate two ways that get","title":"HDU-2639 Bone Collector II"},{"content":"Bone Collector (HDU - 2602) 题面 Many years ago , in Teddy’s hometown there was a man who was called “Bone Collector”. This man like to collect varies of bones , such as dog’s , cow’s , also he went to the grave … The bone collector had a big bag with a volume of V ,and along his trip of collecting there are a lot of bones , obviously , different bone has different value and different volume, now given the each bone’s value along his trip , can you calculate out the maximum of the total value the bone collector can get ?\n输入 The first line contain a integer T , the number of cases. Followed by T cases , each case three lines , the first line contain two integer N , V, (N \u0026lt;= 1000 , V \u0026lt;= 1000 )representing the number of bones and the volume of his bag. And the second line contain N integers representing the value of each bone. The third line contain N integers representing the volume of each bone.\n输出 One integer per line representing the maximum of the total value (this number will be less than 2^31).\n样例输入 11 25 10 31 2 3 4 5 45 4 3 2 1 样例输出 114 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e3+5; 5 6int T, n, m; 7int c[N], w[N]; 8int dp[N]; 9 10int main(void) { 11 scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 12 while(T--) { 13 scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;n, \u0026amp;m); 14 for(int i=0; i\u0026lt;n; i++) { 15 scanf(\u0026#34;%d\u0026#34;, \u0026amp;w[i]); 16 } 17 for(int i=0; i\u0026lt;n; i++) { 18 scanf(\u0026#34;%d\u0026#34;, \u0026amp;c[i]); 19 } 20 memset(dp, 0, sizeof(dp)); 21 for(int i=0; i\u0026lt;n; i++) { 22 for(int j=m; j\u0026gt;=c[i]; j--) { 23 dp[j] = max(dp[j], dp[j-c[i]]+w[i]); 24 } 25 } 26 printf(\u0026#34;%d\\n\u0026#34;, dp[m]); 27 } 28 return 0; 29} ","permalink":"https://blog.lordash.de/posts/solution/hdu-2602-bone-collector/","summary":"Bone Collector (HDU - 2602) 题面 Many years ago , in Teddy’s hometown there was a man who was called “Bone Collector”. This man like to collect varies of bones , such as dog’s , cow’s , also he went to","title":"HDU-2602 Bone Collector"},{"content":"Robberies (HDU - 2955) 题面 The aspiring Roy the Robber has seen a lot of American movies, and knows that the bad guys usually gets caught in the end, often because they become too greedy. He has decided to work in the lucrative business of bank robbery only for a short while, before retiring to a comfortable job at a university.\nFor a few months now, Roy has been assessing the security of various banks and the amount of cash they hold. He wants to make a calculated risk, and grab as much money as possible.\nHis mother, Ola, has decided upon a tolerable probability of getting caught. She feels that he is safe enough if the banks he robs together give a probability less than this.\n输入 The first line of input gives T, the number of cases. For each scenario, the first line of input gives a floating point number P, the probability Roy needs to be below, and an integer N, the number of banks he has plans for. Then follow N lines, where line j gives an integer Mj and a floating point number Pj . Bank j contains Mj millions, and the probability of getting caught from robbing it is Pj .\n输出 For each test case, output a line with the maximum number of millions he can expect to get while the probability of getting caught is less than the limit set.\nNotes and Constraints 0 \u0026lt; T \u0026lt;= 100 0.0 \u0026lt;= P \u0026lt;= 1.0 0 \u0026lt; N \u0026lt;= 100 0 \u0026lt; Mj \u0026lt;= 100 0.0 \u0026lt;= Pj \u0026lt;= 1.0 A bank goes bankrupt if it is robbed, and you may assume that all probabilities are independent as the police have very low funds.\n样例输入 13 20.04 3 31 0.02 42 0.03 53 0.05 60.06 3 72 0.03 82 0.03 93 0.05 100.10 3 111 0.03 122 0.02 133 0.05 样例输出 12 24 36 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e2+5; 5 6double m, w[N]; 7int T, n, c[N]; 8 9double dp[N*N]; 10 11int main(void) { 12 scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 13 while(T--) { 14 scanf(\u0026#34;%lf%d\u0026#34;, \u0026amp;m, \u0026amp;n); 15 int sum=0; 16 for(int i=0; i\u0026lt;n; i++) { 17 scanf(\u0026#34;%d%lf\u0026#34;, \u0026amp;c[i], \u0026amp;w[i]); 18 sum += c[i]; 19 } 20 memset(dp, 0, sizeof(dp)); 21 dp[0] = 1; 22 for(int i=0; i\u0026lt;n; i++) { 23 for(int j=sum; j\u0026gt;=c[i]; j--) { 24 dp[j] = max(dp[j], dp[j-c[i]]*(1.0-w[i])); 25 } 26 } 27 int ans; 28 for(ans=sum; dp[ans]\u0026lt;=1-m; ans--); 29 printf(\u0026#34;%d\\n\u0026#34;, ans); 30 } 31 return 0; 32} ","permalink":"https://blog.lordash.de/posts/solution/hdu-2955-robberies/","summary":"Robberies (HDU - 2955) 题面 The aspiring Roy the Robber has seen a lot of American movies, and knows that the bad guys usually gets caught in the end, often because they become too greedy. He has decided to work in the lucrative business of bank robbery only for a short while, before retiring to a comfortable job at a university. For a few months now, Roy has been","title":"HDU-2955 Robberies"},{"content":"悼念512汶川大地震遇难同胞——珍惜现在，感恩生活 (HDU - 2191) 题面 急！灾区的食物依然短缺！ 为了挽救灾区同胞的生命，心系灾区同胞的你准备自己采购一些粮食支援灾区，现在假设你一共有资金n元，而市场有m种大米，每种大米都是袋装产品，其价格不等，并且只能整袋购买。 请问：你用有限的资金最多能采购多少公斤粮食呢？\n输入 输入数据首先包含一个正整数C，表示有C组测试用例，每组测试用例的第一行是两个整数n和m(1\u0026lt;=n\u0026lt;=100, 1\u0026lt;=m\u0026lt;=100),分别表示经费的金额和大米的种类，然后是m行数据，每行包含3个数p，h和c(1\u0026lt;=p\u0026lt;=20,1\u0026lt;=h\u0026lt;=200,1\u0026lt;=c\u0026lt;=20)，分别表示每袋的价格、每袋的重量以及对应种类大米的袋数。\n输出 对于每组测试数据，请输出能够购买大米的最多重量，你可以假设经费买不光所有的大米，并且经费你可以不用完。每个实例的输出占一行。\n样例输入 11 28 2 32 100 4 44 100 2 样例输出 1400 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e2+5; 5 6int w, c, num; 7int T, n, m; 8 9int dp[N], q[N], k[N]; 10 11int main(void) { 12 scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 13 while(T--) { 14 memset(dp, 0, sizeof(dp)); 15 memset(q, 0, sizeof(q)); 16 memset(k, 0, sizeof(k)); 17 scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;m, \u0026amp;n); 18 19 for(int i=0; i\u0026lt;n; i++) { 20 scanf(\u0026#34;%d%d%d\u0026#34;, \u0026amp;c, \u0026amp;w, \u0026amp;num); 21 22 for(int b=0; b\u0026lt;c; b++) { 23 int head=0, tail=-1; 24 for(int j=0; j*c+b\u0026lt;=m; j++) { 25 int tmp = dp[j*c+b]-j*w; 26 while(head\u0026lt;=tail \u0026amp;\u0026amp; q[tail]\u0026lt;=tmp) 27 tail--; 28 k[++tail] = j; 29 q[tail] = tmp; 30 dp[j*c+b] = q[head]+j*w; 31 if(k[head]==j-num) 32 head++; 33 } 34 } 35 } 36 printf(\u0026#34;%d\\n\u0026#34;, dp[m]); 37 } 38 39 return 0; 40} ","permalink":"https://blog.lordash.de/posts/solution/hdu-2191-%E6%82%BC%E5%BF%B5512/","summary":"悼念512汶川大地震遇难同胞——珍惜现在，感恩生活 (HDU - 2191) 题面 急！灾区的食物依然短缺！ 为了挽救灾区同胞的生命，心系灾区同胞的你准备自己采购一些","title":"HDU-2191 悼念512"},{"content":"Big Event in HDU (HDU - 1171) 题面 Nowadays, we all know that Computer College is the biggest department in HDU. But, maybe you don\u0026rsquo;t know that Computer College had ever been split into Computer College and Software College in 2002. The splitting is absolutely a big event in HDU! At the same time, it is a trouble thing too. All facilities must go halves. First, all facilities are assessed, and two facilities are thought to be same if they have the same value. It is assumed that there is N (0\u0026lt;N\u0026lt;1000) kinds of facilities (different value, different kinds).\n输入 Input contains multiple test cases. Each test case starts with a number N (0 \u0026lt; N \u0026lt;= 50 \u0026ndash; the total number of different facilities). The next N lines contain an integer V (0\u0026lt;V\u0026lt;=50 \u0026ndash;value of facility) and an integer M (0\u0026lt;M\u0026lt;=100 \u0026ndash;corresponding number of the facilities) each. You can assume that all V are different. A test case starting with a negative integer terminates input and this test case is not to be processed.\n输出 For each case, print one line containing two integers A and B which denote the value of Computer College and Software College will get respectively. A and B should be as equal as possible. At the same time, you should guarantee that A is not less than B.\n样例输入 12 210 1 320 1 43 510 1 620 2 730 1 8-1 样例输出 120 10 240 40 提示 无\n思路 01背包\n代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e3+5; 5 6int w[5000+5]; 7int n; 8 9int dp[250000+5]; 10 11int main(void) { 12 while(scanf(\u0026#34;%d\u0026#34;, \u0026amp;n)==1 \u0026amp;\u0026amp; n\u0026gt;0) { 13 memset(dp, 0, sizeof(dp)); 14 int sum=0, tot=0, val, num; 15 for(int i=0; i\u0026lt;n; i++) { 16 scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;val, \u0026amp;num); 17 while(num--){ 18 w[tot++] = val; 19 sum += val; 20 } 21 } 22 23 for(int i=0; i\u0026lt;tot; i++) { 24 for(int j=sum/2; j\u0026gt;=w[i]; j--) { 25 dp[j] = max(dp[j], dp[j-w[i]]+w[i]); 26 } 27 } 28 printf(\u0026#34;%d %d\\n\u0026#34;, sum-dp[sum/2], dp[sum/2]); 29 } 30 31 return 0; 32} ","permalink":"https://blog.lordash.de/posts/solution/hdu-1171-big-event-in-hdu/","summary":"Big Event in HDU (HDU - 1171) 题面 Nowadays, we all know that Computer College is the biggest department in HDU. But, maybe you don\u0026rsquo;t know that Computer College had ever been split into Computer College and Software College in 2002. The splitting is absolutely a big event in HDU! At the same time, it is a trouble thing too. All facilities must go halves. First, all facilities are","title":"HDU-1171 Big Event in HDU"},{"content":"饭卡 (HDU - 2546) 题面 电子科大本部食堂的饭卡有一种很诡异的设计，即在购买之前判断余额。如果购买一个商品之前，卡上的剩余金额大于或等于5元，就一定可以购买成功（即使购买后卡上余额为负），否则无法购买（即使金额足够）。所以大家都希望尽量使卡上的余额最少。 某天，食堂中有n种菜出售，每种菜可购买一次。已知每种菜的价格以及卡上的余额，问最少可使卡上的余额为多少。\n输入 多组数据。对于每组数据： 第一行为正整数n，表示菜的数量。n\u0026lt;=1000。 第二行包括n个正整数，表示每种菜的价格。价格不超过50。 第三行包括一个正整数m，表示卡上的余额。m\u0026lt;=1000。\nn=0表示数据结束。\n输出 对于每组输入,输出一行,包含一个整数，表示卡上可能的最小余额。\n样例输入 11 250 35 410 51 2 3 2 1 1 2 3 2 1 650 70 样例输出 1-45 232 提示 无\n思路 代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e3+5; 5 6int w[N]; 7int n, m; 8 9int dp[N]; 10 11int main(void) { 12 while(scanf(\u0026#34;%d\u0026#34;, \u0026amp;n)==1 \u0026amp;\u0026amp; n) { 13 memset(dp, 0, sizeof(dp)); 14 for(int i=0; i\u0026lt;n; i++) { 15 scanf(\u0026#34;%d\u0026#34;, \u0026amp;w[i]); 16 } 17 sort(w, w+n); 18 scanf(\u0026#34;%d\u0026#34;, \u0026amp;m); 19 20 if(m\u0026lt;5){ 21 printf(\u0026#34;%d\\n\u0026#34;, m); 22 continue; 23 } 24 25 for(int i=0; i\u0026lt;n-1; i++) { 26 for(int j=m-5; j\u0026gt;=w[i]; j--) { 27 dp[j] = max(dp[j], dp[j-w[i]]+w[i]); 28 } 29 } 30 printf(\u0026#34;%d\\n\u0026#34;, m-dp[m-5]-w[n-1]); 31 } 32 33 return 0; 34} ","permalink":"https://blog.lordash.de/posts/solution/hdu-2546-%E9%A5%AD%E5%8D%A1/","summary":"饭卡 (HDU - 2546) 题面 电子科大本部食堂的饭卡有一种很诡异的设计，即在购买之前判断余额。如果购买一个商品之前，卡上的剩余金额大于或等于5元，就一定可以","title":"HDU-2546 饭卡"},{"content":"Eight II （HDU - 3567) 题面 Eight-puzzle, which is also called \u0026ldquo;Nine grids\u0026rdquo;, comes from an old game.\nIn this game, you are given a 3 by 3 board and 8 tiles. The tiles are numbered from 1 to 8 and each covers a grid. As you see, there is a blank grid which can be represented as an \u0026lsquo;X\u0026rsquo;. Tiles in grids having a common edge with the blank grid can be moved into that blank grid. This operation leads to an exchange of \u0026lsquo;X\u0026rsquo; with one tile.\nWe use the symbol \u0026lsquo;r\u0026rsquo; to represent exchanging \u0026lsquo;X\u0026rsquo; with the tile on its right side, and \u0026rsquo;l\u0026rsquo; for the left side, \u0026lsquo;u\u0026rsquo; for the one above it, \u0026rsquo;d\u0026rsquo; for the one below it.\nA state of the board can be represented by a string S using the rule showed below.\nThe problem is to operate an operation list of \u0026lsquo;r\u0026rsquo;, \u0026lsquo;u\u0026rsquo;, \u0026rsquo;l\u0026rsquo;, \u0026rsquo;d\u0026rsquo; to turn the state of the board from state A to state B. You are required to find the result which meets the following constrains: \\1. It is of minimum length among all possible solutions. \\2. It is the lexicographically smallest one of all solutions of minimum length.\n输入 The first line is T (T \u0026lt;= 200), which means the number of test cases of this problem.\nThe input of each test case consists of two lines with state A occupying the first line and state B on the second line. It is guaranteed that there is an available solution from state A to B.\n输出 For each test case two lines are expected.\nThe first line is in the format of \u0026ldquo;Case x: d\u0026rdquo;, in which x is the case number counted from one, d is the minimum length of operation list you need to turn A to B. S is the operation list meeting the constraints and it should be showed on the second line.\n样例输入 12 212X453786 312345678X 4564178X23 57568X4123 样例输出 1Case 1: 2 2dd 3Case 2: 8 4urrulldr 提示 无\n思路 思考一下，\u0026lsquo;X’在9个不同位置的目标状态可以反推所有情况。这时我们只需要简单映射一下：\n564178X23→123456X78\n7568X4123→5126X3478\n大致思路就很明确了。继续思考字典序的问题，由于推导顺序和题目要求一致，则不需要和Eight(HDU - 1043)一般将方向颠倒，只用按字典序(dlru)排就行 注意参考代码中最后的路径是由pre数组链接的，直接倒推回去恰好和我们需要的相反，所以存入串中再逆序输出。而初始状态的方向被随意的存了一个1(vis数组)，所以在数量上和最后输出中都要-1 用了康拓展开，感觉再用上逆展开太耗时了，没想到好的方法，就在结构体里面丢了一个数组。尽管本题时间和空间限制范围都挺大。以后还得好好深入一下八数码八境界\n代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 4e5+5; 5 6int vis[9][N], pre[9][N]; 7int T, n = 9; 8int fac[] = {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880}; 9 10int dx[] = { 1, 0, 0, -1}; 11int dy[] = { 0, -1, 1, 0}; 12char dir[] = \u0026#34;dlru\u0026#34;; 13 14int s[][9] = { 15 {9, 1, 2, 3, 4, 5, 6, 7, 8}, 16 {1, 9, 2, 3, 4, 5, 6, 7, 8}, 17 {1, 2, 9, 3, 4, 5, 6, 7, 8}, 18 {1, 2, 3, 9, 4, 5, 6, 7, 8}, 19 {1, 2, 3, 4, 9, 5, 6, 7, 8}, 20 {1, 2, 3, 4, 5, 9, 6, 7, 8}, 21 {1, 2, 3, 4, 5, 6, 9, 7, 8}, 22 {1, 2, 3, 4, 5, 6, 7, 9, 8}, 23 {1, 2, 3, 4, 5, 6, 7, 8, 9} 24}; 25 26struct P { 27 int a[10]; 28 int h, x; 29}; 30 31int cantor(int *s) { 32 int sum = 0; 33 for(int i=0; i\u0026lt;n; i++) { 34 int num = 0; 35 for(int j=i+1; j\u0026lt;n; j++) { 36 if(s[j]\u0026lt;s[i]) 37 num++; 38 } 39 sum += num*fac[n-i-1]; 40 } 41 return sum; 42} 43 44void decantor(int sum, int *t) { 45 int vis[10] = {0}; 46 for(int i=0; i\u0026lt;n; i++) { 47 int tmp = sum/fac[n-i-1]; 48 for(int j=0; j\u0026lt;=tmp; j++) { 49 if(vis[j]) 50 tmp++; 51 } 52 t[i] = tmp+1; 53 vis[tmp] = 1; 54 sum %= fac[n-i-1]; 55 } 56} 57 58void bfs(int k) { 59 P sp; 60 for(int i=0; i\u0026lt;n; i++) { 61 sp.a[i] = s[k][i]; 62 } 63 sp.h = cantor(sp.a); 64 sp.x = k; 65 66 queue\u0026lt;P\u0026gt; q; 67 q.push(sp); 68 vis[k][sp.h] = 1; 69 70 while(!q.empty()) { 71 P tp = q.front(); 72 q.pop(); 73 74 P np; 75 for(int i=0; i\u0026lt;4; i++) { 76 int x = tp.x/3+dx[i]; 77 int y = tp.x%3+dy[i]; 78 if(x\u0026lt;0 || x\u0026gt;=3 || y\u0026lt;0 || y\u0026gt;=3) { 79 continue; 80 } 81 np = tp; 82 np.x = x*3+y; 83 84 swap(np.a[np.x], np.a[tp.x]); 85 np.h = cantor(np.a); 86 87 if(vis[k][np.h]==-1) { 88 q.push(np); 89 vis[k][np.h] = i; 90 pre[k][np.h] = tp.h; 91 }; 92 } 93 } 94} 95 96int main(void) { 97 memset(vis, -1, sizeof(vis)); 98 memset(pre, -1, sizeof(pre)); 99 for(int i=0; i\u0026lt;n; i++) 100 bfs(i); 101 102 scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 103 for(int cs=1; cs\u0026lt;=T; cs++) { 104 char str[10]; 105 int k, num[10], t[10]; 106 107 scanf(\u0026#34;%s\u0026#34;, str); 108 for(int i=0, j=1; i\u0026lt;n; i++) { 109 if(str[i]==\u0026#39;X\u0026#39;) 110 k = i; 111 else 112 num[str[i]-\u0026#39;0\u0026#39;] = j++; 113 } 114 115 scanf(\u0026#34;%s\u0026#34;, str); 116 for(int i=0; i\u0026lt;n; i++) { 117 if(str[i]==\u0026#39;X\u0026#39;) 118 t[i] = 9; 119 else 120 t[i] = num[str[i]-\u0026#39;0\u0026#39;]; 121 } 122 int h = cantor(t); 123 124 string path = \u0026#34;\u0026#34;; 125 while(h!=-1) { 126 path += dir[vis[k][h]]; 127 h = pre[k][h]; 128 } 129 printf(\u0026#34;Case %d: %d\\n\u0026#34;, cs, path.length()-1); 130 131 for(int i=path.length()-2; i\u0026gt;=0; i--) 132 printf(\u0026#34;%c\u0026#34;, path[i]); 133 printf(\u0026#34;\\n\u0026#34;); 134 } 135 136 return 0; 137} ","permalink":"https://blog.lordash.de/posts/solution/hdu-3567-eight-ii/","summary":"Eight II （HDU - 3567) 题面 Eight-puzzle, which is also called \u0026ldquo;Nine grids\u0026rdquo;, comes from an old game. In this game, you are given a 3 by 3 board and 8 tiles. The tiles are numbered from 1 to 8 and each covers a grid. As you see, there is a blank grid which can be represented as an \u0026lsquo;X\u0026rsquo;. Tiles in grids having a common","title":"HDU-3567 Eight II"},{"content":"Eight (HDU - 1043) 题面 The 15-puzzle has been around for over 100 years; even if you don\u0026rsquo;t know it by that name, you\u0026rsquo;ve seen it. It is constructed with 15 sliding tiles, each with a number from 1 to 15 on it, and all packed into a 4 by 4 frame with one tile missing. Let\u0026rsquo;s call the missing tile \u0026lsquo;x\u0026rsquo;; the object of the puzzle is to arrange the tiles so that they are ordered as:\n1 1 2 3 4 2 5 6 7 8 3 9 10 11 12 413 14 15 x where the only legal operation is to exchange \u0026lsquo;x\u0026rsquo; with one of the tiles with which it shares an edge. As an example, the following sequence of moves solves a slightly scrambled puzzle:\n1 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 2 5 6 7 8 5 6 7 8 5 6 7 8 5 6 7 8 3 9 x 10 12 9 10 x 12 9 10 11 12 9 10 11 12 413 14 11 15 13 14 11 15 13 14 x 15 13 14 15 x 5 r-\u0026gt; d-\u0026gt; r-\u0026gt; The letters in the previous row indicate which neighbor of the \u0026lsquo;x\u0026rsquo; tile is swapped with the \u0026lsquo;x\u0026rsquo; tile at each step; legal values are \u0026lsquo;r\u0026rsquo;,\u0026rsquo;l\u0026rsquo;,\u0026lsquo;u\u0026rsquo; and \u0026rsquo;d\u0026rsquo;, for right, left, up, and down, respectively.\nNot all puzzles can be solved; in 1870, a man named Sam Loyd was famous for distributing an unsolvable version of the puzzle, and frustrating many people. In fact, all you have to do to make a regular puzzle into an unsolvable one is to swap two tiles (not counting the missing \u0026lsquo;x\u0026rsquo; tile, of course).\nIn this problem, you will write a program for solving the less well-known 8-puzzle, composed of tiles on a three by three arrangement.\n输入 You will receive, several descriptions of configuration of the 8 puzzle. One description is just a list of the tiles in their initial positions, with the rows listed from top to bottom, and the tiles listed from left to right within a row, where the tiles are represented by numbers 1 to 8, plus \u0026lsquo;x\u0026rsquo;. For example, this puzzle\n1 2 3 x 4 6 7 5 8\nis described by this list:\n1 2 3 x 4 6 7 5 8\n输出 You will print to standard output either the word ``unsolvable\u0026rsquo;\u0026rsquo;, if the puzzle has no solution, or a string consisting entirely of the letters \u0026lsquo;r\u0026rsquo;, \u0026rsquo;l\u0026rsquo;, \u0026lsquo;u\u0026rsquo; and \u0026rsquo;d\u0026rsquo; that describes a series of moves that produce a solution. The string should include no spaces and start at the beginning of the line. Do not print a blank line between cases.\n样例输入 12 3 4 1 5 x 7 6 8 样例输出 1ullddrurdllurdruldr 提示 无\n思路 考虑多次bfs会TLE，而目标状态是确定的，且由此bfs出的所有状态也是有限的(9!)，所以这题不是bfs直接搜出来的，而是bfs打表。 暂时没用康拓展开，不过最好去看看，同时感兴趣的圣雄甘地可以了解一下八数码八境界…\n代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e2+5; 5 6int n = 9; 7 8int dx[] = { 1, -1, 0, 0}; 9int dy[] = { 0, 0, 1, -1}; 10char dir[] = \u0026#34;udlr\u0026#34;; 11 12struct P { 13 string s, p; 14 int x; 15}; 16 17map\u0026lt;int, string\u0026gt; mp; 18 19void bfs() { 20 P sp; 21 sp.s = \u0026#34;123456789\u0026#34;; 22 sp.p = \u0026#34;\u0026#34;; 23 sp.x = n-1; 24 25 queue\u0026lt;P\u0026gt; q; 26 q.push(sp); 27 mp[123456789] = \u0026#34;\u0026#34;; 28 29 while(!q.empty()) { 30 P tp = q.front(); 31 q.pop(); 32 33 P np; 34 for(int i=0; i\u0026lt;4; i++) { 35 int x = tp.x/3+dx[i]; 36 int y = tp.x%3+dy[i]; 37 if(x\u0026lt;0 || x\u0026gt;=3 || y\u0026lt;0 || y\u0026gt;=3) { 38 continue; 39 } 40 np = tp; 41 np.x = x*3+y; 42 swap(np.s[np.x], np.s[tp.x]); 43 44 int d=0; 45 for(int i=0; i\u0026lt;n; i++) { 46 d = d*10+np.s[i]-\u0026#39;0\u0026#39;; 47 } 48 49 if(mp.find(d)==mp.end()) { 50 np.p += i+\u0026#39;0\u0026#39;; 51 q.push(np); 52 mp[d] = np.p; 53 }; 54 } 55 } 56} 57 58int main(void) { 59 bfs(); 60 61 char c; 62 while(scanf(\u0026#34; %c\u0026#34;, \u0026amp;c)==1) { 63 int d; 64 if(c==\u0026#39;x\u0026#39;) { 65 d = 9; 66 } else { 67 d = c-\u0026#39;0\u0026#39;; 68 } 69 for(int i=1; i\u0026lt;n; i++) { 70 scanf(\u0026#34; %c\u0026#34;, \u0026amp;c); 71 if(c==\u0026#39;x\u0026#39;) { 72 d = d*10+9; 73 } else { 74 d = d*10+c-\u0026#39;0\u0026#39;; 75 } 76 } 77 if(mp.find(d)==mp.end()) { 78 printf(\u0026#34;unsolvable\\n\u0026#34;); 79 } else { 80 string p = mp[d]; 81 for(int i=p.length()-1; i\u0026gt;=0; i--) 82 printf(\u0026#34;%c\u0026#34;, dir[p[i]-\u0026#39;0\u0026#39;]); 83 printf(\u0026#34;\\n\u0026#34;); 84 } 85 } 86 87 return 0; 88} ","permalink":"https://blog.lordash.de/posts/solution/hdu-1043-eight/","summary":"Eight (HDU - 1043) 题面 The 15-puzzle has been around for over 100 years; even if you don\u0026rsquo;t know it by that name, you\u0026rsquo;ve seen it. It is constructed with 15 sliding tiles, each with a number from 1 to 15 on it, and all packed into a 4 by 4 frame with one tile missing. Let\u0026rsquo;s call the missing tile \u0026lsquo;x\u0026rsquo;; the object of the puzzle is to","title":"HDU-1043 Eight"},{"content":"更好的目录链接：https://vjudge.net/article/187 快去全绿吧\n[kuangbin带你飞]专题一 简单搜索\n[kuangbin带你飞]专题二 搜索进阶\n[kuangbin带你飞]专题三 Dancing Links\n[kuangbin带你飞]专题四 最短路练习\n[kuangbin带你飞]专题五 并查集\n[kuangbin带你飞]专题六 最小生成树\n[kuangbin带你飞]专题七 线段树\n[kuangbin带你飞]专题八 生成树\n[kuangbin带你飞]专题九 连通图\n[kuangbin带你飞]专题十 匹配问题\n[kuangbin带你飞]专题十一 网络流\n[kuangbin带你飞]专题十二 基础DP1\n[kuangbin带你飞]专题十三 基础计算几何\n[kuangbin带你飞]专题十四 数论基础\n[kuangbin带你飞]专题十五 数位DP\n[kuangbin带你飞]专题十六 KMP \u0026amp; 扩展KMP \u0026amp; Manacher\n[kuangbin带你飞]专题十七 AC自动机\n[kuangbin带你飞]专题十八 后缀数组\n[kuangbin带你飞]专题十九 矩阵\n[kuangbin带你飞]专题二十 斜率DP\n[kuangbin带你飞]专题二十一 概率\u0026amp;期望\n[kuangbin带你飞]专题二十二 区间DP\n[kuangbin带你飞]专题二十三 计算几何之半平面交\n","permalink":"https://blog.lordash.de/posts/share/ffceaab471b9abf4/","summary":"更好的目录链接：https://vjudge.net/article/187 快去全绿吧 [kuangbin带你飞]专题一 简单搜索 [kuangb","title":"kuangbin带你飞专题目录链接"},{"content":"Find a way (HDU - 2612) 题面 Pass a year learning in Hangzhou, yifenfei arrival hometown Ningbo at finally. Leave Ningbo one year, yifenfei have many people to meet. Especially a good friend Merceki. Yifenfei’s home is at the countryside, but Merceki’s home is in the center of city. So yifenfei made arrangements with Merceki to meet at a KFC. There are many KFC in Ningbo, they want to choose one that let the total time to it be most smallest. Now give you a Ningbo map, Both yifenfei and Merceki can move up, down ,left, right to the adjacent road by cost 11 minutes.\n输入 The input contains multiple test cases. Each test case include, first two integers n, m. (2\u0026lt;=n,m\u0026lt;=200). Next n lines, each line included m character. ‘Y’ express yifenfei initial position. ‘M’ express Merceki initial position. ‘#’ forbid road; ‘.’ Road. ‘@’ KCF\n输出 For each test case output the minimum total time that both yifenfei and Merceki to arrival one of KFC.You may sure there is always have a KFC that can let them meet.\n样例输入 14 4 2Y.#@ 3.... 4.#.. 5@..M 64 4 7Y.#@ 8.... 9.#.. 10@#.M 115 5 12Y..@. 13.#... 14.#... 15@..M. 16#...# 样例输出 166 288 366 提示 无\n思路 跑两遍bfs记录Y和M到达kfc的时间并求和，再遍历总时间寻找最短的。注意有的kfc可能无法到达，时间初始化应为inf\n代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e3+5; 5 6char b[N][N] = {{0}}; 7bool vis[N][N] = {{0}}; 8int t[N][N] = {{0}}; 9int n, m; 10 11int dx[] = { 1, -1, 0, 0}; 12int dy[] = { 0, 0, 1, -1}; 13 14struct P { 15 int x, y; 16 int step; 17}; 18 19void bfs(int x, int y) { 20 memset(vis, 0, sizeof(vis)); 21 22 P sp; 23 sp.x = x; 24 sp.y = y; 25 sp.step = 0; 26 27 queue\u0026lt;P\u0026gt; q; 28 q.push(sp); 29 vis[sp.x][sp.y] = 1; 30 31 while(!q.empty()) { 32 P tp = q.front(); 33 q.pop(); 34 35 P np = tp; 36 for(int i=0; i\u0026lt;4; i++) { 37 int x = np.x = tp.x+dx[i]; 38 int y = np.y = tp.y+dy[i]; 39 40 if(x\u0026lt;0 || x\u0026gt;=n || y\u0026lt;0 || y\u0026gt;=m) { 41 continue; 42 } 43 44 if(!vis[x][y] \u0026amp;\u0026amp; b[x][y]!=\u0026#39;#\u0026#39;) { 45 np.step = tp.step+1; 46 q.push(np); 47 vis[x][y] = 1; 48 if(t[x][y]==inf) 49 t[x][y] = np.step; 50 else 51 t[x][y] += np.step; 52 } 53 } 54 } 55} 56 57int main(void) { 58 while(scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;n, \u0026amp;m)==2) { 59 memset(t, inf, sizeof(t)); 60 for(int i=0; i\u0026lt;n; i++) { 61 for(int j=0; j\u0026lt;m; j++) { 62 scanf(\u0026#34; %c\u0026#34;, \u0026amp;b[i][j]); 63 } 64 } 65 for(int i=0; i\u0026lt;n; i++) { 66 for(int j=0; j\u0026lt;m; j++) { 67 if(b[i][j]==\u0026#39;Y\u0026#39; || b[i][j]==\u0026#39;M\u0026#39;) { 68 bfs(i, j); 69 } 70 } 71 } 72 int mi = inf; 73 for(int i=0; i\u0026lt;n; i++) { 74 for(int j=0; j\u0026lt;m; j++) { 75 if(b[i][j]==\u0026#39;@\u0026#39;) 76 mi = min(mi, t[i][j]); 77 } 78 } 79 printf(\u0026#34;%d\\n\u0026#34;, mi*11); 80 } 81 return 0; 82} ","permalink":"https://blog.lordash.de/posts/solution/hdu-2612-find-a-way/","summary":"Find a way (HDU - 2612) 题面 Pass a year learning in Hangzhou, yifenfei arrival hometown Ningbo at finally. Leave Ningbo one year, yifenfei have many people to meet. Especially a good friend Merceki. Yifenfei’s home is at the countryside, but Merceki’s home is in the center of city. So yifenfei made","title":"HDU-2612 Find a way"},{"content":"非常可乐 (HDU - 1495) 题面 大家一定觉的运动以后喝可乐是一件很惬意的事情，但是seeyou却不这么认为。因为每次当seeyou买了可乐以后，阿牛就要求和seeyou一起分享这一瓶可乐，而且一定要喝的和seeyou一样多。但seeyou的手中只有两个杯子，它们的容量分别是N 毫升和M 毫升 可乐的体积为S （S\u0026lt;101）毫升　(正好装满一瓶) ，它们三个之间可以相互倒可乐 (都是没有刻度的，且 S==N+M，101＞S＞0，N＞0，M＞0) 。聪明的ACMER你们说他们能平分吗？如果能请输出倒可乐的最少的次数，如果不能输出\u0026quot;NO\u0026quot;。\n输入 三个整数 : S 可乐的体积 , N 和 M是两个杯子的容量，以\u0026quot;0 0 0\u0026quot;结束。\n输出 如果能平分的话请输出最少要倒的次数，否则输出\u0026quot;NO\u0026quot;。\n样例输入 17 4 3 24 1 3 30 0 0 样例输出 1NO 23 提示 无\n思路 倒水问题，当S为奇数时无解。数论有简便解法\n代码 1using namespace std; 2 3#define out(a) (cout\u0026lt;\u0026lt;__LINE__\u0026lt;\u0026lt;\u0026#34; : \u0026#34;#a\u0026#34; = \u0026#34;\u0026lt;\u0026lt;(a)\u0026lt;\u0026lt;endl) 4typedef long long ll; 5const int inf = 0x3f3f3f3f; 6const int N = 1e2+5; 7 8bool vis[N][N][N] = {{{0}}}; 9int s, n, m, ans = 0; 10 11struct P { 12 int n, m, s; 13 int step; 14}; 15 16bool bfs() { 17 memset(vis, 0, sizeof(vis)); 18 19 P sp; 20 sp.s = s; 21 sp.n = 0; 22 sp.m = 0; 23 sp.step = 0; 24 25 queue\u0026lt;P\u0026gt; q; 26 q.push(sp); 27 vis[sp.s][sp.n][sp.m] = 1; 28 29 while(!q.empty()) { 30 P tp = q.front(); 31 q.pop(); 32 33 if((!tp.n\u0026amp;\u0026amp;tp.m==tp.s) || (!tp.m\u0026amp;\u0026amp;tp.n==tp.s) || (!tp.s\u0026amp;\u0026amp;tp.n==tp.m)) { 34 ans = tp.step; 35 return true; 36 } 37 P np = tp; 38 int t; 39 40 if(tp.n) { 41 t = tp.n+tp.m; 42 if(t\u0026gt;m) { 43 np.m = m; 44 } else { 45 np.m = t; 46 } 47 np.n = t-np.m; 48 np.s = tp.s; 49 50 if(!vis[np.s][np.n][np.m]) { 51 np.step = tp.step+1; 52 q.push(np); 53 vis[np.s][np.n][np.m] = 1; 54 } 55 56 t = tp.n+tp.s; 57 if(t\u0026gt;s) { 58 np.s = s; 59 } else { 60 np.s = t; 61 } 62 np.n = t-np.s; 63 np.m = tp.m; 64 65 if(!vis[np.s][np.n][np.m]) { 66 np.step = tp.step+1; 67 q.push(np); 68 vis[np.s][np.n][np.m] = 1; 69 } 70 } 71 72 if(tp.m) { 73 t = tp.m+tp.n; 74 if(t\u0026gt;n) { 75 np.n = n; 76 } else { 77 np.n = t; 78 } 79 np.m = t-np.n; 80 np.s = tp.s; 81 82 if(!vis[np.s][np.n][np.m]) { 83 np.step = tp.step+1; 84 q.push(np); 85 vis[np.s][np.n][np.m] = 1; 86 } 87 88 t = tp.m+tp.s; 89 if(t\u0026gt;s) { 90 np.s = s; 91 } else { 92 np.s = t; 93 } 94 np.m = t-np.s; 95 np.n = tp.n; 96 97 if(!vis[np.s][np.n][np.m]) { 98 np.step = tp.step+1; 99 q.push(np); 100 vis[np.s][np.n][np.m] = 1; 101 } 102 } 103 104 if(tp.s) { 105 t = tp.s+tp.n; 106 if(t\u0026gt;n) { 107 np.n = n; 108 } else { 109 np.n = t; 110 } 111 np.s = t-np.n; 112 np.m = tp.m; 113 114 if(!vis[np.s][np.n][np.m]) { 115 np.step = tp.step+1; 116 q.push(np); 117 vis[np.s][np.n][np.m] = 1; 118 } 119 120 t = tp.s+tp.m; 121 if(t\u0026gt;m) { 122 np.m = m; 123 } else { 124 np.m = t; 125 } 126 np.s = t-np.m; 127 np.n = tp.n; 128 129 if(!vis[np.s][np.n][np.m]) { 130 np.step = tp.step+1; 131 q.push(np); 132 vis[np.s][np.n][np.m] = 1; 133 } 134 } 135 } 136 return false; 137} 138 139int main(void) { 140 while(scanf(\u0026#34;%d%d%d\u0026#34;, \u0026amp;s, \u0026amp;n, \u0026amp;m)==3 \u0026amp;\u0026amp; s \u0026amp;\u0026amp; n \u0026amp;\u0026amp; m) { 141 if(s%2==0 \u0026amp;\u0026amp; bfs()) { 142 printf(\u0026#34;%d\\n\u0026#34;, ans); 143 } else { 144 printf(\u0026#34;NO\\n\u0026#34;); 145 } 146 } 147 return 0; 148} ","permalink":"https://blog.lordash.de/posts/solution/hdu-1495-%E9%9D%9E%E5%B8%B8%E5%8F%AF%E4%B9%90/","summary":"非常可乐 (HDU - 1495) 题面 大家一定觉的运动以后喝可乐是一件很惬意的事情，但是seeyou却不这么认为。因为每次当seeyou买了可乐以后，阿牛就要求","title":"HDU-1495 非常可乐"},{"content":"Oil Deposits (HDU - 1241) 题面 The GeoSurvComp geologic survey company is responsible for detecting underground oil deposits. GeoSurvComp works with one large rectangular region of land at a time, and creates a grid that divides the land into numerous square plots. It then analyzes each plot separately, using sensing equipment to determine whether or not the plot contains oil. A plot containing oil is called a pocket. If two pockets are adjacent, then they are part of the same oil deposit. Oil deposits can be quite large and may contain numerous pockets. Your job is to determine how many different oil deposits are contained in a grid.\n输入 The input file contains one or more grids. Each grid begins with a line containing m and n, the number of rows and columns in the grid, separated by a single space. If m = 0 it signals the end of the input; otherwise 1 \u0026lt;= m \u0026lt;= 100 and 1 \u0026lt;= n \u0026lt;= 100. Following this are m lines of n characters each (not counting the end-of-line characters). Each character corresponds to one plot, and is either \u0026lsquo;*\u0026rsquo;, representing the absence of oil, or \u0026lsquo;@\u0026rsquo;, representing an oil pocket.\n输出 For each grid, output the number of distinct oil deposits. Two different pockets are part of the same oil deposit if they are adjacent horizontally, vertically, or diagonally. An oil deposit will not contain more than 100 pockets.\n样例输入 11 1 2* 33 5 4*@*@* 5**@** 6*@*@* 71 8 8@@****@* 95 5 10****@ 11*@@*@ 12*@**@ 13@@@*@ 14@@**@ 150 0 样例输出 10 21 32 42 提示 无\n思路 bfs求连通块\n代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e2+5; 5 6char b[N][N] = {{0}}; 7bool vis[N][N] = {{0}}; 8int n, m, ans = 0; 9 10int dx[] = { 1, -1, 0, 0, 1, 1, -1, -1}; 11int dy[] = { 0, 0, 1, -1, 1, -1, 1, -1}; 12 13struct P { 14 int x, y; 15}; 16 17void bfs(int x, int y) { 18 P sp; 19 sp.x = x; 20 sp.y = y; 21 22 queue\u0026lt;P\u0026gt; q; 23 q.push(sp); 24 vis[sp.x][sp.y] = 1; 25 26 while(!q.empty()) { 27 P tp = q.front(); 28 q.pop(); 29 30 P np = tp; 31 for(int i=0; i\u0026lt;8; i++) { 32 int x = np.x = tp.x+dx[i]; 33 int y = np.y = tp.y+dy[i]; 34 35 if(x\u0026lt;0 || x\u0026gt;=n || y\u0026lt;0 || y\u0026gt;=m) { 36 continue; 37 } 38 39 if(!vis[x][y] \u0026amp;\u0026amp; b[x][y]==\u0026#39;@\u0026#39;) { 40 q.push(np); 41 vis[x][y] = 1; 42 } 43 } 44 } 45} 46 47int main(void) { 48 while(scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;n, \u0026amp;m)==2 \u0026amp;\u0026amp; n \u0026amp;\u0026amp; m) { 49 memset(vis, 0, sizeof(vis)); 50 ans = 0; 51 for(int i=0; i\u0026lt;n; i++) { 52 for(int j=0; j\u0026lt;m; j++) { 53 scanf(\u0026#34; %c\u0026#34;, \u0026amp;b[i][j]); 54 } 55 } 56 for(int i=0; i\u0026lt;n; i++) { 57 for(int j=0; j\u0026lt;m; j++) { 58 if(!vis[i][j] \u0026amp;\u0026amp; b[i][j]==\u0026#39;@\u0026#39;) { 59 bfs(i, j); 60 ans++; 61 } 62 } 63 } 64 printf(\u0026#34;%d\\n\u0026#34;, ans); 65 } 66 return 0; 67} ","permalink":"https://blog.lordash.de/posts/solution/hdu-1241-oil-deposits/","summary":"Oil Deposits (HDU - 1241) 题面 The GeoSurvComp geologic survey company is responsible for detecting underground oil deposits. GeoSurvComp works with one large rectangular region of land at a time, and creates a grid that divides the land into numerous square plots. It then analyzes each plot separately, using sensing equipment to determine whether or not the plot contains oil. A plot containing oil is called a pocket. If","title":"HDU-1241 Oil Deposits"},{"content":"迷宫问题 (POJ - 3984) 题面 定义一个二维数组：\n1int maze[5][5] = { 2 0, 1, 0, 0, 0, 3 0, 1, 0, 1, 0, 4 0, 0, 0, 0, 0, 5 0, 1, 1, 1, 0, 6 0, 0, 0, 1, 0, 7}; 它表示一个迷宫，其中的1表示墙壁，0表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的最短路线。\n输入 一个5 × 5的二维数组，表示一个迷宫。数据保证有唯一解。\n输出 左上角到右下角的最短路径，格式如样例所示。\n样例输入 10 1 0 0 0 20 1 0 1 0 30 0 0 0 0 40 1 1 1 0 50 0 0 1 0 样例输出 1(0, 0) 2(1, 0) 3(2, 0) 4(2, 1) 5(2, 2) 6(2, 3) 7(2, 4) 8(3, 4) 9(4, 4) 提示 无\n思路 bfs+路径输出，记录路径有多种方式。\n代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e1+5; 5 6int b[N][N] = {{0}}; 7bool vis[N][N] = {{0}}; 8int n, m; 9 10int dx[] = { 0, 1, -1, 0, 0}; 11int dy[] = { 0, 0, 0, 1, -1}; 12 13struct P { 14 int x, y; 15 int p[N]; 16 int step; 17}; 18 19P bfs() { 20 memset(vis, 0, sizeof(vis)); 21 22 P sp; 23 sp.x = 0; 24 sp.y = 0; 25 sp.step = 0; 26 memset(sp.p, 0, sizeof(sp.p)); 27 28 queue\u0026lt;P\u0026gt; q; 29 q.push(sp); 30 vis[sp.x][sp.y] = 1; 31 32 while(!q.empty()) { 33 P tp = q.front(); 34 q.pop(); 35 36 if(tp.x==n-1 \u0026amp;\u0026amp; tp.y==m-1) { 37 return tp; 38 } 39 40 P np = tp; 41 for(int i=1; i\u0026lt;=4; i++) { 42 int x = np.x = tp.x+dx[i]; 43 int y = np.y = tp.y+dy[i]; 44 45 if(!vis[x][y] \u0026amp;\u0026amp; b[x][y]==0) { 46 np.step = tp.step+1; 47 np.p[np.step] = i; 48 q.push(np); 49 vis[x][y] = 1; 50 } 51 } 52 } 53 return sp; 54} 55 56int main(void) { 57 n = m = 5; 58 for(int i=0; i\u0026lt;n; i++) { 59 for(int j=0; j\u0026lt;m; j++) { 60 scanf(\u0026#34;%d\u0026#34;, \u0026amp;b[i][j]); 61 } 62 } 63 P ans = bfs(); 64 if(ans.step) { 65 int x=0, y=0; 66 for(int i=0; i\u0026lt;=ans.step; i++) { 67 printf(\u0026#34;(%d, %d)\\n\u0026#34;, x+=dx[ans.p[i]], y+=dy[ans.p[i]]); 68 } 69 } 70 71 return 0; 72} ","permalink":"https://blog.lordash.de/posts/solution/poj-3984-%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/","summary":"迷宫问题 (POJ - 3984) 题面 定义一个二维数组： 1int maze[5][5] = { 2 0, 1, 0, 0, 0, 3 0, 1, 0, 1, 0, 4 0, 0, 0, 0, 0, 5 0, 1, 1, 1, 0, 6 0, 0, 0, 1, 0, 7}; 它表示一个迷宫，其中的1表示墙壁，","title":"POJ-3984 迷宫问题"},{"content":"Fire! (UVA - 11624) 题面 思路 先跑一次bfs求出火蔓延到每一格的时间，再以此为限制对人跑bfs求解，注意有多个起火点\n代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e3+5; 5 6char b[N][N] = {{0}}; 7bool vis[N][N] = {{0}}; 8int t[N][N] = {{0}}; 9int T, n, m, ans = 0; 10 11int dx[] = { 1, -1, 0, 0}; 12int dy[] = { 0, 0, 1, -1}; 13 14struct F { 15 int x, y; 16 int step; 17}; 18 19struct P { 20 int x, y; 21 int step; 22}; 23queue\u0026lt;F\u0026gt; f; 24 25void pre() { 26 memset(vis, 0, sizeof(vis)); 27 while(!f.empty()) { 28 F tf = f.front(); 29 f.pop(); 30 31 F nf = tf; 32 for(int i=0; i\u0026lt;4; i++) { 33 int x = nf.x = tf.x+dx[i]; 34 int y = nf.y = tf.y+dy[i]; 35 36 if(x\u0026lt;0 || x\u0026gt;=n || y\u0026lt;0 || y\u0026gt;=m) { 37 continue; 38 } 39 40 if(!vis[x][y] \u0026amp;\u0026amp; b[x][y]==\u0026#39;.\u0026#39;) { 41 nf.step = tf.step+1; 42 f.push(nf); 43 vis[x][y] = 1; 44 t[x][y] = nf.step; 45 } 46 } 47 } 48} 49 50bool bfs(int x, int y) { 51 memset(vis, 0, sizeof(vis)); 52 53 P sp; 54 sp.x = x; 55 sp.y = y; 56 sp.step = 0; 57 58 queue\u0026lt;P\u0026gt; q; 59 q.push(sp); 60 vis[x][y] = 1; 61 62 while(!q.empty()) { 63 P tp = q.front(); 64 q.pop(); 65 66 P np = tp; 67 for(int i=0; i\u0026lt;4; i++) { 68 int x = np.x = tp.x+dx[i]; 69 int y = np.y = tp.y+dy[i]; 70 71 if(x\u0026lt;0 || x\u0026gt;=n || y\u0026lt;0 || y\u0026gt;=m) { 72 ans = tp.step+1; 73 return true; 74 } 75 76 if(!vis[x][y] \u0026amp;\u0026amp; b[x][y]==\u0026#39;.\u0026#39; \u0026amp;\u0026amp; tp.step+1\u0026lt;t[x][y]) { 77 np.step = tp.step+1; 78 q.push(np); 79 vis[x][y] = 1; 80 } 81 } 82 } 83 return false; 84} 85 86int main(void) { 87 scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 88 for(int cs=1; cs\u0026lt;=T; cs++) { 89 memset(t, inf, sizeof(t)); 90 scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;n, \u0026amp;m); 91 int x, y; 92 for(int i=0; i\u0026lt;n; i++) { 93 for(int j=0; j\u0026lt;m; j++) { 94 scanf(\u0026#34; %c\u0026#34;, \u0026amp;b[i][j]); 95 if(b[i][j]==\u0026#39;F\u0026#39;) { 96 F sf; 97 sf.x = i; 98 sf.y = j; 99 sf.step = 0; 100 t[i][j] = 0; 101 f.push(sf); 102 } else if(b[i][j]==\u0026#39;J\u0026#39;) { 103 x = i; 104 y = j; 105 } 106 } 107 } 108 pre(); 109 if(bfs(x, y)) 110 printf(\u0026#34;%d\\n\u0026#34;, ans); 111 else 112 printf(\u0026#34;IMPOSSIBLE\\n\u0026#34;); 113 } 114 return 0; 115} ","permalink":"https://blog.lordash.de/posts/solution/uva-11624-fire/","summary":"Fire! (UVA - 11624) 题面 思路 先跑一次bfs求出火蔓延到每一格的时间，再以此为限制对人跑bfs求解，注意有多个起火点 代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e3+5;","title":"UVA-11624 Fire!"},{"content":"Fire Game (FZU - 2150) 题面 Fat brother and Maze are playing a kind of special (hentai) game on an N*M board (N rows, M columns). At the beginning, each grid of this board is consisting of grass or just empty and then they start to fire all the grass. Firstly they choose two grids which are consisting of grass and set fire. As we all know, the fire can spread among the grass. If the grid (x, y) is firing at time t, the grid which is adjacent to this grid will fire at time t+1 which refers to the grid (x+1, y), (x-1, y), (x, y+1), (x, y-1). This process ends when no new grid get fire. If then all the grid which are consisting of grass is get fired, Fat brother and Maze will stand in the middle of the grid and playing a MORE special (hentai) game. (Maybe it’s the OOXX game which decrypted in the last problem, who knows.)\nYou can assume that the grass in the board would never burn out and the empty grid would never get fire.\nNote that the two grids they choose can be the same.\n输入 The first line of the date is an integer T, which is the number of the text cases.\nThen T cases follow, each case contains two integers N and M indicate the size of the board. Then goes N line, each line with M character shows the board. “#” Indicates the grass. You can assume that there is at least one grid which is consisting of grass in the board.\n1 \u0026lt;= T \u0026lt;=100, 1 \u0026lt;= n \u0026lt;=10, 1 \u0026lt;= m \u0026lt;=10\n输出 For each case, output the case number first, if they can play the MORE special (hentai) game (fire all the grass), output the minimal time they need to wait after they set fire, otherwise just output -1. See the sample input and output for more details.\n样例输入 14 23 3 3.#. 4### 5.#. 63 3 7.#. 8#.# 9.#. 103 3 11... 12#.# 13... 143 3 15### 16..# 17#.# 样例输出 1Case 1: 1 2Case 2: -1 3Case 3: 0 4Case 4: 2 提示 无\n思路 暴力枚举两个起火点跑bfs，统计最小值，注意草的数量少于等于2时可以特判\n代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e2+5; 5 6char b[N][N] = {{0}}; 7bool vis[N][N] = {{0}}; 8int T, n, m; 9 10int dx[] = { 1, -1, 0, 0}; 11int dy[] = { 0, 0, 1, -1}; 12 13struct P { 14 int x, y; 15 int step; 16} p[N]; 17 18int bfs(P sp1, P sp2) { 19 memset(vis, 0, sizeof(vis)); 20 21 queue\u0026lt;P\u0026gt; q; 22 q.push(sp1); 23 q.push(sp2); 24 vis[sp1.x][sp1.y] = 1; 25 vis[sp2.x][sp2.y] = 1; 26 27 int t = 0; 28 29 while(!q.empty()) { 30 P tp = q.front(); 31 q.pop(); 32 33 t = max(t, tp.step); 34 P np = tp; 35 36 for(int i=0; i\u0026lt;4; i++) { 37 int x = np.x = tp.x+dx[i]; 38 int y = np.y = tp.y+dy[i]; 39 40 if(x\u0026lt;0 || x\u0026gt;=n || y\u0026lt;0 || y\u0026gt;=m) { 41 continue; 42 } 43 44 if(!vis[x][y] \u0026amp;\u0026amp; b[x][y]==\u0026#39;#\u0026#39;) { 45 np.step = tp.step+1; 46 q.push(np); 47 vis[x][y] = 1; 48 } 49 } 50 } 51 return t; 52} 53 54bool ok(int n, int m) { 55 for(int i=0; i\u0026lt;n; i++) { 56 for(int j=0; j\u0026lt;m; j++) { 57 if(!vis[i][j] \u0026amp;\u0026amp; b[i][j]==\u0026#39;#\u0026#39;) { 58 return 0; 59 } 60 } 61 } 62 return 1; 63} 64 65int main(void) { 66 67 scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 68 for(int cs=1; cs\u0026lt;=T; cs++) { 69 scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;n, \u0026amp;m); 70 int num = 0; 71 72 for(int i=0; i\u0026lt;n; i++) { 73 for(int j=0; j\u0026lt;m; j++) { 74 scanf(\u0026#34; %c\u0026#34;, \u0026amp;b[i][j]); 75 if(b[i][j]==\u0026#39;#\u0026#39;) { 76 p[num].x = i; 77 p[num].y = j; 78 p[num].step = 0; 79 num++; 80 } 81 } 82 } 83 printf(\u0026#34;Case %d: \u0026#34;, cs); 84 if(num\u0026lt;=2) { 85 printf(\u0026#34;0\\n\u0026#34;); 86 } else { 87 int mi = inf; 88 for(int i=0; i\u0026lt;num; i++) { 89 for(int j=i+1; j\u0026lt;num; j++) { 90 int t = bfs(p[i], p[j]); 91 if(ok(n, m)) 92 mi = min(mi, t); 93 } 94 } 95 if(mi==inf) 96 printf(\u0026#34;-1\\n\u0026#34;); 97 else 98 printf(\u0026#34;%d\\n\u0026#34;, mi); 99 } 100 } 101 102 return 0; 103} ","permalink":"https://blog.lordash.de/posts/solution/fzu-2150-fire-game/","summary":"Fire Game (FZU - 2150) 题面 Fat brother and Maze are playing a kind of special (hentai) game on an N*M board (N rows, M columns). At the beginning, each grid of this board is consisting of grass or just empty and then they start to fire all the grass. Firstly they choose two grids which are consisting of grass and set fire. As we all know, the fire","title":"FZU-2150 Fire Game"},{"content":"Pots (POJ - 3414) 题面 You are given two pots, having the volume of A and B liters respectively. The following operations can be performed:\nFILL(i) fill the pot i (1 ≤ i ≤ 2) from the tap; DROP(i) empty the pot i to the drain; POUR(i,j) pour from pot i to pot j; after this operation either the pot j is full (and there may be some water left in the pot i), or the pot i is empty (and all its contents have been moved to the pot j). Write a program to find the shortest possible sequence of these operations that will yield exactly C liters of water in one of the pots.\n输入 On the first and only line are the numbers A, B, and C. These are all integers in the range from 1 to 100 and C≤max(A,B).\n输出 The first line of the output must contain the length of the sequence of operations K. The following K lines must each describe one operation. If there are several sequences of minimal length, output any one of them. If the desired result can’t be achieved, the first and only line of the file must contain the word ‘impossible’.\n样例输入 13 5 4 样例输出 16 2FILL(2) 3POUR(2,1) 4DROP(1) 5POUR(2,1) 6FILL(2) 7POUR(2,1) 提示 无\n思路 倒水问题，bfs+路径输出\n代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e2+5; 5 6bool vis[N][N] = {{0}}; 7int A, B, C; 8 9const char* path[] = { 10 \u0026#34;FILL(1)\u0026#34;, 11 \u0026#34;FILL(2)\u0026#34;, 12 \u0026#34;DROP(1)\u0026#34;, 13 \u0026#34;DROP(2)\u0026#34;, 14 \u0026#34;POUR(1,2)\u0026#34;, 15 \u0026#34;POUR(2,1)\u0026#34; 16}; 17 18struct P { 19 int a, b; 20 int p[N]; 21 int n; 22}; 23 24P bfs() { 25 memset(vis, 0, sizeof(vis)); 26 27 P sp; 28 sp.a = 0; 29 sp.b = 0; 30 sp.n = 0; 31 memset(sp.p, 0, sizeof(sp.p)); 32 33 queue\u0026lt;P\u0026gt; q; 34 q.push(sp); 35 vis[sp.a][sp.b] = 1; 36 37 while(!q.empty()) { 38 P tp = q.front(); 39 q.pop(); 40 41 if(tp.a==C || tp.b==C) { 42 return tp; 43 } 44 45 P np = tp; 46 np.n = tp.n+1; 47 48 if(tp.a\u0026lt;A) { 49 np.a = A; 50 np.b = tp.b; 51 if(!vis[np.a][np.b]) { 52 np.p[tp.n] = 0; 53 q.push(np); 54 vis[np.a][np.b] = 1; 55 } 56 } 57 58 if(tp.b\u0026lt;B) { 59 np.a = tp.a; 60 np.b = B; 61 if(!vis[np.a][np.b]) { 62 np.p[tp.n] = 1; 63 q.push(np); 64 vis[np.a][np.b] = 1; 65 } 66 } 67 68 if(tp.a) { 69 np.a = 0; 70 np.b = tp.b; 71 if(!vis[np.a][np.b]) { 72 np.p[tp.n] = 2; 73 q.push(np); 74 vis[np.a][np.b] = 1; 75 } 76 } 77 78 if(tp.b) { 79 np.a = tp.a; 80 np.b = 0; 81 if(!vis[np.a][np.b]) { 82 np.p[tp.n] = 3; 83 q.push(np); 84 vis[np.a][np.b] = 1; 85 } 86 } 87 88 if(tp.a \u0026amp;\u0026amp; tp.b\u0026lt;B) { 89 if(tp.a \u0026gt; B-tp.b) { 90 np.a = tp.a-B+tp.b; 91 np.b = B; 92 } else { 93 np.a = 0; 94 np.b = tp.a+tp.b; 95 } 96 if(!vis[np.a][np.b]) { 97 np.p[tp.n] = 4; 98 q.push(np); 99 vis[np.a][np.b] = 1; 100 } 101 } 102 103 if(tp.b \u0026amp;\u0026amp; tp.a\u0026lt;A) { 104 if(tp.b \u0026gt; A-tp.a) { 105 np.a = A; 106 np.b = tp.b-A+tp.a; 107 } else { 108 np.a = tp.a+tp.b; 109 np.b = 0; 110 } 111 if(!vis[np.a][np.b]) { 112 np.p[tp.n] = 5; 113 q.push(np); 114 vis[np.a][np.b] = 1; 115 } 116 } 117 } 118 return sp; 119} 120 121int main(void) { 122 123 scanf(\u0026#34;%d%d%d\u0026#34;, \u0026amp;A, \u0026amp;B, \u0026amp;C); 124 P ans = bfs(); 125 126 if(ans.n) { 127 printf(\u0026#34;%d\\n\u0026#34;, ans.n); 128 for(int i=0; i\u0026lt;ans.n; i++) { 129 int j = ans.p[i]; 130 printf(\u0026#34;%s\\n\u0026#34;, path[j]); 131 } 132 } else { 133 printf(\u0026#34;impossible\\n\u0026#34;); 134 } 135 136 return 0; 137} ","permalink":"https://blog.lordash.de/posts/solution/poj-3414-pots/","summary":"Pots (POJ - 3414) 题面 You are given two pots, having the volume of A and B liters respectively. The following operations can be performed: FILL(i) fill the pot i (1 ≤ i ≤ 2) from the tap; DROP(i) empty the pot i to the drain; POUR(i,j) pour from pot i to pot j; after this operation either the pot j is full (and there may be some water","title":"POJ-3414 Pots"},{"content":"Shuffle’m Up (POJ - 3087) 题面 A common pastime for poker players at a poker table is to shuffle stacks of chips. Shuffling chips is performed by starting with two stacks of poker chips, S1 and S2, each stack containing C chips. Each stack may contain chips of several different colors.\nThe actual shuffle operation is performed by interleaving a chip from S1 with a chip from S2 as shown below for C = 5:\n​ The single resultant stack, S12, contains 2 × C chips. The bottommost chip of S12 is the bottommost chip from S2. On top of that chip, is the bottommost chip from S1. The interleaving process continues taking the 2nd chip from the bottom of S2 and placing that on S12, followed by the 2nd chip from the bottom of S1 and so on until the topmost chip from S1 is placed on top of S12.\nAfter the shuffle operation, S12 is split into 2 new stacks by taking the bottommost C chips from S12 to form a new S1 and the topmost C chips from S12 to form a new S2. The shuffle operation may then be repeated to form a new S12.\nFor this problem, you will write a program to determine if a particular resultant stack S12 can be formed by shuffling two stacks some number of times.\n输入 The first line of input contains a single integer N, (1 ≤ N ≤ 1000) which is the number of datasets that follow.Each dataset consists of four lines of input. The first line of a dataset specifies an integer C, (1 ≤ C ≤ 100) which is the number of chips in each initial stack (S1 and S2). The second line of each dataset specifies the colors of each of the C chips in stack S1, starting with the bottommost chip. The third line of each dataset specifies the colors of each of the C chips in stack S2 starting with the bottommost chip. Colors are expressed as a single uppercase letter (A through H). There are no blanks or separators between the chip colors. The fourth line of each dataset contains 2 × C uppercase letters (A through H), representing the colors of the desired result of the shuffling of S1 and S2 zero or more times. The bottommost chip’s color is specified first.\n输出 Output for each dataset consists of a single line that displays the dataset number (1 though N), a space, and an integer value which is the minimum number of shuffle operations required to get the desired resultant stack. If the desired result can not be reached using the input for the dataset, display the value negative 1 (−1) for the number of shuffle operations.\n样例输入 12 24 3AHAH 4HAHA 5HHAAAAHH 63 7CDE 8CDE 9EEDDCC 样例输出 11 2 22 -1 提示 无\n思路 模拟即可，如果序列重复则表明进入循环\n代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e3+5; 5 6int n, c, step; 7char s1[N] = \u0026#34;\u0026#34;, s2[N] = \u0026#34;\u0026#34;, t[N] = \u0026#34;\u0026#34;, r[N] = \u0026#34;\u0026#34;; 8 9int main(void) { 10 11 scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 12 for(int cs=1; cs\u0026lt;=n; i++) { 13 scanf(\u0026#34;%d %s %s %s\u0026#34;, \u0026amp;c, s1, s2, r); 14 map\u0026lt;string,bool\u0026gt; m; 15 step = 0; 16 17 while(1) { 18 for(int i=0; i\u0026lt;c; i++) { 19 t[i*2] = s2[i]; 20 t[i*2+1] = s1[i]; 21 } 22 t[c*2] = \u0026#39;\\0\u0026#39;; 23 step++; 24 if(strcmp(t, r)==0) { 25 break; 26 } 27 if(m[t]==true) { 28 step = -1; 29 break; 30 } 31 m[t] = true; 32 strncpy(s1, t, c); 33 strncpy(s2, t+c, c); 34 } 35 36 printf(\u0026#34;%d %d\\n\u0026#34;, cs, step); 37 } 38 return 0; 39} ","permalink":"https://blog.lordash.de/posts/solution/poj-3087-shufflem-up/","summary":"Shuffle’m Up (POJ - 3087) 题面 A common pastime for poker players at a poker table is to shuffle stacks of chips. Shuffling chips is performed by starting with two stacks of poker chips, S1 and S2, each stack containing C chips. Each stack may contain chips of several different colors. The actual shuffle operation is performed by interleaving a chip","title":"POJ-3087 Shuffle'm Up"},{"content":"Prime Path (POJ - 3126) 题面 The ministers of the cabinet were quite upset by the message from the Chief of Security stating that they would all have to change the four-digit room numbers on their offices. — It is a matter of security to change such things every now and then, to keep the enemy in the dark. — But look, I have chosen my number 1033 for good reasons. I am the Prime minister, you know! — I know, so therefore your new number 8179 is also a prime. You will just have to paste four new digits over the four old ones on your office door. — No, it’s not that simple. Suppose that I change the first digit to an 8, then the number will read 8033 which is not a prime! — I see, being the prime minister you cannot stand having a non-prime number on your door even for a few seconds. — Correct! So I must invent a scheme for going from 1033 to 8179 by a path of prime numbers where only one digit is changed from one prime to the next prime.\nNow, the minister of finance, who had been eavesdropping, intervened. — No unnecessary expenditure, please! I happen to know that the price of a digit is one pound. — Hmm, in that case I need a computer program to minimize the cost. You don\u0026rsquo;t know some very cheap software gurus, do you? — In fact, I do. You see, there is this programming contest going on\u0026hellip; Help the prime minister to find the cheapest prime path between any two given four-digit primes! The first digit must be nonzero, of course. Here is a solution in the case above.\n​ 1033 ​ 1733 ​ 3733 ​ 3739 ​ 3779 ​ 8779 ​ 8179\nThe cost of this solution is 6 pounds. Note that the digit 1 which got pasted over in step 2 can not be reused in the last step – a new 1 must be purchased.\n输入 One line with a positive number: the number of test cases (at most 100). Then for each test case, one line with two numbers separated by a blank. Both numbers are four-digit primes (without leading zeros).\n输出 One line for each case, either with a number stating the minimal cost or containing the word Impossible.\n样例输入 13 21033 8179 31373 8017 41033 1033 样例输出 16 27 30 提示 无\n思路 欧拉筛打表，枚举每一位的变化，注意大于2的偶数不是质数\n代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e5+5; 5 6bool isp[N] = {0}; 7bool vis[N] = {0}; 8int n, s, e; 9 10struct P { 11 int x; 12 int step; 13}; 14 15void euler() { 16 int p[N], m=0; 17 for(int i=2; i\u0026lt;=N; i++) { 18 if(!isp[i]) 19 p[m++] = i; 20 for(int j=0; j\u0026lt;m; j++) { 21 if(p[j]*i\u0026gt;N) 22 break; 23 isp[p[j]*i] = 1; 24 if(i%p[j]==0) 25 break; 26 } 27 } 28} 29 30int bfs() { 31 memset(vis, 0, sizeof(vis)); 32 33 P sp; 34 sp.x = s; 35 sp.step = 0; 36 37 queue\u0026lt;P\u0026gt; q; 38 q.push(sp); 39 vis[sp.x] = 1; 40 41 while(!q.empty()) { 42 P tp = q.front(); 43 q.pop(); 44 45 if(tp.x==e) { 46 return tp.step; 47 } 48 P np = tp; 49 np.step = tp.step+1; 50 51 for(int i=1; i\u0026lt;=9; i+=2) { 52 np.x = tp.x/10*10 + i; 53 if(np.x!=tp.x \u0026amp;\u0026amp; !vis[np.x] \u0026amp;\u0026amp; !isp[np.x]) { 54 q.push(np); 55 vis[np.x] = 1; 56 } 57 } 58 for(int i=0; i\u0026lt;=9; i++) { 59 np.x = tp.x/100*100 + i*10 + tp.x%10; 60 if(np.x!=tp.x \u0026amp;\u0026amp; !vis[np.x] \u0026amp;\u0026amp; !isp[np.x]) { 61 q.push(np); 62 vis[np.x] = 1; 63 } 64 } 65 for(int i=0; i\u0026lt;=9; i++) { 66 np.x = tp.x/1000*1000 + i*100 + tp.x%100; 67 if(np.x!=tp.x \u0026amp;\u0026amp; !vis[np.x] \u0026amp;\u0026amp; !isp[np.x]) { 68 q.push(np); 69 vis[np.x] = 1; 70 } 71 } 72 for(int i=1; i\u0026lt;=9; i++) { 73 np.x = i*1000 + tp.x%1000; 74 if(np.x!=tp.x \u0026amp;\u0026amp; !vis[np.x] \u0026amp;\u0026amp; !isp[np.x]) { 75 q.push(np); 76 vis[np.x] = 1; 77 } 78 } 79 } 80 return 0; 81} 82 83int main(void) { 84 euler(); 85 scanf(\u0026#34;%d\u0026#34;, \u0026amp;n); 86 for(int i=0; i\u0026lt;n; i++) { 87 scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;s, \u0026amp;e); 88 printf(\u0026#34;%d\\n\u0026#34;, bfs()); 89 } 90 return 0; 91} ","permalink":"https://blog.lordash.de/posts/solution/poj-3126-prime-path/","summary":"Prime Path (POJ - 3126) 题面 The ministers of the cabinet were quite upset by the message from the Chief of Security stating that they would all have to change the four-digit room numbers on their offices. — It is a matter of security to change such things every now and then, to keep the enemy in the dark. — But look, I have chosen my number 1033 for","title":"POJ-3126 Prime Path"},{"content":"Find The Multiple (POJ - 1426) 题面 Given a positive integer n, write a program to find out a nonzero multiple m of n whose decimal representation contains only the digits 0 and 1. You may assume that n is not greater than 200 and there is a corresponding m containing no more than 100 decimal digits.\n输入 The input file may contain multiple test cases. Each line contains a value of n (1 \u0026lt;= n \u0026lt;= 200). A line containing a zero terminates the input.\n输出 For each value of n in the input print a line containing the corresponding value of m. The decimal representation of m must not contain more than 100 digits. If there are multiple solutions for a given value of n, any one of them is acceptable.\n样例输入 12 26 319 40 样例输出 110 2100100100100100100 3111111111111111111 提示 无\n思路 一维bfs\n代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 15+5; 5 6int n; 7 8void bfs() { 9 queue\u0026lt;ll\u0026gt; q; 10 q.push(1); 11 while(!q.empty()) { 12 ll t = q.front(); 13 q.pop(); 14 if(t%n==0) { 15 printf(\u0026#34;%lld\\n\u0026#34;, t); 16 return ; 17 } 18 q.push(t*10); 19 q.push(t*10+1); 20 } 21} 22 23int main(void) { 24 25 while(scanf(\u0026#34;%d\u0026#34;, \u0026amp;n)==1 \u0026amp;\u0026amp; n) { 26 bfs(); 27 } 28 return 0; 29} ","permalink":"https://blog.lordash.de/posts/solution/poj-1426-find-the-multiple/","summary":"Find The Multiple (POJ - 1426) 题面 Given a positive integer n, write a program to find out a nonzero multiple m of n whose decimal representation contains only the digits 0 and 1. You may assume that n is not greater than 200 and there is a corresponding m containing no more than 100 decimal digits. 输入 The input file may contain multiple test cases. Each line","title":"POJ-1426 Find The Multiple"},{"content":"Fliptile (POJ - 3279) 题面 Farmer John knows that an intellectually satisfied cow is a happy cow who will give more milk. He has arranged a brainy activity for cows in which they manipulate an M × N grid (1 ≤ M ≤ 15; 1 ≤ N ≤ 15) of square tiles, each of which is colored black on one side and white on the other side.\nAs one would guess, when a single white tile is flipped, it changes to black; when a single black tile is flipped, it changes to white. The cows are rewarded when they flip the tiles so that each tile has the white side face up. However, the cows have rather large hooves and when they try to flip a certain tile, they also flip all the adjacent tiles (tiles that share a full edge with the flipped tile). Since the flips are tiring, the cows want to minimize the number of flips they have to make.\nHelp the cows determine the minimum number of flips required, and the locations to flip to achieve that minimum. If there are multiple ways to achieve the task with the minimum amount of flips, return the one with the least lexicographical ordering in the output when considered as a string. If the task is impossible, print one line with the word \u0026ldquo;IMPOSSIBLE\u0026rdquo;.\n输入 Line 1: Two space-separated integers: M and N Lines 2.. M+1: Line i+1 describes the colors (left to right) of row i of the grid with N space-separated integers which are 1 for black and 0 for white\n输出 Lines 1.. M: Each line contains N space-separated integers, each specifying how many times to flip that particular location.\n样例输入 14 4 21 0 0 1 30 1 1 0 40 1 1 0 51 0 0 1 样例输出 10 0 0 0 21 0 0 1 31 0 0 1 40 0 0 0 提示 无\n思路 开关问题，二进制枚举第一行开关情况\n代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 15+5; 5 6int b[N][N] = {{0}}, c[N][N] = {{0}}, a[N][N] = {{0}}; 7int n, m, ans = inf; 8 9int dx[]= { 1, -1, 0, 0, 0}; 10int dy[]= { 0, 0, 1, -1, 0}; 11 12int isb(int x, int y) { 13 int t = b[x][y]; 14 for(int i=0; i\u0026lt;5; i++) { 15 int xi = x+dx[i]; 16 int yi = y+dy[i]; 17 18 if(xi\u0026lt;0 || xi\u0026gt;=n || yi\u0026lt;0 || yi\u0026gt;=m) { 19 continue; 20 } 21 t += c[xi][yi]; 22 } 23 return t%2; 24} 25 26int dfs() { 27 for(int i=1; i\u0026lt;n; i++) 28 for(int j=0; j\u0026lt;m; j++) 29 if(isb(i-1,j)) 30 c[i][j] = 1; 31 32 for(int i=0; i\u0026lt;m; i++) 33 if(isb(n-1,i)) 34 return -1; 35 36 int res=0; 37 for(int i=0; i\u0026lt;n; i++) 38 for(int j=0; j\u0026lt;m; j++) 39 res += c[i][j]; 40 41 return res; 42} 43 44int main(void) { 45 while(scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;n, \u0026amp;m)==2) { 46 47 for(int i=0; i\u0026lt;n; i++) { 48 for(int j=0; j\u0026lt;m; j++) { 49 scanf(\u0026#34;%d\u0026#34;, \u0026amp;b[i][j]); 50 } 51 } 52 for(int i=0; i\u0026lt;(1\u0026lt;\u0026lt;m); i++) { 53 memset(c, 0, sizeof(c)); 54 for(int j=0; j\u0026lt;m; j++) { 55 c[0][m-j-1] = i\u0026gt;\u0026gt;j\u0026amp;1; 56 } 57 int res = dfs(); 58 if(res\u0026gt;=0 \u0026amp;\u0026amp; res\u0026lt;ans) { 59 ans = res; 60 memcpy(a, c, sizeof(c)); 61 } 62 } 63 if(ans==inf) { 64 printf(\u0026#34;IMPOSSIBLE\\n\u0026#34;); 65 } else { 66 for(int i=0; i\u0026lt;n; i++) { 67 for(int j=0; j\u0026lt;m; j++) { 68 printf(\u0026#34;%d \u0026#34;, a[i][j]); 69 } 70 printf(\u0026#34;\\n\u0026#34;); 71 } 72 } 73 } 74 return 0; 75} ","permalink":"https://blog.lordash.de/posts/solution/poj-3279-fliptile/","summary":"Fliptile (POJ - 3279) 题面 Farmer John knows that an intellectually satisfied cow is a happy cow who will give more milk. He has arranged a brainy activity for cows in which they manipulate an M × N grid (1 ≤ M ≤ 15; 1 ≤ N ≤ 15) of square tiles, each of which is colored black on one side and white on the other side. As one","title":"POJ-3279 Fliptile"},{"content":"Catch That Cow (POJ - 3278) 题面 Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 ≤ N ≤ 100,000) on a number line and the cow is at a point K (0 ≤ K ≤ 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting.\n* Walking: FJ can move from any point X to the points X - 1 or X + 1 in a single minute * Teleporting: FJ can move from any point X to the point 2 × X in a single minute.\nIf the cow, unaware of its pursuit, does not move at all, how long does it take for Farmer John to retrieve it?\n输入 Line 1: Two space-separated integers: N and K\n输出 Line 1: The least amount of time, in minutes, it takes for Farmer John to catch the fugitive cow.\n样例输入 15 17 样例输出 14 提示 The fastest way for Farmer John to reach the fugitive cow is to move along the following path: 5-10-9-18-17, which takes 4 minutes.\n思路 一维bfs，注意剪枝\n代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 1e5+5; 5 6bool vis[N] = {0}; 7int n, k, ans = 0; 8 9struct P { 10 int x; 11 int step; 12}; 13 14int bfs() { 15 memset(vis, 0, sizeof(vis)); 16 17 P sp; 18 sp.x = n; 19 sp.step = 0; 20 21 queue\u0026lt;P\u0026gt; q; 22 q.push(sp); 23 vis[sp.x] = 1; 24 25 while(!q.empty()) { 26 P tp = q.front(); 27 q.pop(); 28 29 if(tp.x==k) { 30 return tp.step; 31 } 32 33 P np = tp; 34 35 np.x = tp.x - 1; 36 if(np.x\u0026gt;=0 \u0026amp;\u0026amp; !vis[np.x]) { 37 np.step = tp.step+1; 38 q.push(np); 39 vis[np.x] = 1; 40 } 41 42 np.x = tp.x + 1; 43 if(np.x\u0026lt;=N \u0026amp;\u0026amp; !vis[np.x]) { 44 np.step = tp.step+1; 45 q.push(np); 46 vis[np.x] = 1; 47 } 48 49 np.x = tp.x * 2; 50 if(np.x\u0026lt;=N \u0026amp;\u0026amp; !vis[np.x]) { 51 np.step = tp.step+1; 52 q.push(np); 53 vis[np.x] = 1; 54 } 55 } 56 return 0; 57} 58 59int main(void) { 60 scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;n, \u0026amp;k); 61 62 if(n\u0026gt;k) 63 ans = n-k; 64 else 65 ans = bfs(); 66 67 printf(\u0026#34;%d\\n\u0026#34;, ans); 68 return 0; 69} ","permalink":"https://blog.lordash.de/posts/solution/poj-3278-catch-that-cow/","summary":"Catch That Cow (POJ - 3278) 题面 Farmer John has been informed of the location of a fugitive cow and wants to catch her immediately. He starts at a point N (0 ≤ N ≤ 100,000) on a number line and the cow is at a point K (0 ≤ K ≤ 100,000) on the same number line. Farmer John has two modes of transportation: walking and teleporting. *","title":"POJ-3278 Catch That Cow"},{"content":"Dungeon Master (POJ - 2251) 题面 You are trapped in a 3D dungeon and need to find the quickest way out! The dungeon is composed of unit cubes which may or may not be filled with rock. It takes one minute to move one unit north, south, east, west, up or down. You cannot move diagonally and the maze is surrounded by solid rock on all sides.\nIs an escape possible? If yes, how long will it take?\n输入 The input consists of a number of dungeons. Each dungeon description starts with a line containing three integers L, R and C (all limited to 30 in size). L is the number of levels making up the dungeon. R and C are the number of rows and columns making up the plan of each level. Then there will follow L blocks of R lines each containing C characters. Each character describes one cell of the dungeon. A cell full of rock is indicated by a \u0026lsquo;#\u0026rsquo; and empty cells are represented by a \u0026lsquo;.\u0026rsquo;. Your starting position is indicated by \u0026lsquo;S\u0026rsquo; and the exit by the letter \u0026lsquo;E\u0026rsquo;. There\u0026rsquo;s a single blank line after each level. Input is terminated by three zeroes for L, R and C.\n输出 Each maze generates one line of output. If it is possible to reach the exit, print a line of the form\nEscaped in x minute(s). where x is replaced by the shortest time it takes to escape. If it is not possible to escape, print the line\nTrapped! 样例输入 13 4 5 2S.... 3.###. 4.##.. 5###.# 6 7##### 8##### 9##.## 10##... 11 12##### 13##### 14#.### 15####E 16 171 3 3 18S## 19#E# 20### 21 220 0 0 样例输出 1Escaped in 11 minute(s). 2Trapped! 提示 无\n思路 六个方向，bfs即可\n代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 30+5; 5 6char b[N][N][N] = {{{0}}}; 7bool vis[N][N][N] = {{{0}}}; 8int l, r, c, ans = 0; 9 10int dx[] = { 1, -1, 0, 0, 0, 0}; 11int dy[] = { 0, 0, 1, -1, 0, 0}; 12int dz[] = { 0, 0, 0, 0, 1, -1}; 13 14struct P { 15 int z, x, y; 16 int step; 17}; 18P sp; 19 20bool bfs() { 21 memset(vis, 0, sizeof(vis)); 22 23 sp.step = 0; 24 25 queue\u0026lt;P\u0026gt; q; 26 q.push(sp); 27 vis[sp.z][sp.x][sp.y] = 1; 28 29 while(!q.empty()) { 30 P tp = q.front(); 31 q.pop(); 32 33 P np = tp; 34 35 for(int i=0; i\u0026lt;6; i++) { 36 int z = np.z = tp.z+dz[i]; 37 int x = np.x = tp.x+dx[i]; 38 int y = np.y = tp.y+dy[i]; 39 np.step = tp.step+1; 40 41 if(z\u0026lt;0 || z\u0026gt;=l || x\u0026lt;0 || x\u0026gt;=r || y\u0026lt;0 || y\u0026gt;=c) { 42 continue; 43 } 44 if(b[z][x][y]==\u0026#39;#\u0026#39;) { 45 continue; 46 } 47 if(b[z][x][y]==\u0026#39;E\u0026#39;) { 48 ans = np.step; 49 return true; 50 } 51 if(b[z][x][y]==\u0026#39;.\u0026#39; \u0026amp;\u0026amp; vis[z][x][y]==false) { 52 vis[z][x][y] = true; 53 q.push(np); 54 } 55 } 56 } 57 return false; 58} 59 60int main(void) { 61 while(scanf(\u0026#34;%d%d%d\u0026#34;, \u0026amp;l, \u0026amp;r, \u0026amp;c)==3 \u0026amp;\u0026amp; l \u0026amp;\u0026amp; r \u0026amp;\u0026amp; c) { 62 ans = 0; 63 64 for(int i=0; i\u0026lt;l; i++) { 65 for(int j=0; j\u0026lt;r; j++) { 66 for(int k=0; k\u0026lt;c; k++) { 67 scanf(\u0026#34; %c\u0026#34;, \u0026amp;b[i][j][k]); 68 if(b[i][j][k]==\u0026#39;S\u0026#39;) { 69 sp.z = i; 70 sp.x = j; 71 sp.y = k; 72 } 73 } 74 } 75 } 76 if(bfs()) 77 printf(\u0026#34;Escaped in %d minute(s).\\n\u0026#34;, ans); 78 else 79 printf(\u0026#34;Trapped!\\n\u0026#34;); 80 } 81 return 0; 82} ","permalink":"https://blog.lordash.de/posts/solution/poj-2251-dungeon-master/","summary":"Dungeon Master (POJ - 2251) 题面 You are trapped in a 3D dungeon and need to find the quickest way out! The dungeon is composed of unit cubes which may or may not be filled with rock. It takes one minute to move one unit north, south, east, west, up or down. You cannot move diagonally and the maze is surrounded by solid rock on all sides. Is an","title":"POJ-2251 Dungeon Master"},{"content":"棋盘问题 (POJ - 1321) 题面 在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同一列，请编程求解对于给定形状和大小的棋盘，摆放k个棋子的所有可行的摆放方案C。\n输入 输入含有多组测试数据。 每组数据的第一行是两个正整数，n k，用一个空格隔开，表示了将在一个n*n的矩阵内描述棋盘，以及摆放棋子的数目。 n \u0026lt;= 8 , k \u0026lt;= n 当为-1 -1时表示输入结束。 随后的n行描述了棋盘的形状：每行有n个字符，其中 # 表示棋盘区域， . 表示空白区域（数据保证不出现多余的空白行或者空白列）。\n输出 对于每一组数据，给出一行输出，输出摆放的方案数目C （数据保证C\u0026lt;2^31）。\n样例输入 12 1 2#. 3.# 44 4 5...# 6..#. 7.#.. 8#... 9-1 -1 样例输出 12 21 提示 无\n思路 按行讨论，保存列的访问状态\n代码 1using namespace std; 2typedef long long ll; 3const int inf = 0x3f3f3f3f; 4const int N = 8; 5 6char b[N][N] = {0}; 7bool vis[N] = {0}; 8int n, k, ans = 0; 9 10void dfs(int x, int cnt) { 11 if(cnt\u0026gt;=k) { 12 ans++; 13 return ; 14 } 15 for(int i=x; i\u0026lt;n; i++) { 16 for(int j=0; j\u0026lt;n; j++) { 17 if(b[i][j]==\u0026#39;#\u0026#39; \u0026amp;\u0026amp; !vis[j]) { 18 vis[j] = true; 19 dfs(i+1, cnt+1); 20 vis[j] = false; 21 } 22 } 23 } 24} 25 26int main(void) { 27 while(scanf(\u0026#34;%d%d\u0026#34;, \u0026amp;n, \u0026amp;k)==2 \u0026amp;\u0026amp; n!=-1 \u0026amp;\u0026amp; k!=-1) { 28 ans = 0; 29 memset(vis, 0, sizeof(vis)); 30 31 for(int i=0; i\u0026lt;n; i++) 32 for(int j=0; j\u0026lt;n; j++) 33 scanf(\u0026#34; %c\u0026#34;, \u0026amp;b[i][j]); 34 35 dfs(0, 0); 36 printf(\u0026#34;%d\\n\u0026#34;, ans); 37 } 38 return 0; 39} ","permalink":"https://blog.lordash.de/posts/solution/poj-1321-%E6%A3%8B%E7%9B%98%E9%97%AE%E9%A2%98/","summary":"棋盘问题 (POJ - 1321) 题面 在一个给定形状的棋盘（形状可能是不规则的）上面摆放棋子，棋子没有区别。要求摆放时任意的两个棋子不能放在棋盘中的同一行或者同","title":"POJ-1321 棋盘问题"},{"content":"一、准备 卸载已存在的MySQL\n1# rpm -qa | grep -i mysql 1# rpm -e --nodeps PackageName 于MySQL官网根据需要下载，参考链接：\nmysql80-community-release-el7-3.noarch.rpm mysql-connector-java-8.0.16-1.el7.noarch.rpm 二、MySQL 配置 更新MySQL的yum源\n1# rpm -ivh mysql80-community-release-el7-3.noarch.rpm yum安装\n1# yum install mysql-community-server 测试 启动MySQL服务\n1# systemctl start mysqld.service 查看MySQL的初始密码\n1# grep \u0026#39;password\u0026#39; /var/log/mysqld.log 登录\n1# mysql -uroot -p 修改密码\n1mysql\u0026gt; ALTER USER \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;new password\u0026#39;; 使用简单密码则需要先执行以下两条\n1mysql\u0026gt; set global validate_password_policy=0; 2mysql\u0026gt; set global validate_password_length=1; exit退出后即可使用新密码重新登录\n附上: 关闭MySQL服务\n1# systemctl stop mysqld.service MySQL的yum源移除\n1# yum remove mysql80-community-release-el7-3.noarch.rpm 三、JDBC 配置 将 mysql-connector-java-8.0.16-1.el7.noarch.rpm 解压，找到 mysql-connector-java.jar，将jar置于java的lib目录下/ext中。以本机为参考，目录是：/usr/lib/jvm/jre/lib/ext/\n测试 写一个简单测试 test.java如下，编译运行查看结果即可。\n1import java.sql.*; 2public class test { 3 public static void main(String[] args) { 4 try { 5 //Class.forName(\u0026#34;com.mysql.jdbc.Driver\u0026#34;); 6 String url = \u0026#34;jdbc:mysql://localhost\u0026#34;; 7 Connection con = DriverManager.getConnection(url, \u0026#34;root\u0026#34;, \u0026#34;password\u0026#34;); 8 if (con != null) { 9 System.out.println(\u0026#34;success...\u0026#34;); 10 con.close(); 11 } 12 else { 13 System.out.println(\u0026#34;failure!!!\u0026#34;); 14 } 15 } 16 catch (ClassNotFoundException e) { 17 e.printStackTrace(); 18 } 19 catch (SQLException e) { 20 e.printStackTrace(); 21 } 22 } 23} ","permalink":"https://blog.lordash.de/posts/configure/8f2d9aaab8294818/","summary":"一、准备 卸载已存在的MySQL 1# rpm -qa | grep -i mysql 1# rpm -e --nodeps PackageName 于MySQL官网根据需要下载，参考链接： mysql80-community-release-el7-3.noarch.rpm mysql-connector-java-8.0.16-1.el7.noarch.rpm 二、MySQL 配置 更新MySQL的yum源","title":"CentOS7配置MySQL和JDBC"}]